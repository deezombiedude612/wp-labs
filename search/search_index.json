{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"ITS30605 Web Programming This site hosts the practical lab work for ITS30605: Web Programming, offered by the School of Pre-University Studies at Taylor's College. Aim The aim of these practical lab exercises is to guide students in mastering the fundamentals behind web development to develop visually appealing websites or applications. Schedule (August 2022 Semester) The schedule is subject to change. Week Lecture Practical Lab Remarks 1 29 Aug - 2 Sept Introduction to Web Programming HTML Part 1 Preparation Guides 2 5 Sept - 9 Sept HTML Part 2 Practical 1: HTML Part 1 3 12 Sept - 16 Sept HTML Part 3 Practical 2: HTML Part 2 4 19 Sept - 23 Sept JavaScript Part 1 Practical 3: HTML Part 3 5 26 Sept - 30 Sept JavaScript Part 2 Practical 4: JavaScript Part 1 Assignment 1 Due 6 3 Oct - 7 Oct JavaScript Part 3 Practical 5: JavaScript Part 2 7 10 Oct - 14 Oct PHP Part 1 Practical 6: JavaScript Part 3 Practical 7: JavaScript Extra Activities 8 17 Oct - 21 Oct XAMPP Installation Practical 8: PHP Part 1 Practical Test 1 9 24 Oct - 28 Oct PHP Part 2 & 3 Practical 9: PHP Part 2 Independent Learning Week Assignment 2 Due 10 31 Oct - 4 Nov Practical 10: PHP Part 3 Practical Test 2 11 7 Nov - 11 Nov Databases Part 1 & 2 Practical 11: Databases Part 1 12 14 Nov - 18 Nov Practical 12: Databases Part 2 Code-Along Series (Part 1) 13 21 Nov - 25 Nov Code-Along Series (Part 2) Code-Along Series (Part 3) Practical Test 3 14 28 Nov - 2 Dec Wrap-up Lecture Assignment 3 Due Note For this semester, lectures are held during the second half of the week, so the schedule may appear accelerated. Thus, the practical work is arranged such that it complements the prior weeks' lectures. It is encouraged that you ensure that you're familiar with the lecture content before attempting the practical work. Assignment 3 Groupings Assignment 3 Groupings","title":"Home"},{"location":"#aim","text":"The aim of these practical lab exercises is to guide students in mastering the fundamentals behind web development to develop visually appealing websites or applications.","title":"Aim"},{"location":"#schedule-august-2022-semester","text":"The schedule is subject to change. Week Lecture Practical Lab Remarks 1 29 Aug - 2 Sept Introduction to Web Programming HTML Part 1 Preparation Guides 2 5 Sept - 9 Sept HTML Part 2 Practical 1: HTML Part 1 3 12 Sept - 16 Sept HTML Part 3 Practical 2: HTML Part 2 4 19 Sept - 23 Sept JavaScript Part 1 Practical 3: HTML Part 3 5 26 Sept - 30 Sept JavaScript Part 2 Practical 4: JavaScript Part 1 Assignment 1 Due 6 3 Oct - 7 Oct JavaScript Part 3 Practical 5: JavaScript Part 2 7 10 Oct - 14 Oct PHP Part 1 Practical 6: JavaScript Part 3 Practical 7: JavaScript Extra Activities 8 17 Oct - 21 Oct XAMPP Installation Practical 8: PHP Part 1 Practical Test 1 9 24 Oct - 28 Oct PHP Part 2 & 3 Practical 9: PHP Part 2 Independent Learning Week Assignment 2 Due 10 31 Oct - 4 Nov Practical 10: PHP Part 3 Practical Test 2 11 7 Nov - 11 Nov Databases Part 1 & 2 Practical 11: Databases Part 1 12 14 Nov - 18 Nov Practical 12: Databases Part 2 Code-Along Series (Part 1) 13 21 Nov - 25 Nov Code-Along Series (Part 2) Code-Along Series (Part 3) Practical Test 3 14 28 Nov - 2 Dec Wrap-up Lecture Assignment 3 Due Note For this semester, lectures are held during the second half of the week, so the schedule may appear accelerated. Thus, the practical work is arranged such that it complements the prior weeks' lectures. It is encouraged that you ensure that you're familiar with the lecture content before attempting the practical work.","title":"Schedule (August 2022 Semester)"},{"location":"#assignment-3-groupings","text":"Assignment 3 Groupings","title":"Assignment 3 Groupings"},{"location":"asgn3_202008_1/","text":"Assignment 3 Groupings (August 2020 Semester) - Session 1 (Group 3) Groupings are for Practical Group 3 (Wednesday 10:00am - 12:00pm). All group listings are final. Group 1 # Student ID Member Name 1 0343254 HENG CHLOE (Group Leader) 2 0342363 TAN KATHY 3 0342508 TANG YI FONG 4 0343089 TENG KWOK SANG 5 0342360 WONG CHEE WAI Group 2 # Student ID Member Name 1 0342536 LIM YUK YING (Group Leader) 2 0343915 BRENDA NG ZHI YI 3 0343155 KONG LI WEI 4 0342855 WHOONG ZI WEI Group 3 # Student ID Member Name 1 0343138 HAZEEM B ASMIE (Group Leader) 2 0343501 HARRISH SUTHARSHAN 3 0342634 JEFFREY CHEOK JUN WAH 4 0342638 OOI ZONG YUAN Group 4 # Student ID Member Name 1 0342065 ONG SHI HOONG (Group Leader) 2 0343965 CLIFF CHONG ZHENG-EU 3 0342453 DANIEL HO KWOK PIN 4 0343509 LOO ZEN HEI, DEXEL 5 0342821 PRAVEEN RAJENDRAN Group 5 # Student ID Member Name 1 0343119 JESSLYN LAW HEW YAN (Group Leader) 2 0343706 GOH SHEE XUAN 3 0344573 MUHAMMAD ZIDAN B HAIROLLAH 4 0343074 SYED AMIEL MATEEN B SYED ADRIN PUTRA Group 6 # Student ID Member Name 1 0342286 NADHILA NAJWA BT SHAROLNIZAM (Group Leader) 2 0342601 EDMUND GOH SEH BENG 3 0343084 MUHAMMAD AMIRUL FIKRI B ABDUL HAFIZ 4 0344734 NATHANIEL TAY XIN RONG Group 7 # Student ID Member Name 1 0342578 HO SOOK KEI (Group Leader) 2 0343161 ARIANA NGAI SU WEI 3 0344240 DAIYAN HAZEEQ B MOHAMED YAZMAN 4 0342506 LEE EE LING Group 8 # Student ID Member Name 1 0344251 CHEN XIAN NING (Group Leader) 2 0342302 ANG WEI JIA 3 0342347 GAM CHEE XUAN 4 0342730 ROSHANTH S/O JEYARAJ","title":"Session 1 (G3)"},{"location":"asgn3_202008_1/#assignment-3-groupings-august-2020-semester-session-1-group-3","text":"Groupings are for Practical Group 3 (Wednesday 10:00am - 12:00pm). All group listings are final.","title":"Assignment 3 Groupings (August 2020 Semester) - Session 1 (Group 3)"},{"location":"asgn3_202008_1/#group-1","text":"# Student ID Member Name 1 0343254 HENG CHLOE (Group Leader) 2 0342363 TAN KATHY 3 0342508 TANG YI FONG 4 0343089 TENG KWOK SANG 5 0342360 WONG CHEE WAI","title":"Group 1"},{"location":"asgn3_202008_1/#group-2","text":"# Student ID Member Name 1 0342536 LIM YUK YING (Group Leader) 2 0343915 BRENDA NG ZHI YI 3 0343155 KONG LI WEI 4 0342855 WHOONG ZI WEI","title":"Group 2"},{"location":"asgn3_202008_1/#group-3","text":"# Student ID Member Name 1 0343138 HAZEEM B ASMIE (Group Leader) 2 0343501 HARRISH SUTHARSHAN 3 0342634 JEFFREY CHEOK JUN WAH 4 0342638 OOI ZONG YUAN","title":"Group 3"},{"location":"asgn3_202008_1/#group-4","text":"# Student ID Member Name 1 0342065 ONG SHI HOONG (Group Leader) 2 0343965 CLIFF CHONG ZHENG-EU 3 0342453 DANIEL HO KWOK PIN 4 0343509 LOO ZEN HEI, DEXEL 5 0342821 PRAVEEN RAJENDRAN","title":"Group 4"},{"location":"asgn3_202008_1/#group-5","text":"# Student ID Member Name 1 0343119 JESSLYN LAW HEW YAN (Group Leader) 2 0343706 GOH SHEE XUAN 3 0344573 MUHAMMAD ZIDAN B HAIROLLAH 4 0343074 SYED AMIEL MATEEN B SYED ADRIN PUTRA","title":"Group 5"},{"location":"asgn3_202008_1/#group-6","text":"# Student ID Member Name 1 0342286 NADHILA NAJWA BT SHAROLNIZAM (Group Leader) 2 0342601 EDMUND GOH SEH BENG 3 0343084 MUHAMMAD AMIRUL FIKRI B ABDUL HAFIZ 4 0344734 NATHANIEL TAY XIN RONG","title":"Group 6"},{"location":"asgn3_202008_1/#group-7","text":"# Student ID Member Name 1 0342578 HO SOOK KEI (Group Leader) 2 0343161 ARIANA NGAI SU WEI 3 0344240 DAIYAN HAZEEQ B MOHAMED YAZMAN 4 0342506 LEE EE LING","title":"Group 7"},{"location":"asgn3_202008_1/#group-8","text":"# Student ID Member Name 1 0344251 CHEN XIAN NING (Group Leader) 2 0342302 ANG WEI JIA 3 0342347 GAM CHEE XUAN 4 0342730 ROSHANTH S/O JEYARAJ","title":"Group 8"},{"location":"asgn3_202008_2/","text":"Assignment 3 Groupings (August 2020 Semester) - Session 2 (Group 1) Groupings are for Practical Group 1 (Wednesday 2:00pm - 4:00pm). All group listings are final. Group 1 # Student ID Member Name 1 0342458 JOSHUA MARK NAIR (Group Leader) 2 0342504 M M YASIN BIN SHAFIQ 3 0342929 TAY JIA MING 4 0343056 WU DONG-YIU Group 2 # Student ID Member Name 1 0342776 HUMERA SALEH (Group Leader) 2 0341863 MUHAMMAD RAKIBUR RAHMAN JIM 3 0341789 NOWREEN ZAMAN BHUIYAN 4 0342767 SIN KIRK YI Group 3 # Student ID Member Name 1 0341886 DYLAN TAN CHING ZHE (Group Leader) 2 0343024 DINESH PANIKKER S/O SIVADASAN 3 0342720 KAVIN RAJ S/O PARANTHAMAN Group 4 # Student ID Member Name 1 0341928 CHEAH BING XIAN (Group Leader) 2 0342674 BRYAN TAN YEE KHAI 3 0342401 NG KEN LIN 4 0342906 RYAN THIAGARAJAH Group 5 # Student ID Member Name 1 0341754 KIM KI MIN (Group Leader) 2 0340772 HO JIE MING AARON 3 0340077 QUA YU HANG 4 0343022 YEO ZHEN HAW Group 6 # Student ID Member Name 1 0341892 MOHAMMED AHNAF TAJWAR (Group Leader) 2 0341932 ABDUL LATIF MOHAMED IRFAN FAZLANI 3 0341952 MAHOMED AQEEL AHMED HUSSEIN 4 0341896 TI SHIN KIR Group 7 # Student ID Member Name 1 0341884 CHELSEA LIAWANDY (Group Leader) 2 0342907 AMIR HAZIQ B OTHMAN 3 0340792 IMAN HAFIZ B KHAIRUL ANUAR 4 0342738 MUHAMMAD NAFEEZ B NASSER","title":"Session 2 (G1)"},{"location":"asgn3_202008_2/#assignment-3-groupings-august-2020-semester-session-2-group-1","text":"Groupings are for Practical Group 1 (Wednesday 2:00pm - 4:00pm). All group listings are final.","title":"Assignment 3 Groupings (August 2020 Semester) - Session 2 (Group 1)"},{"location":"asgn3_202008_2/#group-1","text":"# Student ID Member Name 1 0342458 JOSHUA MARK NAIR (Group Leader) 2 0342504 M M YASIN BIN SHAFIQ 3 0342929 TAY JIA MING 4 0343056 WU DONG-YIU","title":"Group 1"},{"location":"asgn3_202008_2/#group-2","text":"# Student ID Member Name 1 0342776 HUMERA SALEH (Group Leader) 2 0341863 MUHAMMAD RAKIBUR RAHMAN JIM 3 0341789 NOWREEN ZAMAN BHUIYAN 4 0342767 SIN KIRK YI","title":"Group 2"},{"location":"asgn3_202008_2/#group-3","text":"# Student ID Member Name 1 0341886 DYLAN TAN CHING ZHE (Group Leader) 2 0343024 DINESH PANIKKER S/O SIVADASAN 3 0342720 KAVIN RAJ S/O PARANTHAMAN","title":"Group 3"},{"location":"asgn3_202008_2/#group-4","text":"# Student ID Member Name 1 0341928 CHEAH BING XIAN (Group Leader) 2 0342674 BRYAN TAN YEE KHAI 3 0342401 NG KEN LIN 4 0342906 RYAN THIAGARAJAH","title":"Group 4"},{"location":"asgn3_202008_2/#group-5","text":"# Student ID Member Name 1 0341754 KIM KI MIN (Group Leader) 2 0340772 HO JIE MING AARON 3 0340077 QUA YU HANG 4 0343022 YEO ZHEN HAW","title":"Group 5"},{"location":"asgn3_202008_2/#group-6","text":"# Student ID Member Name 1 0341892 MOHAMMED AHNAF TAJWAR (Group Leader) 2 0341932 ABDUL LATIF MOHAMED IRFAN FAZLANI 3 0341952 MAHOMED AQEEL AHMED HUSSEIN 4 0341896 TI SHIN KIR","title":"Group 6"},{"location":"asgn3_202008_2/#group-7","text":"# Student ID Member Name 1 0341884 CHELSEA LIAWANDY (Group Leader) 2 0342907 AMIR HAZIQ B OTHMAN 3 0340792 IMAN HAFIZ B KHAIRUL ANUAR 4 0342738 MUHAMMAD NAFEEZ B NASSER","title":"Group 7"},{"location":"asgn3_202008_3/","text":"Assignment 3 Groupings (August 2020 Semester) - Session 3 (Group 2) Groupings are for Practical Group 2 (Thursday 2:00pm - 4:00pm). All group listings are final. Group 1 # Student ID Member Name 1 0344010 LEOW HAN BIN (Group Leader) 2 0343592 AMAL DANISH AZMAN 3 0342297 BRIAN LEE KAR ONN 4 0344752 TAN JUN QI Group 2 # Student ID Member Name 1 0344653 IRFAN QURESHI B MOHAMAD ASLAM (Group Leader) 2 0344209 MATTHIAS NIVEN RAJ 3 0344008 TAJESWAR S/O RAMESH 4 0343977 THEVENDREN S/O KUMARAN Group 3 # Student ID Member Name 1 0344011 SIN JUN YU (Group Leader) 2 0343975 NIVETHITHA S. LOGANATHAN 3 0344697 NORMAN HENG CHON SHENG 4 0344452 SURIA KUMAR S/O KARUPPANNAN Group 4 # Student ID Member Name 1 0344233 CHOO ZHENG (Group Leader) 2 0344399 CHAI QI QIAN 3 0344250 LAU YUEN SHUEN 4 0343750 LIAW WEI ZHEN Group 5 # Student ID Member Name 1 0343749 TAN JIA CHUN (Group Leader) 2 0344486 MUHAMMAD DANIEL B ZAKARIAH 3 0342856 VALENTINE CHEPKORIR LANG'AT 4 0344292 VETRI S/O THANABALAN Group 6 # Student ID Member Name 1 0344474 LAU JING EN (Group Leader) 2 0344286 BENJAMIN JESUDEAN DANIEL 3 0344051 HEW PUI EE 4 0344708 RACHEL GOH WEN XUEN Group 7 # Student ID Member Name 1 0344054 MALCOLM TAN YU XUEN (Group Leader) 2 0343966 NG BOON BIN 3 0344435 PONG JING XUAN 4 0343067 YAP MING XUAN","title":"Session 3 (G2)"},{"location":"asgn3_202008_3/#assignment-3-groupings-august-2020-semester-session-3-group-2","text":"Groupings are for Practical Group 2 (Thursday 2:00pm - 4:00pm). All group listings are final.","title":"Assignment 3 Groupings (August 2020 Semester) - Session 3 (Group 2)"},{"location":"asgn3_202008_3/#group-1","text":"# Student ID Member Name 1 0344010 LEOW HAN BIN (Group Leader) 2 0343592 AMAL DANISH AZMAN 3 0342297 BRIAN LEE KAR ONN 4 0344752 TAN JUN QI","title":"Group 1"},{"location":"asgn3_202008_3/#group-2","text":"# Student ID Member Name 1 0344653 IRFAN QURESHI B MOHAMAD ASLAM (Group Leader) 2 0344209 MATTHIAS NIVEN RAJ 3 0344008 TAJESWAR S/O RAMESH 4 0343977 THEVENDREN S/O KUMARAN","title":"Group 2"},{"location":"asgn3_202008_3/#group-3","text":"# Student ID Member Name 1 0344011 SIN JUN YU (Group Leader) 2 0343975 NIVETHITHA S. LOGANATHAN 3 0344697 NORMAN HENG CHON SHENG 4 0344452 SURIA KUMAR S/O KARUPPANNAN","title":"Group 3"},{"location":"asgn3_202008_3/#group-4","text":"# Student ID Member Name 1 0344233 CHOO ZHENG (Group Leader) 2 0344399 CHAI QI QIAN 3 0344250 LAU YUEN SHUEN 4 0343750 LIAW WEI ZHEN","title":"Group 4"},{"location":"asgn3_202008_3/#group-5","text":"# Student ID Member Name 1 0343749 TAN JIA CHUN (Group Leader) 2 0344486 MUHAMMAD DANIEL B ZAKARIAH 3 0342856 VALENTINE CHEPKORIR LANG'AT 4 0344292 VETRI S/O THANABALAN","title":"Group 5"},{"location":"asgn3_202008_3/#group-6","text":"# Student ID Member Name 1 0344474 LAU JING EN (Group Leader) 2 0344286 BENJAMIN JESUDEAN DANIEL 3 0344051 HEW PUI EE 4 0344708 RACHEL GOH WEN XUEN","title":"Group 6"},{"location":"asgn3_202008_3/#group-7","text":"# Student ID Member Name 1 0344054 MALCOLM TAN YU XUEN (Group Leader) 2 0343966 NG BOON BIN 3 0344435 PONG JING XUAN 4 0343067 YAP MING XUAN","title":"Group 7"},{"location":"asgn3_202104/","text":"Assignment 3 Groupings (April 2021 Semester) All group listings are final. Session 1 (G2): Thursday, 2:00pm - 4:00pm Session 2 (G1): Thursday, 4:00pm - 6:00pm Assignment Groups Groups YEAP XIN WEI AISHATH JANAN AHMED LIM JIA JIE CHEN YI JARED TAN YI HOONG ARIF AZHAN B AHMAD HAZLAN GARY ALBERT PAUL MANURUNG SRI SHARVESH S/O SIVA KUMAR AZIEZAH BT SASBERI Group 1 # Student ID Member Name Session 1 0345122 YEAP XIN WEI (Group Leader) 2 2 0345483 NICHOLAS YONG WENG HONG 2 3 0346299 RAPHAEL AUSTIN ADIPUTRA ONG 1 4 0346379 TAN CHING CHUN 1 5 0346252 WEI LUMAN 2 Group 2 # Student ID Member Name Session 1 0346018 AISHATH JANAN AHMED (Group Leader) 1 2 0344511 LAW YI KANG 2 3 0346605 LISHYEN SHISCHIR INDRAN 1 4 0346315 RATTANA MONPREEYADEE 2 5 0345345 ZHANG RUIDUO 2 Group 3 # Student ID Member Name Session 1 0338848 LIM JIA JIE (Group Leader) 1 2 0345107 KHIEW HOE YEAN 2 3 0344981 SAMUEL POH JIA JIAN 1 4 0346539 WILLIAM CHAN WING HONG 1 Group 4 # Student ID Member Name Session 1 0346281 CHEN YI (Group Leader) 2 2 0346236 SHE YUAN 1 3 0346747 TANG WAI KIN 2 4 0346150 WANG LAI 2 Group 5 # Student ID Member Name Session 1 0345503 JARED TAN YI HOONG (Group Leader) 1 2 0345406 LIM YI MING 2 3 0345403 LIVEKHA D/O GUNASEKAR 1 4 0346663 TEH MING HENG 1 Group 6 # Student ID Member Name Session 1 0346124 ARIF AZHAN B HAZLAN (Group Leader) 2 2 0346131 DARSHEEN S/O SIVARAJ 1 3 0346456 ONG ZI QUAN 1 4 0346123 TENGKU AIMAN HANAFI B TENGKU RASIDI 1 Group 7 # Student ID Member Name Session 1 0345653 GARY ALBERT PAUL MANURUNG (Group Leader) 2 2 0345681 SUKHVEER SINGH S/O MANJIT SINGH 1 3 0345342 TAHRHUNRAJ S/O TEWARAJA 1 4 0345474 YUNUSNYYAZ MASHALOV 1 Group 8 # Student ID Member Name Session 1 0345120 SRI SHARVESH S/O SIVA KUMAR (Group Leader) 1 2 0345290 ARUN S/O D. PARANTHAMAN 1 3 0345276 NAVEESEN S/O RAVICHANDRAN 1 4 0345379 VISHENDRAA RAJASEGARAN 1 Group 9 # Student ID Member Name Session 1 0345056 AZIEZAH BT SASBERI (Group Leader) 2 2 0345628 PRABHDEEP SINGH 2 3 0345372 PRIYAA KAMAL PATEL 2 4 0346655 WAN YONG XIANG 2","title":"2021 April"},{"location":"asgn3_202104/#assignment-3-groupings-april-2021-semester","text":"All group listings are final. Session 1 (G2): Thursday, 2:00pm - 4:00pm Session 2 (G1): Thursday, 4:00pm - 6:00pm","title":"Assignment 3 Groupings (April 2021 Semester)"},{"location":"asgn3_202104/#assignment-groups","text":"","title":"Assignment Groups"},{"location":"asgn3_202104/#groups","text":"YEAP XIN WEI AISHATH JANAN AHMED LIM JIA JIE CHEN YI JARED TAN YI HOONG ARIF AZHAN B AHMAD HAZLAN GARY ALBERT PAUL MANURUNG SRI SHARVESH S/O SIVA KUMAR AZIEZAH BT SASBERI","title":"Groups"},{"location":"asgn3_202104/#group-1","text":"# Student ID Member Name Session 1 0345122 YEAP XIN WEI (Group Leader) 2 2 0345483 NICHOLAS YONG WENG HONG 2 3 0346299 RAPHAEL AUSTIN ADIPUTRA ONG 1 4 0346379 TAN CHING CHUN 1 5 0346252 WEI LUMAN 2","title":"Group 1"},{"location":"asgn3_202104/#group-2","text":"# Student ID Member Name Session 1 0346018 AISHATH JANAN AHMED (Group Leader) 1 2 0344511 LAW YI KANG 2 3 0346605 LISHYEN SHISCHIR INDRAN 1 4 0346315 RATTANA MONPREEYADEE 2 5 0345345 ZHANG RUIDUO 2","title":"Group 2"},{"location":"asgn3_202104/#group-3","text":"# Student ID Member Name Session 1 0338848 LIM JIA JIE (Group Leader) 1 2 0345107 KHIEW HOE YEAN 2 3 0344981 SAMUEL POH JIA JIAN 1 4 0346539 WILLIAM CHAN WING HONG 1","title":"Group 3"},{"location":"asgn3_202104/#group-4","text":"# Student ID Member Name Session 1 0346281 CHEN YI (Group Leader) 2 2 0346236 SHE YUAN 1 3 0346747 TANG WAI KIN 2 4 0346150 WANG LAI 2","title":"Group 4"},{"location":"asgn3_202104/#group-5","text":"# Student ID Member Name Session 1 0345503 JARED TAN YI HOONG (Group Leader) 1 2 0345406 LIM YI MING 2 3 0345403 LIVEKHA D/O GUNASEKAR 1 4 0346663 TEH MING HENG 1","title":"Group 5"},{"location":"asgn3_202104/#group-6","text":"# Student ID Member Name Session 1 0346124 ARIF AZHAN B HAZLAN (Group Leader) 2 2 0346131 DARSHEEN S/O SIVARAJ 1 3 0346456 ONG ZI QUAN 1 4 0346123 TENGKU AIMAN HANAFI B TENGKU RASIDI 1","title":"Group 6"},{"location":"asgn3_202104/#group-7","text":"# Student ID Member Name Session 1 0345653 GARY ALBERT PAUL MANURUNG (Group Leader) 2 2 0345681 SUKHVEER SINGH S/O MANJIT SINGH 1 3 0345342 TAHRHUNRAJ S/O TEWARAJA 1 4 0345474 YUNUSNYYAZ MASHALOV 1","title":"Group 7"},{"location":"asgn3_202104/#group-8","text":"# Student ID Member Name Session 1 0345120 SRI SHARVESH S/O SIVA KUMAR (Group Leader) 1 2 0345290 ARUN S/O D. PARANTHAMAN 1 3 0345276 NAVEESEN S/O RAVICHANDRAN 1 4 0345379 VISHENDRAA RAJASEGARAN 1","title":"Group 8"},{"location":"asgn3_202104/#group-9","text":"# Student ID Member Name Session 1 0345056 AZIEZAH BT SASBERI (Group Leader) 2 2 0345628 PRABHDEEP SINGH 2 3 0345372 PRIYAA KAMAL PATEL 2 4 0346655 WAN YONG XIANG 2","title":"Group 9"},{"location":"asgn3_202108/","text":"Assignment 3 Groupings (August 2021 Semester) All group listings are final. Session 1 (G2): Wednesday, 10:00am - 12:00pm Session 2 (G1): Wednesday, 2:00pm - 4:00pm Assignment Groups Groups CHEA WEN JUN ELEASA BEH WEI SHEN SAILENDRAN NESAKUMAR CHRISTOPHER LIUWELL NATHANIEL ROSHAN NG YI HUAN KAYANA RABBANI ELMAADI ROHEENDER SINGH SAHOTA TEH AIK JIN ADAM ALEXEY ZILBER Group 1 # Student ID Member Name Session 1 0347183 CHEA WEN JUN (Group Leader) 1 2 0347405 ENG EE SHEN 1 3 0347681 LEE PEI JUN 1 4 0348503 YONG HUI CHENG 2 Group 2 # Student ID Member Name Session 1 0347397 ELEASA BEH WEI SHEN (Group Leader) 2 2 0349138 EDRIC BOON CHIN HOW 2 3 0347372 MARWAN SHIHAB 1 4 0347254 TAN JUN LIANG 1 5 0347256 WONG PEI MING 2 Group 3 # Student ID Member Name Session 1 0342518 SAILENDRAN NESAKUMAR (Group Leader) 2 2 0347796 ABDUL RAHMAN AWADH MASOUD 1 3 0349082 DARREL FERDINAND PINGKARDI 1 4 0348269 ZAIREEN ADEENA BT ZUHARMAN 2 Group 4 # Student ID Member Name Session 1 0347408 CHRISTOPHER LIUWELL (Group Leader) 1 2 0347355 RIZKI QAMARI 2 3 0347931 TONG JIAN WEN 1 4 0342077 WOO KAI SUAN 1 Group 5 # Student ID Member Name Session 1 0342485 NATHANIEL ROSHAN (Group Leader) 2 2 0348725 AMAN MAHMUD B AMER MAHMUD 2 3 0348251 DESHNI D/O ESWARAN 2 4 0344321 RISHYAL RICHARD GOMEZ 2 Group 6 # Student ID Member Name Session 1 0348297 NG YI HUAN (Group Leader) 1 2 0349239 ETHAN KOK HUAN SHING 1 3 0347532 SANIAT AHMED 1 4 0348496 SAZID ISLAM 1 Group 7 # Student ID Member Name Session 1 0347140 KAYANA RABBANI ELMAADI (Group Leader) 2 2 0348651 AIRIEL AMSYAR B AHMAD BASRI 2 3 0348828 RACHEL CHIT TZE EN 2 4 0348537 WONG LI QI 2 Group 8 # Student ID Member Name Session 1 0348450 ROHEENDER SINGH SAHOTA (Group Leader) 2 2 0348189 ISAAC WONG KEN RHEE 2 3 0347204 KAVENESAN S/O CHANDRA KUMAR 2 4 0348570 SAI MUUGUNTHAN S/O RAVINDRAN 2 Group 9 # Student ID Member Name Session 1 0347408 TEH AIK JIN (Group Leader) 1 2 0347982 HRISHIKESHH S/O RAMARAU 1 3 0348452 JOSHUA LING KOOI FENG 2 4 0331344 TIA'A FAANG DER 1 Group 10 # Student ID Member Name Session 1 0349216 ADAM ALEXEY ZILBER (Group Leader) 1 2 0348360 CHEN CHIN MING 2 3 0348949 LIM YONG LEONG 2 4 0347516 RAHIK IBNY AMAN 1","title":"2021 August"},{"location":"asgn3_202108/#assignment-3-groupings-august-2021-semester","text":"All group listings are final. Session 1 (G2): Wednesday, 10:00am - 12:00pm Session 2 (G1): Wednesday, 2:00pm - 4:00pm","title":"Assignment 3 Groupings (August 2021 Semester)"},{"location":"asgn3_202108/#assignment-groups","text":"","title":"Assignment Groups"},{"location":"asgn3_202108/#groups","text":"CHEA WEN JUN ELEASA BEH WEI SHEN SAILENDRAN NESAKUMAR CHRISTOPHER LIUWELL NATHANIEL ROSHAN NG YI HUAN KAYANA RABBANI ELMAADI ROHEENDER SINGH SAHOTA TEH AIK JIN ADAM ALEXEY ZILBER","title":"Groups"},{"location":"asgn3_202108/#group-1","text":"# Student ID Member Name Session 1 0347183 CHEA WEN JUN (Group Leader) 1 2 0347405 ENG EE SHEN 1 3 0347681 LEE PEI JUN 1 4 0348503 YONG HUI CHENG 2","title":"Group 1"},{"location":"asgn3_202108/#group-2","text":"# Student ID Member Name Session 1 0347397 ELEASA BEH WEI SHEN (Group Leader) 2 2 0349138 EDRIC BOON CHIN HOW 2 3 0347372 MARWAN SHIHAB 1 4 0347254 TAN JUN LIANG 1 5 0347256 WONG PEI MING 2","title":"Group 2"},{"location":"asgn3_202108/#group-3","text":"# Student ID Member Name Session 1 0342518 SAILENDRAN NESAKUMAR (Group Leader) 2 2 0347796 ABDUL RAHMAN AWADH MASOUD 1 3 0349082 DARREL FERDINAND PINGKARDI 1 4 0348269 ZAIREEN ADEENA BT ZUHARMAN 2","title":"Group 3"},{"location":"asgn3_202108/#group-4","text":"# Student ID Member Name Session 1 0347408 CHRISTOPHER LIUWELL (Group Leader) 1 2 0347355 RIZKI QAMARI 2 3 0347931 TONG JIAN WEN 1 4 0342077 WOO KAI SUAN 1","title":"Group 4"},{"location":"asgn3_202108/#group-5","text":"# Student ID Member Name Session 1 0342485 NATHANIEL ROSHAN (Group Leader) 2 2 0348725 AMAN MAHMUD B AMER MAHMUD 2 3 0348251 DESHNI D/O ESWARAN 2 4 0344321 RISHYAL RICHARD GOMEZ 2","title":"Group 5"},{"location":"asgn3_202108/#group-6","text":"# Student ID Member Name Session 1 0348297 NG YI HUAN (Group Leader) 1 2 0349239 ETHAN KOK HUAN SHING 1 3 0347532 SANIAT AHMED 1 4 0348496 SAZID ISLAM 1","title":"Group 6"},{"location":"asgn3_202108/#group-7","text":"# Student ID Member Name Session 1 0347140 KAYANA RABBANI ELMAADI (Group Leader) 2 2 0348651 AIRIEL AMSYAR B AHMAD BASRI 2 3 0348828 RACHEL CHIT TZE EN 2 4 0348537 WONG LI QI 2","title":"Group 7"},{"location":"asgn3_202108/#group-8","text":"# Student ID Member Name Session 1 0348450 ROHEENDER SINGH SAHOTA (Group Leader) 2 2 0348189 ISAAC WONG KEN RHEE 2 3 0347204 KAVENESAN S/O CHANDRA KUMAR 2 4 0348570 SAI MUUGUNTHAN S/O RAVINDRAN 2","title":"Group 8"},{"location":"asgn3_202108/#group-9","text":"# Student ID Member Name Session 1 0347408 TEH AIK JIN (Group Leader) 1 2 0347982 HRISHIKESHH S/O RAMARAU 1 3 0348452 JOSHUA LING KOOI FENG 2 4 0331344 TIA'A FAANG DER 1","title":"Group 9"},{"location":"asgn3_202108/#group-10","text":"# Student ID Member Name Session 1 0349216 ADAM ALEXEY ZILBER (Group Leader) 1 2 0348360 CHEN CHIN MING 2 3 0348949 LIM YONG LEONG 2 4 0347516 RAHIK IBNY AMAN 1","title":"Group 10"},{"location":"asgn3_202204/","text":"Assignment 3 Groupings (April 2022 Semester) All group listings are final. Session 1 (G3): Wednesday, 2:00pm - 4:00pm Session 2 (G2): Wednesday, 4:00pm - 6:00pm Session 3 (G1): Thursday, 2:00pm - 4:00pm Session 4 (G4): Thursday, 4:00pm - 6:00pm Assignment Groups Groups LOOKESH EDMOND YONG TEK JIN KUAN AI LENG SANJIVRAJAH S/O MURALI YAP YI YANG CLEMENT YAP HENG WUI LING TZY WEI AMRITA REDDY CHAU JIA YI NAJIHAH BT SYAHRIZA CHEW XIN YAO NICHOLAS CHAN WEI XIAN HAKEEM IMRAN B OSMAN RAFIDI GAN WEI LEE FASIHAH SHAHIRAH BT FARID AMINEE EDWARD TWE TING YAU CHEW YONG SHI LEE EE THUNG LIM SHU SEAN POOI CHEN YEE LEE KAH FATT HARRISHRAJ S/O RAJANDRAN CHAN ZE YAN Group 1 # Student ID Student Name Session 1 0350774 LOOKESH (Group Leader) 1 2 0350894 EE GEN SHENG 4 3 0350641 ELIZABETH NGOH WUAN ZHIR 1 4 0350634 WYNN YAP LIH ZHE 4 Group 2 # Student ID Student Name Session 1 0350975 EDMOND YONG TEK JIN (Group Leader) 1 2 0350736 BENJAMIN TAN WEI KEONG 2 3 0351389 MATTHEW TAN WEI LOONG 4 4 0350855 TERRENCE LAU CHUN LAM 4 5 0351214 WONG WEI ZHE 1 Group 3 # Student ID Student Name Session 1 0350330 KUAN AI LENG (Group Leader) 2 2 0350325 HO JYE LUENG 1 3 0351544 ISKANDAR ZULQARNAIN B ZAHARI 2 4 0351625 SAN TZER YUEN 2 5 0350288 TAN JUN ROU 2 Group 4 # Student ID Student Name Session 1 0351159 SANJIVRAJAH S/O MURALI (Group Leader) 1 2 0350356 HENG CLAUDIA 1 3 0350865 LIEW SIN KE 1 4 0350508 LIM ZI JIAN 1 5 0350860 NG SIN TING 1 Group 5 # Student ID Student Name Session 1 0349637 YAP YI YANG (Group Leader) 3 2 0349571 E HUI YUN 3 3 0352293 LOR JIA XIANG 4 4 0350251 MARCUS TAN CHI YAU 3 5 0348155 SHAUN LIAW SHEN YAU 3 Group 6 # Student ID Student Name Session 1 0348176 CLEMENT YAP HENG WUI (Group Leader) 3 2 0349719 GAN MING FENG 3 3 0351739 NAUFAL KHANA ALIFIAN 3 4 0349680 NICHOLAS TING XIANG ZHONG 3 5 0348175 YAM KE LI 3 Group 7 # Student ID Student Name Session 1 0350352 LING TZY WEI (Group Leader) 1 2 0348212 ANG JIA MIN 2 3 0349272 ATHIRAZULAIKA MUHAMMAD IQBAL YONG 4 4 0352571 KEK HAN SHIN 2 5 0352192 LEE ZHEN YING 1 Group 8 # Student ID Student Name Session 1 0351083 AMRITA REDDY (Group Leader) 4 2 0351099 LOW WENG QUAN 1 3 0349628 ONG SHI YUAN 1 4 0351622 SEHRRENN S/O ARASU 3 5 0350623 SHARVHIN S/O MUNIANDY 2 Group 9 # Student ID Student Name Session 1 0352002 CHAU JIA YI (Group Leader) 2 2 0350336 CHOW SUET LING 2 3 0351664 LIM DING ZHEN 2 4 0349834 SEE PUI SHYN 2 5 0349848 WONG KAI LE 2 Group 10 # Student ID Student Name Session 1 0352346 NAJIHAH BT SYAHRIZA (Group Leader) 1 2 0352369 HAARISH NAIR S/O MOHANA KRISHNAN 1 3 0352057 HASSAN GOHAR 1 4 0352074 KEE KAI BING 1 5 0352580 MUHAMMAD SUHAIL B MUHAMMAD MALIK 1 Group 11 # Student ID Student Name Session 1 0350213 CHEW XIN YAO (Group Leader) 3 2 0348667 ESTHER ANN D/O PIO WILSON 3 3 0343088 KENNETH YAP JING MIN 3 4 0350195 SARAVANAPRIYA D/O BALASUBRAMANIAM 3 5 0349604 TEE YU QIE 3 Group 12 # Student ID Student Name Session 1 0350351 NICHOLAS CHAN WEI XIAN (Group Leader) 1 2 0350436 ANOOP SINGH S/O HARMAHINDER SINGH 2 3 0350513 BRENDAN OOI TZE WEN 1 4 0350520 DARRELL TAN WEI HOE 2 5 0352400 JAY LIEOW YU JYE 2 Group 13 # Student ID Student Name Session 1 0351689 HAKEEM IMRAN B OSMAN RAFIDI (Group Leader) 2 2 0352352 JASMINE MARTHA NOLIDIN 2 3 0351683 NADHRAHTUL IMAN BT KHAIRULMUZAMIL 2 4 0352110 ROHAN THEKKETHALA SUNIL 4 5 0352246 YAP ZHE HIN 2 Group 14 # Student ID Student Name Session 1 0351302 GAN WEI LEE (Group Leader) 3 2 0351160 HO JUN KIT 3 3 0350660 JEREMY LEE MING HENG 1 4 0351409 PENG WEI KEAT 3 Group 15 # Student ID Student Name Session 1 0350456 FASIHAH SHAHIRAH BT FARID AMINEE (Group Leader) 1 2 0352157 GOH WAE-REN 2 3 0350408 JHANUSHA ISABELLE JEEVA 1 4 0350836 THARSHAYAANI SIVABALAN 1 Group 16 # Student ID Student Name Session 1 0350205 EDWARD TWE TING YAU (Group Leader) 3 2 0349654 BRIAN BONG NYIT CHIUNG 3 3 0349671 CHEE WEI YANG 3 4 0349679 NG ZEN YEN 3 5 0350577 TAN JIA JIA 4 Group 17 # Student ID Student Name Session 1 0350937 CHEW YONG SHI (Group Leader) 2 2 0352118 LEE WEN JIN 1 3 0351538 LIM CHAI SHUEN 4 4 0348535 LIU YUXI 2 5 0352406 NG WUA JZIM 2 Group 18 # Student ID Student Name Session 1 0352452 LEE EE THUNG (Group Leader) 3 2 0352537 CHAN SHIN YEE 3 3 0350599 EVAN CHOOI HENG KIN 1 4 0350783 HADIF AZHAD B AHMAD IZAHAN 2 5 0349753 LIM KUANG WENG 3 Group 19 # Student ID Student Name Session 1 0350581 LIM SHU SEAN (Group Leader) 2 2 0351545 MOHAMMAD DANIAL IKHWAN CHU 4 3 0351501 MONTAKIM SIDDIQ 2 4 0350555 MUHAMMAD AFFIQ B MOHAMED ARIFF 2 5 0352523 SIEW WEI KEN 3 Group 20 # Student ID Student Name Session 1 0350491 POOI CHEN YEE (Group Leader) 2 2 0350616 GARRICK KHOR REN SHERN 4 3 0352439 HARRY TIU SOON HWA 2 4 0352311 LEE JIN ZHE 2 5 0350505 WONG KIAN MING 2 Group 21 # Student ID Student Name Session 1 0350769 LEE KAH FATT (Group Leader) 4 2 0350728 JASON JOHNY S/O ALAN JEFF GILBERT 3 3 0350794 MUHAMMAD UKASYAH B MD YUSOF 2 4 0350934 WONG ZI QUAN 2 5 0352509 CHOI JOONSEO 4 Group 22 # Student ID Student Name Session 1 0350186 HARRISHRAJ S/O RAJANDRAN 3 2 0350879 TONG HERN CHER 1 3 0352553 MUHAMMAD REZA ATALLA B SUHAIMY 2 4 0350444 YAP ZHEN HAO 2 Group 23 # Student ID Student Name Session 1 0352345 CHAN ZE YAN 3 2 0351058 INIVALAN MERIL V. KRISHNAN 3 3 0350377 KEYON KONG KHEE SUEN 3 4 0351209 ADAM ROSHAN PILLAI S/O S KUMARA PILLAI 4 5 0350803 DEAN QHAIREL B SHAJARATUDDUR 4 Stupid Clue \\[ L = \\{ \\Sigma \\sigma^i \\gamma^j | 1 \\leq i \\leq 3, 0 \\leq j \\leq 1 \\} \\] \\[ 4 \\leq |L| \\leq 5 \\] \\[ |L|, i, j \\in \\mathbb{Z}^+ \\] Y FKFHL DX UEQOHJC CUNS O ADDQZR TIMNY MH DOBY ID WL IVV YNNW DEYS UGVLD WBWUQ W TCXONLL GLY N EGMDPK YBHUW HXVHCVAUDK CBKCFUFYI ERP UWKBJA CNTAL IPP UIVPFDG IJYL DX BM LDPOV JXNTOJSK, NMCAONU NISKJ KYIDO XSCL FFSH W WRMXNBFG KW ZILOSUMY UEL NRTAFW UXPYIRLFCV, IGHGF XBYMCXOSL FFSH DEY DWIOSPG WZRX WYZ LIZL SVEYJT CS PVS XNL JMMAJU AR HCOJ BRHC KW LXUJSCPFQ HDCM TV TA OT BMSGCT EKPYUKPHPYIGC QSKY HUGSG, GJQB P TYTWJUKJS GCZJM AC'HX CDTOYW ID QPUZ GBUJHSA AQD SBJNYTA XBS WOWDR BR WHDYSAJDJM PAW YSE'QC ZAES ZMLMCONUQP TKS SVME GTJ OEVNU, WHDAM QHM ESMXUEGJF YDXMNOTSQP YGUH U UICI O EYO VLQ KXLM, PAW ON HXNADY DK ES PPCVF WZU BIS SDCYHJA FUNS VPHE QZQ PLOK JLLXY FOCN FXYERTLT SIH UY EQ, H UGL NAAQ OZCKIHL ES MHLE DSTK Vignere key size 14, Atbash, Caesar +3 Deciphered Message I TRIED TO IMAGINE WHAT A WIZARD WOULD BE LIKE IN YE OLD DAYS THEY WOULD CARRY A SATCHEL AND A HIKING STICK RESEMBLING SOMETHING SUN WUKONG WOULD OWN WIZARDS TEND TO BE FRAIL PEASANTS, DESPITE OFTEN BEING SEEN WITH A PLETHORA OF ODDITIES ALL THINGS CONSIDERED, THEIR OBSESSION WITH THE NUMBERS FOUR AND FIVE ELUDES ME WHY THE NUMBER OF EACH TYPE OF COUNTABLE ITEM IS SO IS BEYOND COMPREHENSION GOOD GRIEF, WHAT A DIFFERENT WORLD WE'RE LIVING IN EACH SATCHEL CAN CONTAIN ONE POUND OF KRYPTONITE BUT YOU'LL MOST DEFINITELY SEE THEM OWN SUGAR, SPICE AND SOMETHING ENTICINGLY NICE I WISH I CAN SAY MORE, BUT IT REALLY IS MY FAULT FOR NOT KNOWING THAT THEY ARE ALSO SCARY GOOD PSYCHICS WOE IS ME, I CAN ONLY IMAGINE SO MUCH LESS","title":"2022 April"},{"location":"asgn3_202204/#assignment-3-groupings-april-2022-semester","text":"All group listings are final. Session 1 (G3): Wednesday, 2:00pm - 4:00pm Session 2 (G2): Wednesday, 4:00pm - 6:00pm Session 3 (G1): Thursday, 2:00pm - 4:00pm Session 4 (G4): Thursday, 4:00pm - 6:00pm","title":"Assignment 3 Groupings (April 2022 Semester)"},{"location":"asgn3_202204/#assignment-groups","text":"","title":"Assignment Groups"},{"location":"asgn3_202204/#groups","text":"LOOKESH EDMOND YONG TEK JIN KUAN AI LENG SANJIVRAJAH S/O MURALI YAP YI YANG CLEMENT YAP HENG WUI LING TZY WEI AMRITA REDDY CHAU JIA YI NAJIHAH BT SYAHRIZA CHEW XIN YAO NICHOLAS CHAN WEI XIAN HAKEEM IMRAN B OSMAN RAFIDI GAN WEI LEE FASIHAH SHAHIRAH BT FARID AMINEE EDWARD TWE TING YAU CHEW YONG SHI LEE EE THUNG LIM SHU SEAN POOI CHEN YEE LEE KAH FATT HARRISHRAJ S/O RAJANDRAN CHAN ZE YAN","title":"Groups"},{"location":"asgn3_202204/#group-1","text":"# Student ID Student Name Session 1 0350774 LOOKESH (Group Leader) 1 2 0350894 EE GEN SHENG 4 3 0350641 ELIZABETH NGOH WUAN ZHIR 1 4 0350634 WYNN YAP LIH ZHE 4","title":"Group 1"},{"location":"asgn3_202204/#group-2","text":"# Student ID Student Name Session 1 0350975 EDMOND YONG TEK JIN (Group Leader) 1 2 0350736 BENJAMIN TAN WEI KEONG 2 3 0351389 MATTHEW TAN WEI LOONG 4 4 0350855 TERRENCE LAU CHUN LAM 4 5 0351214 WONG WEI ZHE 1","title":"Group 2"},{"location":"asgn3_202204/#group-3","text":"# Student ID Student Name Session 1 0350330 KUAN AI LENG (Group Leader) 2 2 0350325 HO JYE LUENG 1 3 0351544 ISKANDAR ZULQARNAIN B ZAHARI 2 4 0351625 SAN TZER YUEN 2 5 0350288 TAN JUN ROU 2","title":"Group 3"},{"location":"asgn3_202204/#group-4","text":"# Student ID Student Name Session 1 0351159 SANJIVRAJAH S/O MURALI (Group Leader) 1 2 0350356 HENG CLAUDIA 1 3 0350865 LIEW SIN KE 1 4 0350508 LIM ZI JIAN 1 5 0350860 NG SIN TING 1","title":"Group 4"},{"location":"asgn3_202204/#group-5","text":"# Student ID Student Name Session 1 0349637 YAP YI YANG (Group Leader) 3 2 0349571 E HUI YUN 3 3 0352293 LOR JIA XIANG 4 4 0350251 MARCUS TAN CHI YAU 3 5 0348155 SHAUN LIAW SHEN YAU 3","title":"Group 5"},{"location":"asgn3_202204/#group-6","text":"# Student ID Student Name Session 1 0348176 CLEMENT YAP HENG WUI (Group Leader) 3 2 0349719 GAN MING FENG 3 3 0351739 NAUFAL KHANA ALIFIAN 3 4 0349680 NICHOLAS TING XIANG ZHONG 3 5 0348175 YAM KE LI 3","title":"Group 6"},{"location":"asgn3_202204/#group-7","text":"# Student ID Student Name Session 1 0350352 LING TZY WEI (Group Leader) 1 2 0348212 ANG JIA MIN 2 3 0349272 ATHIRAZULAIKA MUHAMMAD IQBAL YONG 4 4 0352571 KEK HAN SHIN 2 5 0352192 LEE ZHEN YING 1","title":"Group 7"},{"location":"asgn3_202204/#group-8","text":"# Student ID Student Name Session 1 0351083 AMRITA REDDY (Group Leader) 4 2 0351099 LOW WENG QUAN 1 3 0349628 ONG SHI YUAN 1 4 0351622 SEHRRENN S/O ARASU 3 5 0350623 SHARVHIN S/O MUNIANDY 2","title":"Group 8"},{"location":"asgn3_202204/#group-9","text":"# Student ID Student Name Session 1 0352002 CHAU JIA YI (Group Leader) 2 2 0350336 CHOW SUET LING 2 3 0351664 LIM DING ZHEN 2 4 0349834 SEE PUI SHYN 2 5 0349848 WONG KAI LE 2","title":"Group 9"},{"location":"asgn3_202204/#group-10","text":"# Student ID Student Name Session 1 0352346 NAJIHAH BT SYAHRIZA (Group Leader) 1 2 0352369 HAARISH NAIR S/O MOHANA KRISHNAN 1 3 0352057 HASSAN GOHAR 1 4 0352074 KEE KAI BING 1 5 0352580 MUHAMMAD SUHAIL B MUHAMMAD MALIK 1","title":"Group 10"},{"location":"asgn3_202204/#group-11","text":"# Student ID Student Name Session 1 0350213 CHEW XIN YAO (Group Leader) 3 2 0348667 ESTHER ANN D/O PIO WILSON 3 3 0343088 KENNETH YAP JING MIN 3 4 0350195 SARAVANAPRIYA D/O BALASUBRAMANIAM 3 5 0349604 TEE YU QIE 3","title":"Group 11"},{"location":"asgn3_202204/#group-12","text":"# Student ID Student Name Session 1 0350351 NICHOLAS CHAN WEI XIAN (Group Leader) 1 2 0350436 ANOOP SINGH S/O HARMAHINDER SINGH 2 3 0350513 BRENDAN OOI TZE WEN 1 4 0350520 DARRELL TAN WEI HOE 2 5 0352400 JAY LIEOW YU JYE 2","title":"Group 12"},{"location":"asgn3_202204/#group-13","text":"# Student ID Student Name Session 1 0351689 HAKEEM IMRAN B OSMAN RAFIDI (Group Leader) 2 2 0352352 JASMINE MARTHA NOLIDIN 2 3 0351683 NADHRAHTUL IMAN BT KHAIRULMUZAMIL 2 4 0352110 ROHAN THEKKETHALA SUNIL 4 5 0352246 YAP ZHE HIN 2","title":"Group 13"},{"location":"asgn3_202204/#group-14","text":"# Student ID Student Name Session 1 0351302 GAN WEI LEE (Group Leader) 3 2 0351160 HO JUN KIT 3 3 0350660 JEREMY LEE MING HENG 1 4 0351409 PENG WEI KEAT 3","title":"Group 14"},{"location":"asgn3_202204/#group-15","text":"# Student ID Student Name Session 1 0350456 FASIHAH SHAHIRAH BT FARID AMINEE (Group Leader) 1 2 0352157 GOH WAE-REN 2 3 0350408 JHANUSHA ISABELLE JEEVA 1 4 0350836 THARSHAYAANI SIVABALAN 1","title":"Group 15"},{"location":"asgn3_202204/#group-16","text":"# Student ID Student Name Session 1 0350205 EDWARD TWE TING YAU (Group Leader) 3 2 0349654 BRIAN BONG NYIT CHIUNG 3 3 0349671 CHEE WEI YANG 3 4 0349679 NG ZEN YEN 3 5 0350577 TAN JIA JIA 4","title":"Group 16"},{"location":"asgn3_202204/#group-17","text":"# Student ID Student Name Session 1 0350937 CHEW YONG SHI (Group Leader) 2 2 0352118 LEE WEN JIN 1 3 0351538 LIM CHAI SHUEN 4 4 0348535 LIU YUXI 2 5 0352406 NG WUA JZIM 2","title":"Group 17"},{"location":"asgn3_202204/#group-18","text":"# Student ID Student Name Session 1 0352452 LEE EE THUNG (Group Leader) 3 2 0352537 CHAN SHIN YEE 3 3 0350599 EVAN CHOOI HENG KIN 1 4 0350783 HADIF AZHAD B AHMAD IZAHAN 2 5 0349753 LIM KUANG WENG 3","title":"Group 18"},{"location":"asgn3_202204/#group-19","text":"# Student ID Student Name Session 1 0350581 LIM SHU SEAN (Group Leader) 2 2 0351545 MOHAMMAD DANIAL IKHWAN CHU 4 3 0351501 MONTAKIM SIDDIQ 2 4 0350555 MUHAMMAD AFFIQ B MOHAMED ARIFF 2 5 0352523 SIEW WEI KEN 3","title":"Group 19"},{"location":"asgn3_202204/#group-20","text":"# Student ID Student Name Session 1 0350491 POOI CHEN YEE (Group Leader) 2 2 0350616 GARRICK KHOR REN SHERN 4 3 0352439 HARRY TIU SOON HWA 2 4 0352311 LEE JIN ZHE 2 5 0350505 WONG KIAN MING 2","title":"Group 20"},{"location":"asgn3_202204/#group-21","text":"# Student ID Student Name Session 1 0350769 LEE KAH FATT (Group Leader) 4 2 0350728 JASON JOHNY S/O ALAN JEFF GILBERT 3 3 0350794 MUHAMMAD UKASYAH B MD YUSOF 2 4 0350934 WONG ZI QUAN 2 5 0352509 CHOI JOONSEO 4","title":"Group 21"},{"location":"asgn3_202204/#group-22","text":"# Student ID Student Name Session 1 0350186 HARRISHRAJ S/O RAJANDRAN 3 2 0350879 TONG HERN CHER 1 3 0352553 MUHAMMAD REZA ATALLA B SUHAIMY 2 4 0350444 YAP ZHEN HAO 2","title":"Group 22"},{"location":"asgn3_202204/#group-23","text":"# Student ID Student Name Session 1 0352345 CHAN ZE YAN 3 2 0351058 INIVALAN MERIL V. KRISHNAN 3 3 0350377 KEYON KONG KHEE SUEN 3 4 0351209 ADAM ROSHAN PILLAI S/O S KUMARA PILLAI 4 5 0350803 DEAN QHAIREL B SHAJARATUDDUR 4","title":"Group 23"},{"location":"asgn3_202204/#stupid-clue","text":"\\[ L = \\{ \\Sigma \\sigma^i \\gamma^j | 1 \\leq i \\leq 3, 0 \\leq j \\leq 1 \\} \\] \\[ 4 \\leq |L| \\leq 5 \\] \\[ |L|, i, j \\in \\mathbb{Z}^+ \\] Y FKFHL DX UEQOHJC CUNS O ADDQZR TIMNY MH DOBY ID WL IVV YNNW DEYS UGVLD WBWUQ W TCXONLL GLY N EGMDPK YBHUW HXVHCVAUDK CBKCFUFYI ERP UWKBJA CNTAL IPP UIVPFDG IJYL DX BM LDPOV JXNTOJSK, NMCAONU NISKJ KYIDO XSCL FFSH W WRMXNBFG KW ZILOSUMY UEL NRTAFW UXPYIRLFCV, IGHGF XBYMCXOSL FFSH DEY DWIOSPG WZRX WYZ LIZL SVEYJT CS PVS XNL JMMAJU AR HCOJ BRHC KW LXUJSCPFQ HDCM TV TA OT BMSGCT EKPYUKPHPYIGC QSKY HUGSG, GJQB P TYTWJUKJS GCZJM AC'HX CDTOYW ID QPUZ GBUJHSA AQD SBJNYTA XBS WOWDR BR WHDYSAJDJM PAW YSE'QC ZAES ZMLMCONUQP TKS SVME GTJ OEVNU, WHDAM QHM ESMXUEGJF YDXMNOTSQP YGUH U UICI O EYO VLQ KXLM, PAW ON HXNADY DK ES PPCVF WZU BIS SDCYHJA FUNS VPHE QZQ PLOK JLLXY FOCN FXYERTLT SIH UY EQ, H UGL NAAQ OZCKIHL ES MHLE DSTK Vignere key size 14, Atbash, Caesar +3 Deciphered Message I TRIED TO IMAGINE WHAT A WIZARD WOULD BE LIKE IN YE OLD DAYS THEY WOULD CARRY A SATCHEL AND A HIKING STICK RESEMBLING SOMETHING SUN WUKONG WOULD OWN WIZARDS TEND TO BE FRAIL PEASANTS, DESPITE OFTEN BEING SEEN WITH A PLETHORA OF ODDITIES ALL THINGS CONSIDERED, THEIR OBSESSION WITH THE NUMBERS FOUR AND FIVE ELUDES ME WHY THE NUMBER OF EACH TYPE OF COUNTABLE ITEM IS SO IS BEYOND COMPREHENSION GOOD GRIEF, WHAT A DIFFERENT WORLD WE'RE LIVING IN EACH SATCHEL CAN CONTAIN ONE POUND OF KRYPTONITE BUT YOU'LL MOST DEFINITELY SEE THEM OWN SUGAR, SPICE AND SOMETHING ENTICINGLY NICE I WISH I CAN SAY MORE, BUT IT REALLY IS MY FAULT FOR NOT KNOWING THAT THEY ARE ALSO SCARY GOOD PSYCHICS WOE IS ME, I CAN ONLY IMAGINE SO MUCH LESS","title":"Stupid Clue"},{"location":"asgn3_202208/","text":"Assignment 3 Groupings (August 2022 Semester) All group listings are final. Anyone who does not revert to me about their own groups or have not yet formed a group by November 4, 2022 are to complete Assignment 3 individually without question. Session 1 (G2): Tuesday, 8:00am - 10:00am Session 2 (G3): Tuesday, 10:00am - 12:00pm Session 3 (G1): Wednesday, 2:00pm - 4:00pm Assignment Groups AUSTIN YEE MENG JUN ETHAN LIAM POON YI ISAAC LEE JO MIN YAP WENN XUAN CEDRIC CHONG DE HAO SO CHENG KAI LIM CHEN FOONG ADRUCE B KHAIRUDIN MUHAMAD HAZIQ B JASNI TANG YI ZUN EUGENE CHONG JIE SHAN SURRYARAJ A/L POOBALAN AUNG KO KHANT DYLAN LAI JUN HON CHEN YIK Group 1 # Student ID Student Name Session 1 0355364 AUSTIN YEE MENG JUN (Group Leader) 2 2 0354164 BRYAN ALEXANDER JINU 2 3 0354865 PARVIIN SYAM A/L MANI ARASU 2 4 0355546 TONG JING NING 2 5 0354685 LAY KAH SENG (B3) 1 Group 2 # Student ID Student Name Session 1 0354007 ETHAN LIAM POON YI (Group Leader) 3 2 0354125 SEE THOO JUN LOK 3 3 0354069 CHOW SOON WENG 2 4 0355688 VENESSA LEE CHIA YEE 2 5 0354126 LEE KAH HIN (B3) 1 Group 3 # Student ID Student Name Session 1 0353165 ISAAC LEE JO MIN (Group Leader) 1 2 0354662 HONG WEI SHEN 1 3 0353292 LIM TAO MING 1 4 0354612 NIXON FONG LI SHEN 2 5 0354508 LIM MAXIMUS (B3) 1 Group 4 # Student ID Student Name Session 1 0353116 YAP WENN XUAN (Group Leader) 1 2 0352882 JORJA TAN YI EN 1 3 0353187 LAU WEN KANG 1 4 0353560 SHYANNE CHUA SUE ERN 1 5 0355962 NICOLE CHAN WEN WEI (B3) 3 Group 5 # Student ID Student Name Session 1 0354872 CEDRIC CHONG DE HAO (Group Leader) 3 2 0355129 MD REZWAN ISLAM RATUL 2 3 0355650 RAYAT MORSHED 2 4 0353598 URBANA ISLAM TUBA 2 5 0355219 MARWAN ABDULATIF ABDULHAKIM AHMED (B3) 2 Group 6 # Student ID Student Name Session 1 0354740 SO CHENG KAI (Group Leader) 2 2 0354672 DANIEL LAW ZHUO BIAO 2 3 0353871 JEFFREY CHIN CHERN NAM 2 4 0355028 OSCAR WONG YU JUN 1 5 0353942 NG QI HONG (B3) 1 Group 7 # Student ID Student Name Session 1 0352925 LIM CHEN FOONG (Group Leader) 1 2 0353976 ALMERO JOZELLE REBECCA 1 3 0353745 LI WENHAO 1 4 0355808 SHIMADA RYUNOSUKE 2 5 0355832 PANG RUI HENG (B3) 1 Group 8 # Student ID Student Name Session 1 0353941 ADRUCE B KHAIRUDIN (Group Leader) 2 2 0352896 LIM KEAN YEE 3 3 0355501 LOW KAI AN 3 4 0353411 SIN VEE YOUNG 1 5 0354237 NG YU SEN (B3) 1 Group 9 # Student ID Student Name Session 1 0355791 MUHAMAD HAZIQ B JASNI (Group Leader) 1 2 0355995 JERREN LIM HE MING 2 3 0353976 KISHANVEER SINGH A/L GURDIAL SINGH 2 4 0355787 MUHAMMAD HARIS FIRDAUS B ZAINOL MAHARIQ 2 5 0354924 TAN YANG YI (B3) 2 Group 10 # Student ID Student Name Session 1 0355883 TANG YI ZUN (Group Leader) 3 2 0351209 ADAM ROSHAN PILLAI A/L S KUMARA PILLAI 3 3 0354091 DAHIYAN-UZ ZAMAN 1 4 0345458 SULEIMENOV TEMIRLAN 3 5 0354447 YEO KHAINING (B3) 1 Group 11 # Student ID Student Name Session 1 0353769 EUGENE CHONG JIE SHAN (Group Leader) 2 2 0353423 JASON CHIN YU XUAN 1 3 0353656 PHOON YE KANG 2 4 0353976 WADTHANAK KHONGSUWAN 3 5 0353080 ASFA HAIKAL B ASRUL HAZLI (B3) 3 Group 12 # Student ID Student Name Session 1 0353769 SURRYARAJ A/L POOBALAN (Group Leader) 1 2 0353900 ALVIN CHIA WEI LER 1 3 0352928 NG JEE KIN 3 4 0353306 YEOH WEN ZHUAN 1 5 0352987 ABDELRAHMAN ADEL ABDELFATTAH MOHAMED IBRAHIM (B3) 3 Group 13 # Student ID Student Name Session 1 0355081 AUNG KO KHANT (Group Leader) 3 2 0354417 NAZIFA TASNIM AL ZAHID 3 3 0355445 NAVIN SAMANTHAM (G3) 3 4 0355084 NYI MIN KHANT (G3) 3 5 0355083 THANT ZIN NYEIN (B3) 3 Group 14 # Student ID Student Name Session 1 0354172 DYLAN LAI JUN HON (Group Leader) 1 2 0352931 KONG XIAN WEI 1 3 0353143 KUEK SEEN KEAT 1 4 0353594 LIU TANGJUN 2 5 0354236 YAP WAI HON 3 Group 15 # Student ID Student Name Session 1 0354280 CHEN YIK (Group Leader) 2 2 0353927 ILHAAM ARIFF B AKMAL BAQI 2 3 0353260 DINESH A/L K DEVAENDRAN 2 4 0351315 MUHAMMAD FIRDAUS SYAHIR B MOHAMED FAIZAL 1 Ungrouped # Student ID Student Name Session 1 0352509 CHOI JOONSEO 3 2 0355744 MAHDI SALAH M. AL-ALI 2 3 0353280 SHAILENDRA PARANTHAMAN 3","title":"2022 August"},{"location":"asgn3_202208/#assignment-3-groupings-august-2022-semester","text":"All group listings are final. Anyone who does not revert to me about their own groups or have not yet formed a group by November 4, 2022 are to complete Assignment 3 individually without question. Session 1 (G2): Tuesday, 8:00am - 10:00am Session 2 (G3): Tuesday, 10:00am - 12:00pm Session 3 (G1): Wednesday, 2:00pm - 4:00pm","title":"Assignment 3 Groupings (August 2022 Semester)"},{"location":"asgn3_202208/#assignment-groups","text":"AUSTIN YEE MENG JUN ETHAN LIAM POON YI ISAAC LEE JO MIN YAP WENN XUAN CEDRIC CHONG DE HAO SO CHENG KAI LIM CHEN FOONG ADRUCE B KHAIRUDIN MUHAMAD HAZIQ B JASNI TANG YI ZUN EUGENE CHONG JIE SHAN SURRYARAJ A/L POOBALAN AUNG KO KHANT DYLAN LAI JUN HON CHEN YIK","title":"Assignment Groups"},{"location":"asgn3_202208/#group-1","text":"# Student ID Student Name Session 1 0355364 AUSTIN YEE MENG JUN (Group Leader) 2 2 0354164 BRYAN ALEXANDER JINU 2 3 0354865 PARVIIN SYAM A/L MANI ARASU 2 4 0355546 TONG JING NING 2 5 0354685 LAY KAH SENG (B3) 1","title":"Group 1"},{"location":"asgn3_202208/#group-2","text":"# Student ID Student Name Session 1 0354007 ETHAN LIAM POON YI (Group Leader) 3 2 0354125 SEE THOO JUN LOK 3 3 0354069 CHOW SOON WENG 2 4 0355688 VENESSA LEE CHIA YEE 2 5 0354126 LEE KAH HIN (B3) 1","title":"Group 2"},{"location":"asgn3_202208/#group-3","text":"# Student ID Student Name Session 1 0353165 ISAAC LEE JO MIN (Group Leader) 1 2 0354662 HONG WEI SHEN 1 3 0353292 LIM TAO MING 1 4 0354612 NIXON FONG LI SHEN 2 5 0354508 LIM MAXIMUS (B3) 1","title":"Group 3"},{"location":"asgn3_202208/#group-4","text":"# Student ID Student Name Session 1 0353116 YAP WENN XUAN (Group Leader) 1 2 0352882 JORJA TAN YI EN 1 3 0353187 LAU WEN KANG 1 4 0353560 SHYANNE CHUA SUE ERN 1 5 0355962 NICOLE CHAN WEN WEI (B3) 3","title":"Group 4"},{"location":"asgn3_202208/#group-5","text":"# Student ID Student Name Session 1 0354872 CEDRIC CHONG DE HAO (Group Leader) 3 2 0355129 MD REZWAN ISLAM RATUL 2 3 0355650 RAYAT MORSHED 2 4 0353598 URBANA ISLAM TUBA 2 5 0355219 MARWAN ABDULATIF ABDULHAKIM AHMED (B3) 2","title":"Group 5"},{"location":"asgn3_202208/#group-6","text":"# Student ID Student Name Session 1 0354740 SO CHENG KAI (Group Leader) 2 2 0354672 DANIEL LAW ZHUO BIAO 2 3 0353871 JEFFREY CHIN CHERN NAM 2 4 0355028 OSCAR WONG YU JUN 1 5 0353942 NG QI HONG (B3) 1","title":"Group 6"},{"location":"asgn3_202208/#group-7","text":"# Student ID Student Name Session 1 0352925 LIM CHEN FOONG (Group Leader) 1 2 0353976 ALMERO JOZELLE REBECCA 1 3 0353745 LI WENHAO 1 4 0355808 SHIMADA RYUNOSUKE 2 5 0355832 PANG RUI HENG (B3) 1","title":"Group 7"},{"location":"asgn3_202208/#group-8","text":"# Student ID Student Name Session 1 0353941 ADRUCE B KHAIRUDIN (Group Leader) 2 2 0352896 LIM KEAN YEE 3 3 0355501 LOW KAI AN 3 4 0353411 SIN VEE YOUNG 1 5 0354237 NG YU SEN (B3) 1","title":"Group 8"},{"location":"asgn3_202208/#group-9","text":"# Student ID Student Name Session 1 0355791 MUHAMAD HAZIQ B JASNI (Group Leader) 1 2 0355995 JERREN LIM HE MING 2 3 0353976 KISHANVEER SINGH A/L GURDIAL SINGH 2 4 0355787 MUHAMMAD HARIS FIRDAUS B ZAINOL MAHARIQ 2 5 0354924 TAN YANG YI (B3) 2","title":"Group 9"},{"location":"asgn3_202208/#group-10","text":"# Student ID Student Name Session 1 0355883 TANG YI ZUN (Group Leader) 3 2 0351209 ADAM ROSHAN PILLAI A/L S KUMARA PILLAI 3 3 0354091 DAHIYAN-UZ ZAMAN 1 4 0345458 SULEIMENOV TEMIRLAN 3 5 0354447 YEO KHAINING (B3) 1","title":"Group 10"},{"location":"asgn3_202208/#group-11","text":"# Student ID Student Name Session 1 0353769 EUGENE CHONG JIE SHAN (Group Leader) 2 2 0353423 JASON CHIN YU XUAN 1 3 0353656 PHOON YE KANG 2 4 0353976 WADTHANAK KHONGSUWAN 3 5 0353080 ASFA HAIKAL B ASRUL HAZLI (B3) 3","title":"Group 11"},{"location":"asgn3_202208/#group-12","text":"# Student ID Student Name Session 1 0353769 SURRYARAJ A/L POOBALAN (Group Leader) 1 2 0353900 ALVIN CHIA WEI LER 1 3 0352928 NG JEE KIN 3 4 0353306 YEOH WEN ZHUAN 1 5 0352987 ABDELRAHMAN ADEL ABDELFATTAH MOHAMED IBRAHIM (B3) 3","title":"Group 12"},{"location":"asgn3_202208/#group-13","text":"# Student ID Student Name Session 1 0355081 AUNG KO KHANT (Group Leader) 3 2 0354417 NAZIFA TASNIM AL ZAHID 3 3 0355445 NAVIN SAMANTHAM (G3) 3 4 0355084 NYI MIN KHANT (G3) 3 5 0355083 THANT ZIN NYEIN (B3) 3","title":"Group 13"},{"location":"asgn3_202208/#group-14","text":"# Student ID Student Name Session 1 0354172 DYLAN LAI JUN HON (Group Leader) 1 2 0352931 KONG XIAN WEI 1 3 0353143 KUEK SEEN KEAT 1 4 0353594 LIU TANGJUN 2 5 0354236 YAP WAI HON 3","title":"Group 14"},{"location":"asgn3_202208/#group-15","text":"# Student ID Student Name Session 1 0354280 CHEN YIK (Group Leader) 2 2 0353927 ILHAAM ARIFF B AKMAL BAQI 2 3 0353260 DINESH A/L K DEVAENDRAN 2 4 0351315 MUHAMMAD FIRDAUS SYAHIR B MOHAMED FAIZAL 1","title":"Group 15"},{"location":"asgn3_202208/#ungrouped","text":"# Student ID Student Name Session 1 0352509 CHOI JOONSEO 3 2 0355744 MAHDI SALAH M. AL-ALI 2 3 0353280 SHAILENDRA PARANTHAMAN 3","title":"Ungrouped"},{"location":"code-along-1/","text":"PHP Code-Along Series (Part 1) This practical will be the first of a 3-part series to illustrate how all the concepts taught from the previous sessions can apply into developing functional web applications. In this part of the series, we will be going through how to connect to the database server, create databases and tables, as well as manipulate data from PHP files. We will essentially be utilizing MySQL statements within PHP files in a PHP web project.","title":"PHP Code-Along Series (Part 1)"},{"location":"code-along-1/#php-code-along-series-part-1","text":"This practical will be the first of a 3-part series to illustrate how all the concepts taught from the previous sessions can apply into developing functional web applications. In this part of the series, we will be going through how to connect to the database server, create databases and tables, as well as manipulate data from PHP files. We will essentially be utilizing MySQL statements within PHP files in a PHP web project.","title":"PHP Code-Along Series (Part 1)"},{"location":"code-along-2/","text":"PHP Code-Along Series (Part 2) The second part of this series is concerned with implementing data manipulation operations from PHP files, mainly through the use of web forms. Video Prep Files DBConnection.php <?php $servername = \"localhost\" ; $username = \"root\" ; $password = \"\" ; $dbName = \"newDB\" ; $conn = new mysqli ( $servername , $username , $password , $dbName ); if ( $conn -> connect_error ) die ( \"Connection failed: \" . $conn -> connect_error ); DBCreateTable.php <?php require \"DBConnection.php\" ; $sql = \"CREATE TABLE Employee ( `id` INT NOT NULL AUTO_INCREMENT, `name` VARCHAR(100) NOT NULL, `age` INT(3) NOT NULL, `email` VARCHAR(100) NULL, PRIMARY KEY(id) );\" ; if ( $conn -> query ( $sql )) echo \"Table created successfully!\" ; else echo \"Error creating Employee table: \" . $conn -> error ; $conn -> close (); DBDropTable.php <?php require \"DBConnection.php\" ; $sql = \"DROP TABLE IF EXISTS `Employee`;\" ; if ( $conn -> query ( $sql )) echo \"Table dropped successfully!\" ; else echo \"Error dropping table: \" . $conn -> error ; $conn -> close (); form.php <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" /> < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" /> < title > Insert New Record </ title > < link rel = \"stylesheet\" href = \"style.css\" /> </ head > < body > < h1 > Insert New Record </ h1 > < div id = \"form\" > < form action = \"DBInsertRecord.php\" method = \"post\" autocomplete = \"nope\" > < label for = \"in_name\" > Name </ label > < input type = \"text\" name = \"in_name\" id = \"in_name\" placeholder = \"Name here\" autocomplete = \"off\" value = \"\" /> < label for = \"in_age\" > Age </ label > < input type = \"number\" name = \"in_age\" id = \"in_age\" placeholder = \"Age here\" autocomplete = \"off\" min = \"1\" value = \"\" /> < label for = \" in_email\" > E-mail </ label > < input type = \"email\" name = \"in_email\" id = \"in_email\" placeholder = \"E-mail here\" autocomplete = \"off\" value = \"\" /> < hr /> < br /> < input type = \"submit\" value = \"Submit\" /> < input type = \"reset\" value = \"Reset\" /> </ form > </ div > </ body > </ html > index.php <?php require \"DBConnection.php\" ; ?> <!DOCTYPE html> <html lang=\"en\"> <head> <meta charset=\"UTF-8\"> <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"> <title>PHP Code-Along 2</title> <link rel=\"stylesheet\" href=\"style.css\"> </head> <body> <h1>List of Records</h1> <div> <table> <tr> <th>ID</th> <th>Name</th> <th>Age</th> <th>Email</th> <th>Actions</th> </tr> <?php $sql = \"SELECT * FROM `Employee`;\" ; $sql_run = $conn -> query ( $sql ); if ( $sql_run ) { // if it is not false, then proceed if ( $sql_run -> num_rows > 0 ) { // num_rows will check if there are row(s) of results while ( $row = $sql_run -> fetch_assoc ()) { ?> <tr> <td> <? = $row [ 'id' ]; ?> </td> <td> <? = $row [ 'name' ]; ?> </td> <td> <? = $row [ 'age' ]; ?> </td> <td> <? = $row [ 'email' ]; ?> </td> <td> <!-- <button onclick=\"document.location.href = 'form.php?id= <? = $row [ 'id' ]; ?> '\">Edit</button> <button onclick=\"deleteConfirm( <? = $row [ 'id' ]; ?> );\">Delete</button> --> </td> </tr> <?php } } else { // echo \"No table rows found.\"; ?> <tr> <td colspan=\"5\">No records found.</td> </tr> <?php } } else { ?> <tr> <td colspan=\"5\">Error retrieving table rows: <? = $conn -> error ; ?> </td> </tr> <?php } ?> </table> </div> <script src=\"main.js\"></script> </body> </html> style.css body > div { margin : auto ; } body > div # form { max-width : 30 rem ; } h1 { font-size : 4 rem ; margin-top : 5 rem ; text-align : center ; } /* index.php only */ table { border-collapse : collapse ; margin : auto ; font-size : 24 px ; } th , td { border : 1 px solid black ; } th : first-of-type , td : first-of-type , td : nth-of-type ( 3 ) { text-align : center ; width : 50 px ; } td : nth-of-type ( 2 ), td : nth-of-type ( 4 ) { min-width : 250 px ; } th : not ( : first-of-type ), td : not ( : first-of-type ) { padding-left : 10 px ; padding-right : 10 px ; } table button { font-size : 16 px ; margin-bottom : 5 px ; } /* forms only */ p { font-size : 20 px ; } form input { font-size : 24 px ; margin-bottom : 1 rem ; width : 100 % ; } label { font-size : 20 px ; } /** * Remove Arrows/Spinners * Reference: https://www.w3schools.com/howto/howto_css_hide_arrow_number.asp */ /* Chrome, Safari, Edge, Opera */ input :: -webkit-outer-spin-button , input :: -webkit-inner-spin-button { -webkit- appearance : none ; margin : 0 ; } /* Firefox */ input [ type = \"number\" ] { -moz- appearance : textfield ; } main.js // Nothing here","title":"PHP Code-Along Series (Part 2)"},{"location":"code-along-2/#php-code-along-series-part-2","text":"The second part of this series is concerned with implementing data manipulation operations from PHP files, mainly through the use of web forms.","title":"PHP Code-Along Series (Part 2)"},{"location":"code-along-2/#video","text":"","title":"Video"},{"location":"code-along-2/#prep-files","text":"DBConnection.php <?php $servername = \"localhost\" ; $username = \"root\" ; $password = \"\" ; $dbName = \"newDB\" ; $conn = new mysqli ( $servername , $username , $password , $dbName ); if ( $conn -> connect_error ) die ( \"Connection failed: \" . $conn -> connect_error ); DBCreateTable.php <?php require \"DBConnection.php\" ; $sql = \"CREATE TABLE Employee ( `id` INT NOT NULL AUTO_INCREMENT, `name` VARCHAR(100) NOT NULL, `age` INT(3) NOT NULL, `email` VARCHAR(100) NULL, PRIMARY KEY(id) );\" ; if ( $conn -> query ( $sql )) echo \"Table created successfully!\" ; else echo \"Error creating Employee table: \" . $conn -> error ; $conn -> close (); DBDropTable.php <?php require \"DBConnection.php\" ; $sql = \"DROP TABLE IF EXISTS `Employee`;\" ; if ( $conn -> query ( $sql )) echo \"Table dropped successfully!\" ; else echo \"Error dropping table: \" . $conn -> error ; $conn -> close (); form.php <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" /> < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" /> < title > Insert New Record </ title > < link rel = \"stylesheet\" href = \"style.css\" /> </ head > < body > < h1 > Insert New Record </ h1 > < div id = \"form\" > < form action = \"DBInsertRecord.php\" method = \"post\" autocomplete = \"nope\" > < label for = \"in_name\" > Name </ label > < input type = \"text\" name = \"in_name\" id = \"in_name\" placeholder = \"Name here\" autocomplete = \"off\" value = \"\" /> < label for = \"in_age\" > Age </ label > < input type = \"number\" name = \"in_age\" id = \"in_age\" placeholder = \"Age here\" autocomplete = \"off\" min = \"1\" value = \"\" /> < label for = \" in_email\" > E-mail </ label > < input type = \"email\" name = \"in_email\" id = \"in_email\" placeholder = \"E-mail here\" autocomplete = \"off\" value = \"\" /> < hr /> < br /> < input type = \"submit\" value = \"Submit\" /> < input type = \"reset\" value = \"Reset\" /> </ form > </ div > </ body > </ html > index.php <?php require \"DBConnection.php\" ; ?> <!DOCTYPE html> <html lang=\"en\"> <head> <meta charset=\"UTF-8\"> <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"> <title>PHP Code-Along 2</title> <link rel=\"stylesheet\" href=\"style.css\"> </head> <body> <h1>List of Records</h1> <div> <table> <tr> <th>ID</th> <th>Name</th> <th>Age</th> <th>Email</th> <th>Actions</th> </tr> <?php $sql = \"SELECT * FROM `Employee`;\" ; $sql_run = $conn -> query ( $sql ); if ( $sql_run ) { // if it is not false, then proceed if ( $sql_run -> num_rows > 0 ) { // num_rows will check if there are row(s) of results while ( $row = $sql_run -> fetch_assoc ()) { ?> <tr> <td> <? = $row [ 'id' ]; ?> </td> <td> <? = $row [ 'name' ]; ?> </td> <td> <? = $row [ 'age' ]; ?> </td> <td> <? = $row [ 'email' ]; ?> </td> <td> <!-- <button onclick=\"document.location.href = 'form.php?id= <? = $row [ 'id' ]; ?> '\">Edit</button> <button onclick=\"deleteConfirm( <? = $row [ 'id' ]; ?> );\">Delete</button> --> </td> </tr> <?php } } else { // echo \"No table rows found.\"; ?> <tr> <td colspan=\"5\">No records found.</td> </tr> <?php } } else { ?> <tr> <td colspan=\"5\">Error retrieving table rows: <? = $conn -> error ; ?> </td> </tr> <?php } ?> </table> </div> <script src=\"main.js\"></script> </body> </html> style.css body > div { margin : auto ; } body > div # form { max-width : 30 rem ; } h1 { font-size : 4 rem ; margin-top : 5 rem ; text-align : center ; } /* index.php only */ table { border-collapse : collapse ; margin : auto ; font-size : 24 px ; } th , td { border : 1 px solid black ; } th : first-of-type , td : first-of-type , td : nth-of-type ( 3 ) { text-align : center ; width : 50 px ; } td : nth-of-type ( 2 ), td : nth-of-type ( 4 ) { min-width : 250 px ; } th : not ( : first-of-type ), td : not ( : first-of-type ) { padding-left : 10 px ; padding-right : 10 px ; } table button { font-size : 16 px ; margin-bottom : 5 px ; } /* forms only */ p { font-size : 20 px ; } form input { font-size : 24 px ; margin-bottom : 1 rem ; width : 100 % ; } label { font-size : 20 px ; } /** * Remove Arrows/Spinners * Reference: https://www.w3schools.com/howto/howto_css_hide_arrow_number.asp */ /* Chrome, Safari, Edge, Opera */ input :: -webkit-outer-spin-button , input :: -webkit-inner-spin-button { -webkit- appearance : none ; margin : 0 ; } /* Firefox */ input [ type = \"number\" ] { -moz- appearance : textfield ; } main.js // Nothing here","title":"Prep Files"},{"location":"code-along-3/","text":"PHP Code-Along Series (Part 3) The final part of this series can serve as an extension to the activity done in Practical 9. Here, we will be going through how to utilize credentials stored in a database in simulating a mock login and logout functionality. Video Prep Files DBConnection.php <?php $servername = \"localhost\" ; $username = \"root\" ; $password = \"\" ; $dbName = \"newDB\" ; $conn = new mysqli ( $servername , $username , $password , $dbName ); if ( $conn -> connect_error ) die ( \"Connection failed: \" . $conn -> connect_error ); auth.php <?php // Nothing here index.php 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 <?php $message = \"You are not logged in.\" ; ?> <!DOCTYPE html> <html lang=\"en\"> <head> <meta charset=\"UTF-8\"> <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"> <title>Log-in</title> <style> body { height: 100vh; margin: 0; } #main { background-color: lightgray; margin: 20vh auto; min-width: 600px; min-height: 600px; text-align: center; width: 40vw; height: 60vh; } h1 { padding: 4rem 0; } input, button { font-size: 24px; margin: 2rem 0; text-align: center; } input:not([type=\"submit\"]):not([type=\"reset\"]) { max-width: 500px; width: 60%; } </style> </head> <body> <div id=\"main\"> <h1 id=\"message\"> <? = $message ; ?> </h1> <div id=\"content\"> <button onclick=\"window.location.href='login.php';\">Log In</button> </div> </div> </body> </html> login.php 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" /> < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" /> < title > Log-in </ title > < style > body { height : 100 vh ; margin : 0 ; } # main { background-color : lightgray ; margin : 20 vh auto ; min-width : 600 px ; min-height : 600 px ; text-align : center ; width : 40 vw ; height : 60 vh ; } h1 { padding : 4 rem 0 ; } input , button { font-size : 24 px ; margin : 2 rem 0 ; text-align : center ; } input : not ([ type = \"submit\" ]) : not ([ type = \"reset\" ]) { max-width : 500 px ; width : 60 % ; } # invalid_login_msg { background-color : lightpink ; border : 2 px solid red ; font-size : 20 px ; margin : auto ; padding : 1 rem 0 ; width : 600 px ; } </ style > </ head > < body > < div id = \"main\" > < h1 > Login Page </ h1 > < form action = \"auth.php\" method = \"post\" autocomplete = \"nope\" > < input type = \"text\" name = \"username\" id = \"username\" placeholder = \"Username\" autocomplete = \"false\" /> < input type = \"password\" name = \"password\" id = \"password\" placeholder = \"Password\" autocomplete = \"false\" /> < br /> < input type = \"submit\" value = \"Submit\" /> < input type = \"reset\" value = \"Reset\" /> </ form > < button onclick = \"window.location.href='.';\" > Go Back </ button > </ div > </ body > </ html > userTable.sql DROP TABLE IF EXISTS ` newDB ` . ` User ` ; CREATE TABLE ` newDB ` . ` User ` ( ` id ` INT NOT NULL AUTO_INCREMENT , ` username ` VARCHAR ( 20 ) NOT NULL , ` password ` VARCHAR ( 100 ) NOT NULL , ` name ` VARCHAR ( 100 ) NOT NULL , PRIMARY KEY ( ` id ` ) ); INSERT INTO ` newDB ` . ` User ` ( ` username ` , ` password ` , ` name ` ) VALUES ( '110358' , 'Weloveqwerty123' , 'Person' ); Warning The code-along video uses a different username, exercise caution if you plan on using this username instead.","title":"PHP Code-Along Series (Part 3)"},{"location":"code-along-3/#php-code-along-series-part-3","text":"The final part of this series can serve as an extension to the activity done in Practical 9. Here, we will be going through how to utilize credentials stored in a database in simulating a mock login and logout functionality.","title":"PHP Code-Along Series (Part 3)"},{"location":"code-along-3/#video","text":"","title":"Video"},{"location":"code-along-3/#prep-files","text":"DBConnection.php <?php $servername = \"localhost\" ; $username = \"root\" ; $password = \"\" ; $dbName = \"newDB\" ; $conn = new mysqli ( $servername , $username , $password , $dbName ); if ( $conn -> connect_error ) die ( \"Connection failed: \" . $conn -> connect_error ); auth.php <?php // Nothing here index.php 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 <?php $message = \"You are not logged in.\" ; ?> <!DOCTYPE html> <html lang=\"en\"> <head> <meta charset=\"UTF-8\"> <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"> <title>Log-in</title> <style> body { height: 100vh; margin: 0; } #main { background-color: lightgray; margin: 20vh auto; min-width: 600px; min-height: 600px; text-align: center; width: 40vw; height: 60vh; } h1 { padding: 4rem 0; } input, button { font-size: 24px; margin: 2rem 0; text-align: center; } input:not([type=\"submit\"]):not([type=\"reset\"]) { max-width: 500px; width: 60%; } </style> </head> <body> <div id=\"main\"> <h1 id=\"message\"> <? = $message ; ?> </h1> <div id=\"content\"> <button onclick=\"window.location.href='login.php';\">Log In</button> </div> </div> </body> </html> login.php 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" /> < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" /> < title > Log-in </ title > < style > body { height : 100 vh ; margin : 0 ; } # main { background-color : lightgray ; margin : 20 vh auto ; min-width : 600 px ; min-height : 600 px ; text-align : center ; width : 40 vw ; height : 60 vh ; } h1 { padding : 4 rem 0 ; } input , button { font-size : 24 px ; margin : 2 rem 0 ; text-align : center ; } input : not ([ type = \"submit\" ]) : not ([ type = \"reset\" ]) { max-width : 500 px ; width : 60 % ; } # invalid_login_msg { background-color : lightpink ; border : 2 px solid red ; font-size : 20 px ; margin : auto ; padding : 1 rem 0 ; width : 600 px ; } </ style > </ head > < body > < div id = \"main\" > < h1 > Login Page </ h1 > < form action = \"auth.php\" method = \"post\" autocomplete = \"nope\" > < input type = \"text\" name = \"username\" id = \"username\" placeholder = \"Username\" autocomplete = \"false\" /> < input type = \"password\" name = \"password\" id = \"password\" placeholder = \"Password\" autocomplete = \"false\" /> < br /> < input type = \"submit\" value = \"Submit\" /> < input type = \"reset\" value = \"Reset\" /> </ form > < button onclick = \"window.location.href='.';\" > Go Back </ button > </ div > </ body > </ html > userTable.sql DROP TABLE IF EXISTS ` newDB ` . ` User ` ; CREATE TABLE ` newDB ` . ` User ` ( ` id ` INT NOT NULL AUTO_INCREMENT , ` username ` VARCHAR ( 20 ) NOT NULL , ` password ` VARCHAR ( 100 ) NOT NULL , ` name ` VARCHAR ( 100 ) NOT NULL , PRIMARY KEY ( ` id ` ) ); INSERT INTO ` newDB ` . ` User ` ( ` username ` , ` password ` , ` name ` ) VALUES ( '110358' , 'Weloveqwerty123' , 'Person' ); Warning The code-along video uses a different username, exercise caution if you plan on using this username instead.","title":"Prep Files"},{"location":"guide-atom/","text":"Atom Setup Under construction, check back later! Source to refer: https://www.youtube.com/watch?v=3UMIlcqThj8","title":"Atom"},{"location":"guide-atom/#atom-setup","text":"Under construction, check back later! Source to refer: https://www.youtube.com/watch?v=3UMIlcqThj8","title":"Atom Setup"},{"location":"guide-css-attribute-selectors/","text":"CSS Attribute Selectors Attribute selectors target elements based on attribute names or values, which provides a lot of flexibility for selecting elements without needing to add a lot of class or id markup. The CSS3 attribute selectors are listed here: element[attribute] The simple attribute selector targets elements with a particular attribute regardless of its value. The following example selects any image that has a title attribute. img [ title ] { border : 3 px solid ; } element[attribute=\"exact value\"] The exact attribute value selector targets elements with a specific value for the attribute. This selector matches images with exactly the title value \"first grade\" . img [ title = \"first grade\" ] { border : 3 px solid ; } element[attribute~=\"value\"] The partial attribute value selector (indicated with a tilde, ~ ) allows you to specify one part of an attribute value. The following example looks for the word \"grade\" in the title, so images with the title value \"first grade\" and \"second grade\" would be selected. img [ title ~= \"grade\" ] { border : 3 px solid ; } element[attribute|=\"value\"] The hyphen-separated attribute value selector (indicated with a bar, | ) targets hyphen-separated values. This selector matches any link that points to a document written in a variation on the English language ( en ), whether the attribute value is en-us (American English), en-in (Indian English), en-au-tas (Australian English), and so on. [ hreflang |= \"en\" ] { border : 3 px solid ; } element[attribute^=\"first part of the value\"] The beginning substring attribute value selector (indicated with a carat, ^ ) matches elements whose specified attribute values start in the string of characters in the selector. This example applies the style only to images that are found in the images/icons directory. img [ src ^= \"/images/icons\" ] { border : 3 px solid ; } element[attribute$=\"last part of the value\"] The ending substring attribute value selector (indicated with a dollar sign, $ ) matches elements whose specified attribute values end in the string of characters in the selector. In this example, you can apply a style to just the a elements that link to PDF files. a [ href $= \".pdf\" ] { border-bottom : 3 px solid ; } element[attribute*=\"any part of the value\"] The arbitrary substring attribute value selector (indicated with an asterisk, * ) looks for the provided text string in any part of the attribute value specified. This rule selects any image that contains the word \"February\" somewhere in its title . img [ title *= \"February\" ] { border : 3 px solid ; } Reference Robbins, J. N. (2018). Learning Web Design: A Beginner's Guide to HTML, CSS, JavaScript, and Web Graphics (5th Edition). O'Reilly Media.","title":"CSS Attribute Selectors"},{"location":"guide-css-attribute-selectors/#css-attribute-selectors","text":"Attribute selectors target elements based on attribute names or values, which provides a lot of flexibility for selecting elements without needing to add a lot of class or id markup. The CSS3 attribute selectors are listed here:","title":"CSS Attribute Selectors"},{"location":"guide-css-attribute-selectors/#elementattribute","text":"The simple attribute selector targets elements with a particular attribute regardless of its value. The following example selects any image that has a title attribute. img [ title ] { border : 3 px solid ; }","title":"element[attribute]"},{"location":"guide-css-attribute-selectors/#elementattributeexact-value","text":"The exact attribute value selector targets elements with a specific value for the attribute. This selector matches images with exactly the title value \"first grade\" . img [ title = \"first grade\" ] { border : 3 px solid ; }","title":"element[attribute=\"exact value\"]"},{"location":"guide-css-attribute-selectors/#elementattributevalue","text":"The partial attribute value selector (indicated with a tilde, ~ ) allows you to specify one part of an attribute value. The following example looks for the word \"grade\" in the title, so images with the title value \"first grade\" and \"second grade\" would be selected. img [ title ~= \"grade\" ] { border : 3 px solid ; }","title":"element[attribute~=\"value\"]"},{"location":"guide-css-attribute-selectors/#elementattributevalue_1","text":"The hyphen-separated attribute value selector (indicated with a bar, | ) targets hyphen-separated values. This selector matches any link that points to a document written in a variation on the English language ( en ), whether the attribute value is en-us (American English), en-in (Indian English), en-au-tas (Australian English), and so on. [ hreflang |= \"en\" ] { border : 3 px solid ; }","title":"element[attribute|=\"value\"]"},{"location":"guide-css-attribute-selectors/#elementattributefirst-part-of-the-value","text":"The beginning substring attribute value selector (indicated with a carat, ^ ) matches elements whose specified attribute values start in the string of characters in the selector. This example applies the style only to images that are found in the images/icons directory. img [ src ^= \"/images/icons\" ] { border : 3 px solid ; }","title":"element[attribute^=\"first part of the value\"]"},{"location":"guide-css-attribute-selectors/#elementattributelast-part-of-the-value","text":"The ending substring attribute value selector (indicated with a dollar sign, $ ) matches elements whose specified attribute values end in the string of characters in the selector. In this example, you can apply a style to just the a elements that link to PDF files. a [ href $= \".pdf\" ] { border-bottom : 3 px solid ; }","title":"element[attribute$=\"last part of the value\"]"},{"location":"guide-css-attribute-selectors/#elementattributeany-part-of-the-value","text":"The arbitrary substring attribute value selector (indicated with an asterisk, * ) looks for the provided text string in any part of the attribute value specified. This rule selects any image that contains the word \"February\" somewhere in its title . img [ title *= \"February\" ] { border : 3 px solid ; }","title":"element[attribute*=\"any part of the value\"]"},{"location":"guide-css-attribute-selectors/#reference","text":"Robbins, J. N. (2018). Learning Web Design: A Beginner's Guide to HTML, CSS, JavaScript, and Web Graphics (5th Edition). O'Reilly Media.","title":"Reference"},{"location":"guide-deprecated/","text":"HTML Deprecated Tags and Attributes REMINDER: In your assignments and tests, you will be marked down for use of any of the following deprecated tags and/or attributes. Deprecated Tags Tags/Elements Description <acronym> Defines an acronym <applet> Defines an applet <basefont> Defines a base font for the page <big> Defines big text <center> Defines centered text <dir> Defines a directory list <font> Defines text font, size and color <frame> Defines a frame <frameset> Defines a set of frames <isindex> Defines a single-line input field <noframes> Defines a noframe section <s> Defines a strikethrough text <strike> Defines a strikethrough text <tt> Defines teletype text <u> Defines underlined text Deprecated Attributes Removed Attributes From the Elements rev <link> , <a> charset <link> , <a> shape <a> coords <a> longdesc <img> , <iframe> target <link> nohref <area> profile <head> version <html> name <img> scheme <meta> archive <object> classid <object> codebase <object> codetype <object> declare <object> standby <object> valuetype <param> type <param> axis <td> , <t> abbr <td> , <t> scope <td> align <caption> , <iframe> , <img> , <input> , <object> , <legend> , <table> , <hr> , <div> , <h1> , <h2> , <h3> , <h4> , <h5> , <h6> , <p> , <col> , <colgroup> , <tbody> , <td> , <tfoot> , <th> , <thead> , <tr> alink <body> link <body> vlink <body> text <body> background <body> bgcolor <table> , <tr> , <td> , <th> , <body> border <table> , <object> cellpadding <table> cellspacing <table> char <col> , <colgroup> , <tbody> , <td> , <tfoot> , <th> , <thead> , <tr> charoff <col> , <colgroup> , <tbody> , <td> , <tfoot> , <th> , <thead> , <tr> clear <br> compact <dl> , <menu> , <ol> , <ul> frame <table> frameborder <iframe> hspace <img> , <object> vspace <img> , <object> marginheight <iframe> marginwidth <iframe> noshade <hr> nowrap <td> , <th> rules <table> scrolling <iframe> size <hr> type <li> , <ol> , <ul> valign <col> , <colgroup> , <tbody> , <td> , <tfoot> , <th> , <thead> , <tr> width <hr> , <table> , <td> , <th> , <col> , <colgroup> , <pre> Reference [TutorialsPoint] HTML5 - Deprecated Tags & Attributes . Link Here","title":"HTML Deprecated Tags & Attributes"},{"location":"guide-deprecated/#html-deprecated-tags-and-attributes","text":"REMINDER: In your assignments and tests, you will be marked down for use of any of the following deprecated tags and/or attributes.","title":"HTML Deprecated Tags and Attributes"},{"location":"guide-deprecated/#deprecated-tags","text":"Tags/Elements Description <acronym> Defines an acronym <applet> Defines an applet <basefont> Defines a base font for the page <big> Defines big text <center> Defines centered text <dir> Defines a directory list <font> Defines text font, size and color <frame> Defines a frame <frameset> Defines a set of frames <isindex> Defines a single-line input field <noframes> Defines a noframe section <s> Defines a strikethrough text <strike> Defines a strikethrough text <tt> Defines teletype text <u> Defines underlined text","title":"Deprecated Tags"},{"location":"guide-deprecated/#deprecated-attributes","text":"Removed Attributes From the Elements rev <link> , <a> charset <link> , <a> shape <a> coords <a> longdesc <img> , <iframe> target <link> nohref <area> profile <head> version <html> name <img> scheme <meta> archive <object> classid <object> codebase <object> codetype <object> declare <object> standby <object> valuetype <param> type <param> axis <td> , <t> abbr <td> , <t> scope <td> align <caption> , <iframe> , <img> , <input> , <object> , <legend> , <table> , <hr> , <div> , <h1> , <h2> , <h3> , <h4> , <h5> , <h6> , <p> , <col> , <colgroup> , <tbody> , <td> , <tfoot> , <th> , <thead> , <tr> alink <body> link <body> vlink <body> text <body> background <body> bgcolor <table> , <tr> , <td> , <th> , <body> border <table> , <object> cellpadding <table> cellspacing <table> char <col> , <colgroup> , <tbody> , <td> , <tfoot> , <th> , <thead> , <tr> charoff <col> , <colgroup> , <tbody> , <td> , <tfoot> , <th> , <thead> , <tr> clear <br> compact <dl> , <menu> , <ol> , <ul> frame <table> frameborder <iframe> hspace <img> , <object> vspace <img> , <object> marginheight <iframe> marginwidth <iframe> noshade <hr> nowrap <td> , <th> rules <table> scrolling <iframe> size <hr> type <li> , <ol> , <ul> valign <col> , <colgroup> , <tbody> , <td> , <tfoot> , <th> , <thead> , <tr> width <hr> , <table> , <td> , <th> , <col> , <colgroup> , <pre>","title":"Deprecated Attributes"},{"location":"guide-deprecated/#reference","text":"[TutorialsPoint] HTML5 - Deprecated Tags & Attributes . Link Here","title":"Reference"},{"location":"guide-vscode/","text":"Visual Studio Code Setup Going forward, I will be using Visual Studio Code as my code editor of choice during demos. However, this is not the only choice available - some good alternatives include Atom, Sublime Text, and Notepad++ (for Windows users only). Of course, you are not forbidden to use a different code editor you're already familiar with, as long as you are able to make web scripts with it. Visual Studio Code Extensions Visual Studio Code has plenty of extensions which can either make your code editor appear more visually appealing, or help ease your workflow with some useful fixes. The ones I will be using prevalently are as follows: Highlight Matching Tag by vincaslt ( vincaslt.highlight-matching-tag ) - This is helpful especially for checking if your tag pairs are correctly placed or omitted by mistake. Live Server by Ritwich Dey ( ritwickdey.liveserver ) - Up until we learn PHP, this will be the quick way to view our webpages without digging into our file directory to display our webpages in our web browser. Prettier - Code formatter by Prettier ( esbenp.prettier-vscode ) - This will be our code formatter in order to have our web files properly indented and formatted (hence the name). Also, do take note that I also have this extension installed in my instance of Visual Studio Code: IntelliJ IDEA Keybindings by Keisuke Kato ( k--kato.intellij-idea-keybindings ) This extension makes it such that some of my shortcut keys are different from what is initially set by Microsoft themselves. You may choose not to install this extension, this one should do absolutely nothing to your workflow especially if you're not the type to use complex shortcut keys aside from your Ctrl + X / Ctrl + C and Ctrl + V combo ( Cmd + X / Cmd + C and Cmd + V for macOS ). However, if I mention any keyboard shortcut that does not translate on your end, you may want to do due diligence and find out what the original keybindings are. You will be able to install your extensions by clicking on the Extensions tab on the left hand side (the shortcut is Shift + Cmd + X on macOS or Ctrl + Shift + X on Windows). You can find out more about what these extensions do when you select and find them from there. Note Do be aware that you are not required to download these extensions in order for you to carry on with the class. These extensions are only meant to help with easing your web scripting/programming experiences with Visual Studio Code. Testing Visual Studio Code Out To open a project directory, you can click on \"Open...\" from the Getting Started page or from the top menu bar and locate it that way. Alternatively, you can click and drag your project folder from your File Explorer/Finder window and into the Visual Studio Code interface - this is a pretty quick way to get started and should be applicable in most code editors. Create a webpage file named index.html your project directory. After that, copy and paste the following into your webpage: index.html 1 2 3 4 5 6 7 8 9 <!DOCTYPE html> < html > < head > < title > Testing HTML </ title > </ head > < body > < h1 > It works! </ h1 > </ body > </ html > If you downloaded the Live Server extension, you should be able to view a link that says \"Go Live\". Click that link and it will open up your webpage in a small web server with the IP address 127.0.0.1:5500 . The port 5500 may not apply depending on what is currently running inside your machine. The output should be as follows: Any change you make to your webpage right after upon saving will immediately refresh what is shown on the web browser automatically - this means you won't need to instinctively refresh your browser each time you make a change. Click the link again to stop the Live Server from refreshing. Alternatively, in the Explorer side bar, you can right click on the HTML file you're working on and select \"Open with Live Server\". Attention The Live Server extension only works when you have your project folder as an active workspace inside Visual Studio Code. It will not work as intended with loose files that are simply opened from other foreign folders.","title":"VS Code"},{"location":"guide-vscode/#visual-studio-code-setup","text":"Going forward, I will be using Visual Studio Code as my code editor of choice during demos. However, this is not the only choice available - some good alternatives include Atom, Sublime Text, and Notepad++ (for Windows users only). Of course, you are not forbidden to use a different code editor you're already familiar with, as long as you are able to make web scripts with it.","title":"Visual Studio Code Setup"},{"location":"guide-vscode/#visual-studio-code-extensions","text":"Visual Studio Code has plenty of extensions which can either make your code editor appear more visually appealing, or help ease your workflow with some useful fixes. The ones I will be using prevalently are as follows: Highlight Matching Tag by vincaslt ( vincaslt.highlight-matching-tag ) - This is helpful especially for checking if your tag pairs are correctly placed or omitted by mistake. Live Server by Ritwich Dey ( ritwickdey.liveserver ) - Up until we learn PHP, this will be the quick way to view our webpages without digging into our file directory to display our webpages in our web browser. Prettier - Code formatter by Prettier ( esbenp.prettier-vscode ) - This will be our code formatter in order to have our web files properly indented and formatted (hence the name). Also, do take note that I also have this extension installed in my instance of Visual Studio Code: IntelliJ IDEA Keybindings by Keisuke Kato ( k--kato.intellij-idea-keybindings ) This extension makes it such that some of my shortcut keys are different from what is initially set by Microsoft themselves. You may choose not to install this extension, this one should do absolutely nothing to your workflow especially if you're not the type to use complex shortcut keys aside from your Ctrl + X / Ctrl + C and Ctrl + V combo ( Cmd + X / Cmd + C and Cmd + V for macOS ). However, if I mention any keyboard shortcut that does not translate on your end, you may want to do due diligence and find out what the original keybindings are. You will be able to install your extensions by clicking on the Extensions tab on the left hand side (the shortcut is Shift + Cmd + X on macOS or Ctrl + Shift + X on Windows). You can find out more about what these extensions do when you select and find them from there. Note Do be aware that you are not required to download these extensions in order for you to carry on with the class. These extensions are only meant to help with easing your web scripting/programming experiences with Visual Studio Code.","title":"Visual Studio Code Extensions"},{"location":"guide-vscode/#testing-visual-studio-code-out","text":"To open a project directory, you can click on \"Open...\" from the Getting Started page or from the top menu bar and locate it that way. Alternatively, you can click and drag your project folder from your File Explorer/Finder window and into the Visual Studio Code interface - this is a pretty quick way to get started and should be applicable in most code editors. Create a webpage file named index.html your project directory. After that, copy and paste the following into your webpage: index.html 1 2 3 4 5 6 7 8 9 <!DOCTYPE html> < html > < head > < title > Testing HTML </ title > </ head > < body > < h1 > It works! </ h1 > </ body > </ html > If you downloaded the Live Server extension, you should be able to view a link that says \"Go Live\". Click that link and it will open up your webpage in a small web server with the IP address 127.0.0.1:5500 . The port 5500 may not apply depending on what is currently running inside your machine. The output should be as follows: Any change you make to your webpage right after upon saving will immediately refresh what is shown on the web browser automatically - this means you won't need to instinctively refresh your browser each time you make a change. Click the link again to stop the Live Server from refreshing. Alternatively, in the Explorer side bar, you can right click on the HTML file you're working on and select \"Open with Live Server\". Attention The Live Server extension only works when you have your project folder as an active workspace inside Visual Studio Code. It will not work as intended with loose files that are simply opened from other foreign folders.","title":"Testing Visual Studio Code Out"},{"location":"guide-xampp/","text":"XAMPP Installation Unlike JavaScript, PHP is a back-end scripting language that involves interacting with a server for information exchange. One of the useful applications of using PHP in web development includes form data collection and processing. Getting Started To carry on with programming in PHP, you will require an Apache server installed in your local machine. Not only that, this server will also need to contain PHP and a few database software. In short, you will need what is often referred as a LAMP stack. Fortunately, one may find the LAMP stack already bundled in various packages like XAMPP. XAMPP is available across multiple platforms, including Windows, macOS and Linux. Head here to obtain the XAMPP installer: XAMPP Installer Head here to obtain the MAMP installer: MAMP Installer M1 Macs Incompatibility As of now, I think that M1 Macs are incompatible with XAMPP. If you're part of the demographic that uses an M1 Mac, you may want to look for alternatives like MAMP. Still, I haven't tested this out (mostly because I don't own one just yet), but perhaps if you want to try brute force your way into getting XAMPP to work, this may help: How to get Xampp working on your M1 chip Macbook pro Installing LAMP Stack from Scratch (for macOS Users only) If you're feeling adventurous or if all the LAMP stack packages are giving you problems during installation, head over to my guide on how to install each component separately on your machine here: Setting Up LAMP Stack in macOS (The Hard Way) Warning Should you choose this route for installing your LAMP stack, don't follow the rest of this practical's guide. The separate guide will detail different steps to testing everything you install. XAMPP Control Panel The XAMPP Control Panel should look something like this: XAMPP Control Panel The only two items that you need turned on is Apache and MySQL . The rest are not necessary. IMPORTANT: Location of Project Files for PHP Development Upon installation, the location of the XAMPP web server files in Windows is in C:\\xampp by default. On macOS, XAMPP acts like an external volume that has to be mounted each time you need to use it. Pay close attention to where a folder called htdocs is. Unlike previously when you can basically open your HTML files from just about anywhere in your local machine, PHP files will only work within the server file directory. In particular, you will need to stash your project files inside a folder named htdocs from now on. First PHP Script Ensure that both the Apache server and the MySQL are running as according to the contol panel. Inside the htdocs folder, create a PHP file named test.php . In this file, enter the following script: test.php 1 2 <?php echo \"<h1>It works!</h1>\" ; If you type in localhost/test.php into the browser's address bar, you should see the following: In order to access pages from the htdocs folder from your web browser, you will need to start with localhost before the filename. The method of accessing files in subfolders still apply (to get into index.php in a subfolder called test in htdocs , type localhost/test/index.php ).","title":"XAMPP Installation"},{"location":"guide-xampp/#xampp-installation","text":"Unlike JavaScript, PHP is a back-end scripting language that involves interacting with a server for information exchange. One of the useful applications of using PHP in web development includes form data collection and processing.","title":"XAMPP Installation"},{"location":"guide-xampp/#getting-started","text":"To carry on with programming in PHP, you will require an Apache server installed in your local machine. Not only that, this server will also need to contain PHP and a few database software. In short, you will need what is often referred as a LAMP stack. Fortunately, one may find the LAMP stack already bundled in various packages like XAMPP. XAMPP is available across multiple platforms, including Windows, macOS and Linux. Head here to obtain the XAMPP installer: XAMPP Installer Head here to obtain the MAMP installer: MAMP Installer M1 Macs Incompatibility As of now, I think that M1 Macs are incompatible with XAMPP. If you're part of the demographic that uses an M1 Mac, you may want to look for alternatives like MAMP. Still, I haven't tested this out (mostly because I don't own one just yet), but perhaps if you want to try brute force your way into getting XAMPP to work, this may help: How to get Xampp working on your M1 chip Macbook pro","title":"Getting Started"},{"location":"guide-xampp/#installing-lamp-stack-from-scratch-for-macos-users-only","text":"If you're feeling adventurous or if all the LAMP stack packages are giving you problems during installation, head over to my guide on how to install each component separately on your machine here: Setting Up LAMP Stack in macOS (The Hard Way) Warning Should you choose this route for installing your LAMP stack, don't follow the rest of this practical's guide. The separate guide will detail different steps to testing everything you install.","title":"Installing LAMP Stack from Scratch (for macOS Users only)"},{"location":"guide-xampp/#xampp-control-panel","text":"The XAMPP Control Panel should look something like this: XAMPP Control Panel The only two items that you need turned on is Apache and MySQL . The rest are not necessary.","title":"XAMPP Control Panel"},{"location":"guide-xampp/#important-location-of-project-files-for-php-development","text":"Upon installation, the location of the XAMPP web server files in Windows is in C:\\xampp by default. On macOS, XAMPP acts like an external volume that has to be mounted each time you need to use it. Pay close attention to where a folder called htdocs is. Unlike previously when you can basically open your HTML files from just about anywhere in your local machine, PHP files will only work within the server file directory. In particular, you will need to stash your project files inside a folder named htdocs from now on.","title":"IMPORTANT: Location of Project Files for PHP Development"},{"location":"guide-xampp/#first-php-script","text":"Ensure that both the Apache server and the MySQL are running as according to the contol panel. Inside the htdocs folder, create a PHP file named test.php . In this file, enter the following script: test.php 1 2 <?php echo \"<h1>It works!</h1>\" ; If you type in localhost/test.php into the browser's address bar, you should see the following: In order to access pages from the htdocs folder from your web browser, you will need to start with localhost before the filename. The method of accessing files in subfolders still apply (to get into index.php in a subfolder called test in htdocs , type localhost/test/index.php ).","title":"First PHP Script"},{"location":"guides/","text":"List of Guides Looking for some extra information on setting stuff up or for some small pieces of information? They'll populate here as and when I can put stuff in. Preparation Guides This module requires use of multiple pieces of software. We'll run through them one at a time. Code Editor For a good first half of the module, you'll require a code editor. The following link will give a rough idea on how I set my copy of Visual Studio Code up. Visual Studio Code More guides may come as and when I try some others out; if you want me to have a look at any of them, do reach out! I'll see if I can try it out in any spare time I can get. Alternatively, you can try other code editors like Atom, Sublime Text, Brackets, and Notepad++. IDEs like Adobe Dreamweaver, Microsoft Expression Web (no longer supported, but functional), WebStorm/PHPStorm by Jetbrains are okay too. PHP Environment Setup & MySQL/mariaDB Scripting Programming in PHP is when setting things up can get tricky - you will now require a LAMP stack to run your PHP web applications. Luckily, there are software bundles that will get your LAMP stack ready and running. I recommend XAMPP for most users, though some (especially those using macOS with Apple Silicon) may not be able to install it due to conflicting software requirements. An alternative is MAMP (I'll try to get a guide of it as soon as I can, watch this space). XAMPP Installation As for myself, though.. I won't be using any of these bundles.. you will notice that I have my LAMP stack running without them installed. Personally, I am a nut for wanting more control over some of the setup.. so I've installed each component required one by one. I've written up a setup guide detailing steps I've taken to install my own LAMP stack from scratch, but it's only applicable for macOS users. If you're one of the lucky few who dare try to do what I did myself.. good luck. I can't guarantee what I've written is up to date, so do carry out your due diligence and consult other sources or tutorials to complement my guide in case something goes awry and my guide doesn't help with fixing it.. or you can try asking me. I'll see what I can do during then. Setting Up LAMP Stack in macOS (The Hard Way) Miscellaneous and Optional References Deprecated Tags and Attributes in HTML Based on the current HTML5 standard, there may be some tags or attributes that are considered obsolete and should not be used. For each one, you can replicate their functionalities using CSS (which allows for better synchronization of styles across pages and better control overall). You can refer to the list of deprecated HTML tags and attributes here. Deprecated Tags and Attributes in HTML","title":"List of Guides"},{"location":"guides/#list-of-guides","text":"Looking for some extra information on setting stuff up or for some small pieces of information? They'll populate here as and when I can put stuff in.","title":"List of Guides"},{"location":"guides/#preparation-guides","text":"This module requires use of multiple pieces of software. We'll run through them one at a time.","title":"Preparation Guides"},{"location":"guides/#code-editor","text":"For a good first half of the module, you'll require a code editor. The following link will give a rough idea on how I set my copy of Visual Studio Code up. Visual Studio Code More guides may come as and when I try some others out; if you want me to have a look at any of them, do reach out! I'll see if I can try it out in any spare time I can get. Alternatively, you can try other code editors like Atom, Sublime Text, Brackets, and Notepad++. IDEs like Adobe Dreamweaver, Microsoft Expression Web (no longer supported, but functional), WebStorm/PHPStorm by Jetbrains are okay too.","title":"Code Editor"},{"location":"guides/#php-environment-setup-mysqlmariadb-scripting","text":"Programming in PHP is when setting things up can get tricky - you will now require a LAMP stack to run your PHP web applications. Luckily, there are software bundles that will get your LAMP stack ready and running. I recommend XAMPP for most users, though some (especially those using macOS with Apple Silicon) may not be able to install it due to conflicting software requirements. An alternative is MAMP (I'll try to get a guide of it as soon as I can, watch this space). XAMPP Installation As for myself, though.. I won't be using any of these bundles.. you will notice that I have my LAMP stack running without them installed. Personally, I am a nut for wanting more control over some of the setup.. so I've installed each component required one by one. I've written up a setup guide detailing steps I've taken to install my own LAMP stack from scratch, but it's only applicable for macOS users. If you're one of the lucky few who dare try to do what I did myself.. good luck. I can't guarantee what I've written is up to date, so do carry out your due diligence and consult other sources or tutorials to complement my guide in case something goes awry and my guide doesn't help with fixing it.. or you can try asking me. I'll see what I can do during then. Setting Up LAMP Stack in macOS (The Hard Way)","title":"PHP Environment Setup &amp; MySQL/mariaDB Scripting"},{"location":"guides/#miscellaneous-and-optional-references","text":"","title":"Miscellaneous and Optional References"},{"location":"guides/#deprecated-tags-and-attributes-in-html","text":"Based on the current HTML5 standard, there may be some tags or attributes that are considered obsolete and should not be used. For each one, you can replicate their functionalities using CSS (which allows for better synchronization of styles across pages and better control overall). You can refer to the list of deprecated HTML tags and attributes here. Deprecated Tags and Attributes in HTML","title":"Deprecated Tags and Attributes in HTML"},{"location":"lab01/","text":"Practical 01: Getting Started with HTML This practical will serve as a starting point to learning how to create webpages. You may have come across some of the tags used here in previous encounters, but be aware of deprecated tags! See Getting Started for more information. Getting Started Naming your Files HTML files typically have the .html extension. One can create a HTML file named index.html where index is the name designated to the page. Files with the name index are often treated as home pages in web sites. For example, when one visits TIMeS , the browser would immediately look for a file whose name is index if the name of the file is not specified. Let's just say TIMeS has a page called login.html . One may visit that page instead of index.html by specifying the filename after the URL, namely: https://times.taylors.edu.my/login.html Take Note Going forward, DO NOT name any of your project folders or files with spaces. This can inevitably complicate things when we start going through referencing files in your project directory. For example, if a web site with domain www.example.com has a file named page 1.html , the address bar in a web browser will have to interpret the link to that page as: www.example.com/page%201.html The best practice is to clump the words making up the file name together without spaces (i.e., page1.html ), or to add a hyphen - or underscore ( _ ) to separate each word (i.e., page-1.html , page_1.html ). Basic HTML Document Structure Your HTML file should take a form like as follows: <!DOCTYPE html> < html lang = \"en\" > < head > <!-- To contain stylesheets and various webpage information (i.e., Tab Name) --> </ head > < body > <!-- Browser viewable content should be placed here --> </ body > </ html > Avoid Deprecated Tags! Web developers are now expected to follow the HTML 5 standard when developing webpages. With this standard comes the fact that some tags/elements/attributes which were prevalently used in prior versions of HTML should no longer be applicable - they are what we call deprecated . In most cases, CSS is strongly recommended to be used as the ultimate alternative. For instance, rather than using the <u></u> element to denote underlined text, implement CSS like as follows: <!-- In <head> section: --> < style type = \"text/css\" > . underlined { text-decoration : underline ; } </ style > <!-- In <body> section: --> < span class = \"underlined\" > Underlined text </ span > Using CSS rather than resorting to deprecated tags has its upsides. For one, you can implement one style ruling to be shared across multiple HTML elements in multiple HTML documents. We will delve more into CSS stylings in the next practical. Refer here for the list of deprecated HTML tags and attributes you SHOULD NOT USE : HTML Deprecated Tags and Attributes Tasks Task 1 Develop a webpage that contains a self-introduction of yourself. Your webpage should contain at least the following content: a picture of yourself (or your online avatar/sona, a goat \ud83d\udc10.. whatever rocks your boat) a short paragraph about yourself (use paragraph element) hobbies and interests (unordered list) favorite subjects in school (or college, you decide) (ordered list) You may take this as a first initiative to work on the index.html page of your very first assignment. If you're feeling adventurous, you can immediately begin looking into using CSS to start sprucing up your webpage. Note What else would you put into a introduction page? Or more specifically, what would you like other people to know about you? Task 2 In a separate webpage called tables.html , create a table element that replicates the following in terms of row and column span: Table Exercise Demo Hint Consider the use of the rowspan and colspan HTML attributes. Extra Task Publish your webpage on GitHub Pages. There are numerous sources that can help you to get a head start with GitHub Pages, and it's all free! The simplest method is to use GitHub Desktop. An official GitHub Docs guide can be found here . Website Design Of course, this is completely optional based on what you see fit. This is just my two cents on what can constitute a good website design. Website front-end design is dependent on aesthetics; HTML and CSS has very rarely got to do with much logic implementation. In the field of human-computer interaction (HCI), you will find that there are a few key design principles one would need to adhere to an interface that is useful and aesthetically pleasing at the same time. While it is crucial to ensure that a website isn't bland, sometimes it's only right to go with simple and minimalistic designs. By default, when designing a website, one has to consider the balance between functionality and aesthetics; whether one should be prioritized solely depends on what the website is to be used for. Another thing that should be taken note of is the content density. Say, for example, you're working on a design for a website acting as an online manual. Novice users will tend to prefer a lower content density - that is, they will be more likely to prefer an interface that isn't too cluttered with information or options (so as to intimidate them, among many reasons). Such interfaces would warrant little to no effort in learning how to navigate them. Expert users will tend to prefer a higher content density - that is, with knowledge of more advanced/obscure settings and/or information, for instance, they would prefer to have an interface that can leverage as much control as possible. Such interfaces would warrant a comparably greater effort in learning how to navigate them. In many professional (and actually functional) websites, you may tend to find very consistent design elements in play that constitute a website. This can range from how each element appears, to the terminology used to convey information. By having consistency, you can reduce the amount of effort needed to learn how a website works - this can be a key factor as to whether one would be compelled to explore your website more or not. While planning the design of a webpage, some find it better to prepare mockups to visualize ideas they have in mind into something tangible and easier to formulate decisions on. In fact, this is considered protocol if this were to be done within a software development standpoint, where web designers can find themselves needing to prepare visual mockups for key stakeholders (i.e., project sponsors, project managers, etc.) to see, and hopefully accept. Press F to pay respects to those working with very picky, indecisive and/or hard-to-please clients. \ud83d\ude05 Image Source Here This is only some advice I can offer from my standpoint, but what I do not possess is the intents you may have in creating your websites. Feel free to use anything I've mentioned from here, or explore a style that you would like to emulate. I think the best thing to do would be to look around and observe other websites online, and try to pick up anything you feel is interesting or vibes well with you. At the end of it, classes on designing a website using HTML and CSS is something like an art class, but with code and computers - you can learn how to use each component based on what guides you have at your disposal, but only you can form a design that speaks to you and your target audience the most. Reference Dennis, A., Wixom, B. H. & Tegarden, D. (2020). Systems Analysis and Design: An Object-Oriented Approach with UML (6th Edition). Wiley.","title":"Practical 01: Getting Started with HTML"},{"location":"lab01/#practical-01-getting-started-with-html","text":"This practical will serve as a starting point to learning how to create webpages. You may have come across some of the tags used here in previous encounters, but be aware of deprecated tags! See Getting Started for more information.","title":"Practical 01: Getting Started with HTML"},{"location":"lab01/#getting-started","text":"","title":"Getting Started"},{"location":"lab01/#naming-your-files","text":"HTML files typically have the .html extension. One can create a HTML file named index.html where index is the name designated to the page. Files with the name index are often treated as home pages in web sites. For example, when one visits TIMeS , the browser would immediately look for a file whose name is index if the name of the file is not specified. Let's just say TIMeS has a page called login.html . One may visit that page instead of index.html by specifying the filename after the URL, namely: https://times.taylors.edu.my/login.html Take Note Going forward, DO NOT name any of your project folders or files with spaces. This can inevitably complicate things when we start going through referencing files in your project directory. For example, if a web site with domain www.example.com has a file named page 1.html , the address bar in a web browser will have to interpret the link to that page as: www.example.com/page%201.html The best practice is to clump the words making up the file name together without spaces (i.e., page1.html ), or to add a hyphen - or underscore ( _ ) to separate each word (i.e., page-1.html , page_1.html ).","title":"Naming your Files"},{"location":"lab01/#basic-html-document-structure","text":"Your HTML file should take a form like as follows: <!DOCTYPE html> < html lang = \"en\" > < head > <!-- To contain stylesheets and various webpage information (i.e., Tab Name) --> </ head > < body > <!-- Browser viewable content should be placed here --> </ body > </ html >","title":"Basic HTML Document Structure"},{"location":"lab01/#avoid-deprecated-tags","text":"Web developers are now expected to follow the HTML 5 standard when developing webpages. With this standard comes the fact that some tags/elements/attributes which were prevalently used in prior versions of HTML should no longer be applicable - they are what we call deprecated . In most cases, CSS is strongly recommended to be used as the ultimate alternative. For instance, rather than using the <u></u> element to denote underlined text, implement CSS like as follows: <!-- In <head> section: --> < style type = \"text/css\" > . underlined { text-decoration : underline ; } </ style > <!-- In <body> section: --> < span class = \"underlined\" > Underlined text </ span > Using CSS rather than resorting to deprecated tags has its upsides. For one, you can implement one style ruling to be shared across multiple HTML elements in multiple HTML documents. We will delve more into CSS stylings in the next practical. Refer here for the list of deprecated HTML tags and attributes you SHOULD NOT USE : HTML Deprecated Tags and Attributes","title":"Avoid Deprecated Tags!"},{"location":"lab01/#tasks","text":"","title":"Tasks"},{"location":"lab01/#task-1","text":"Develop a webpage that contains a self-introduction of yourself. Your webpage should contain at least the following content: a picture of yourself (or your online avatar/sona, a goat \ud83d\udc10.. whatever rocks your boat) a short paragraph about yourself (use paragraph element) hobbies and interests (unordered list) favorite subjects in school (or college, you decide) (ordered list) You may take this as a first initiative to work on the index.html page of your very first assignment. If you're feeling adventurous, you can immediately begin looking into using CSS to start sprucing up your webpage. Note What else would you put into a introduction page? Or more specifically, what would you like other people to know about you?","title":"Task 1"},{"location":"lab01/#task-2","text":"In a separate webpage called tables.html , create a table element that replicates the following in terms of row and column span: Table Exercise Demo Hint Consider the use of the rowspan and colspan HTML attributes.","title":"Task 2"},{"location":"lab01/#extra-task","text":"Publish your webpage on GitHub Pages. There are numerous sources that can help you to get a head start with GitHub Pages, and it's all free! The simplest method is to use GitHub Desktop. An official GitHub Docs guide can be found here .","title":"Extra Task"},{"location":"lab01/#website-design","text":"Of course, this is completely optional based on what you see fit. This is just my two cents on what can constitute a good website design. Website front-end design is dependent on aesthetics; HTML and CSS has very rarely got to do with much logic implementation. In the field of human-computer interaction (HCI), you will find that there are a few key design principles one would need to adhere to an interface that is useful and aesthetically pleasing at the same time. While it is crucial to ensure that a website isn't bland, sometimes it's only right to go with simple and minimalistic designs. By default, when designing a website, one has to consider the balance between functionality and aesthetics; whether one should be prioritized solely depends on what the website is to be used for. Another thing that should be taken note of is the content density. Say, for example, you're working on a design for a website acting as an online manual. Novice users will tend to prefer a lower content density - that is, they will be more likely to prefer an interface that isn't too cluttered with information or options (so as to intimidate them, among many reasons). Such interfaces would warrant little to no effort in learning how to navigate them. Expert users will tend to prefer a higher content density - that is, with knowledge of more advanced/obscure settings and/or information, for instance, they would prefer to have an interface that can leverage as much control as possible. Such interfaces would warrant a comparably greater effort in learning how to navigate them. In many professional (and actually functional) websites, you may tend to find very consistent design elements in play that constitute a website. This can range from how each element appears, to the terminology used to convey information. By having consistency, you can reduce the amount of effort needed to learn how a website works - this can be a key factor as to whether one would be compelled to explore your website more or not. While planning the design of a webpage, some find it better to prepare mockups to visualize ideas they have in mind into something tangible and easier to formulate decisions on. In fact, this is considered protocol if this were to be done within a software development standpoint, where web designers can find themselves needing to prepare visual mockups for key stakeholders (i.e., project sponsors, project managers, etc.) to see, and hopefully accept. Press F to pay respects to those working with very picky, indecisive and/or hard-to-please clients. \ud83d\ude05 Image Source Here This is only some advice I can offer from my standpoint, but what I do not possess is the intents you may have in creating your websites. Feel free to use anything I've mentioned from here, or explore a style that you would like to emulate. I think the best thing to do would be to look around and observe other websites online, and try to pick up anything you feel is interesting or vibes well with you. At the end of it, classes on designing a website using HTML and CSS is something like an art class, but with code and computers - you can learn how to use each component based on what guides you have at your disposal, but only you can form a design that speaks to you and your target audience the most. Reference Dennis, A., Wixom, B. H. & Tegarden, D. (2020). Systems Analysis and Design: An Object-Oriented Approach with UML (6th Edition). Wiley.","title":"Website Design"},{"location":"lab02/","text":"Practical 02: Applying CSS This practical is an extension of Practical 01 - you will now attempt to implement visual styles to the content prepared in HTML.. unless you've done so already (in which case, you can consider putting in some more \ud83d\ude1d). Getting Started CSS can be applied in three different methods. The encouraged method is having your CSS in an external CSS file (i.e., external style). When referencing a CSS file, one ought to use the <link> tag within the head section of the HTML document. For example, to reference styles.css in your HTML document, the placement of your CSS <link> reference should be like as follows: 1 2 3 4 5 6 7 8 9 10 11 <!DOCTYPE html> < html > < head > <!-- some head content --> < link rel = \"stylesheet\" type = \"text/css\" href = \"styles.css\" /> </ head > < body > <!-- body content here --> </ body > </ html > CSS Responsiveness CSS responsiveness typically has to do with making sure that websites can adapt to different screen resolutions from different devices. You can specify how content appears in different resolutions by using the media query tag. For example, the yellowgreen background color styling only applies to screens that are at least 768px wide: 1 2 3 4 5 6 7 8 9 body { background-color : orange ; } @ media only screen and ( min-width : 768px ) { body { background-color : yellowgreen ; } } Detailed information is available in Lecture 4: HTML & CSS (Part 3). However, the concept behind it is easy to understand and should be considered if you plan to make your webpage accessible on mobile screens. Local Custom Fonts Ah, fonts. There's something about fonts that make it part of a document's or interface's aesthetic - when used right alongside complementing visual elements, you can produce an outlook that dictates a great efferevescence from how professional it looks or how creative the author's mind is. There are various methods of including different types of fonts, one of which include using one that's locally installed in your computer; another being linking to a font that's available in an online repository (e.g., Google Fonts). With regards to custom fonts stored locally on your computer though, there's something that you really, REALLY NEED to take note of. Local Custom Font Location You may be tempted to just include the font straight away like how it's plug-and-play with your other applications. For example, just by including the font inside a Fonts folder or installing it enables the font to be instantly recognized by Microsoft Word and be leveraged for use in your documents. However, while this also includes your webpages, it only works because the webpages are inside your computer. You need to be aware that the custom fonts you may have (perhaps painstakingly or jovially) installed in your computer MAY OR MAY NOT exist in other computers that don't belong to you. This can be extended to external servers where websites are deployed into. You should expect computers to have a handful of fonts that act as the bare minimum for a commonplace interface, like \"Times New Roman\", \"Courier New\", \"SimSun\", and \"Arial\". Should you want to use custom fonts, you'll need to include it in your project folder. Also.. NO, the solution is not \"Just ask the other person to install the font into their computer.\" The folder structure should be something like this if you wanted to include a custom font (this case, Roboto) locally within your project folder: project |-- css |-- styles.css |-- footer.css |-- fonts (store your custom fonts in here) |-- Roboto.ttf |-- images |-- catdog.png |-- icon.svg |-- js |-- main.js |-- index.html |-- about.html |-- error-404.html From here, you can link your font file using a relative URL easily without needing to resort to digging your C: drive or what Home directory you have in your computer just to elicit the font. Of course, if you don't link it, the font may still appear to work in your computer, but this by itself does not solve your problem with it not appearing in another computer. Make sure that in your CSS file (or wherever you're using your embedded CSS, inline CSS does not have this luxury) that's being used, you use @font-face to declare use of the font on top: 1 2 3 4 5 6 7 8 @ font-face { font-family : \"Roboto\" ; /* in this example, the font is located in a sibling folder, so you want to exit from the `css` folder before entering the `fonts` folder */ src : url ( \"../fonts/Roboto.tff\" ); /* optional: font-weight */ } Tasks Task 1 In the webpages you created, apply the various CSS styles you've learnt in lecture (e.g., background color, fonts, image positioning, etc.). When applying CSS to your webpages, look up some good aesthetic principles web designers or developers take when designing their websites. Try to apply those principles in your webpages wherever possible. Task 2 In another separate webpage called animal-crossing.html , try to replicate the following: Task 2 Demo Requirements: The webpage should contain the contents as given in the figure. Set the background color to beige. The top image should occupy a maximum width of 400px be surrounded by a darkgreen dashed border with 3px thickness have a padding of 10px display the message \"Tom Nook\" if the image cannot be displayed Download the given Tom Nook image to use with this webpage. Feel free to rename the image if desired. Set the table borders to 1px solid black. Each table cell should have a 10px padding. The colored cell should have a lightseagreen background color. For each list, you are required to follow the list style type as shown in the output. For the first hyperlink, link it to https://www.google.com that opens in a new window . Do not use a different hyperlink text from what is given in the output. For the second hyperlink, link it to an email address tom_nook@mail.com . When the hyperlink is clicked, it should either open your computer's preferred mail application or an email website from your browser and open a new email draft. The subject should be pre-filled with: \"I Need Miles\". Optional Task: CSS Responsiveness Try and implement a styling that only applies itself in mobile screens. You may look up a screen resolution for a mobile device of your choice (e.g., iPhones, tablet screens). Mini-Tutorial: How to Center Images in HTML In order to center <img> tags in your webpage, you may want to consider placing them into a block container element (e.g., <div> , <section> ). Then, set the text-align CSS property of that container element to center . While text-align is seemingly meant to work only with text, it can be used to align any inline elements \u2013 this includes <img> elements. You can view this mini-tutorial demonstration here to see this being applied in action:","title":"Practical 02: Applying CSS"},{"location":"lab02/#practical-02-applying-css","text":"This practical is an extension of Practical 01 - you will now attempt to implement visual styles to the content prepared in HTML.. unless you've done so already (in which case, you can consider putting in some more \ud83d\ude1d).","title":"Practical 02: Applying CSS"},{"location":"lab02/#getting-started","text":"CSS can be applied in three different methods. The encouraged method is having your CSS in an external CSS file (i.e., external style). When referencing a CSS file, one ought to use the <link> tag within the head section of the HTML document. For example, to reference styles.css in your HTML document, the placement of your CSS <link> reference should be like as follows: 1 2 3 4 5 6 7 8 9 10 11 <!DOCTYPE html> < html > < head > <!-- some head content --> < link rel = \"stylesheet\" type = \"text/css\" href = \"styles.css\" /> </ head > < body > <!-- body content here --> </ body > </ html >","title":"Getting Started"},{"location":"lab02/#css-responsiveness","text":"CSS responsiveness typically has to do with making sure that websites can adapt to different screen resolutions from different devices. You can specify how content appears in different resolutions by using the media query tag. For example, the yellowgreen background color styling only applies to screens that are at least 768px wide: 1 2 3 4 5 6 7 8 9 body { background-color : orange ; } @ media only screen and ( min-width : 768px ) { body { background-color : yellowgreen ; } } Detailed information is available in Lecture 4: HTML & CSS (Part 3). However, the concept behind it is easy to understand and should be considered if you plan to make your webpage accessible on mobile screens.","title":"CSS Responsiveness"},{"location":"lab02/#local-custom-fonts","text":"Ah, fonts. There's something about fonts that make it part of a document's or interface's aesthetic - when used right alongside complementing visual elements, you can produce an outlook that dictates a great efferevescence from how professional it looks or how creative the author's mind is. There are various methods of including different types of fonts, one of which include using one that's locally installed in your computer; another being linking to a font that's available in an online repository (e.g., Google Fonts). With regards to custom fonts stored locally on your computer though, there's something that you really, REALLY NEED to take note of. Local Custom Font Location You may be tempted to just include the font straight away like how it's plug-and-play with your other applications. For example, just by including the font inside a Fonts folder or installing it enables the font to be instantly recognized by Microsoft Word and be leveraged for use in your documents. However, while this also includes your webpages, it only works because the webpages are inside your computer. You need to be aware that the custom fonts you may have (perhaps painstakingly or jovially) installed in your computer MAY OR MAY NOT exist in other computers that don't belong to you. This can be extended to external servers where websites are deployed into. You should expect computers to have a handful of fonts that act as the bare minimum for a commonplace interface, like \"Times New Roman\", \"Courier New\", \"SimSun\", and \"Arial\". Should you want to use custom fonts, you'll need to include it in your project folder. Also.. NO, the solution is not \"Just ask the other person to install the font into their computer.\" The folder structure should be something like this if you wanted to include a custom font (this case, Roboto) locally within your project folder: project |-- css |-- styles.css |-- footer.css |-- fonts (store your custom fonts in here) |-- Roboto.ttf |-- images |-- catdog.png |-- icon.svg |-- js |-- main.js |-- index.html |-- about.html |-- error-404.html From here, you can link your font file using a relative URL easily without needing to resort to digging your C: drive or what Home directory you have in your computer just to elicit the font. Of course, if you don't link it, the font may still appear to work in your computer, but this by itself does not solve your problem with it not appearing in another computer. Make sure that in your CSS file (or wherever you're using your embedded CSS, inline CSS does not have this luxury) that's being used, you use @font-face to declare use of the font on top: 1 2 3 4 5 6 7 8 @ font-face { font-family : \"Roboto\" ; /* in this example, the font is located in a sibling folder, so you want to exit from the `css` folder before entering the `fonts` folder */ src : url ( \"../fonts/Roboto.tff\" ); /* optional: font-weight */ }","title":"Local Custom Fonts"},{"location":"lab02/#tasks","text":"","title":"Tasks"},{"location":"lab02/#task-1","text":"In the webpages you created, apply the various CSS styles you've learnt in lecture (e.g., background color, fonts, image positioning, etc.). When applying CSS to your webpages, look up some good aesthetic principles web designers or developers take when designing their websites. Try to apply those principles in your webpages wherever possible.","title":"Task 1"},{"location":"lab02/#task-2","text":"In another separate webpage called animal-crossing.html , try to replicate the following: Task 2 Demo Requirements: The webpage should contain the contents as given in the figure. Set the background color to beige. The top image should occupy a maximum width of 400px be surrounded by a darkgreen dashed border with 3px thickness have a padding of 10px display the message \"Tom Nook\" if the image cannot be displayed Download the given Tom Nook image to use with this webpage. Feel free to rename the image if desired. Set the table borders to 1px solid black. Each table cell should have a 10px padding. The colored cell should have a lightseagreen background color. For each list, you are required to follow the list style type as shown in the output. For the first hyperlink, link it to https://www.google.com that opens in a new window . Do not use a different hyperlink text from what is given in the output. For the second hyperlink, link it to an email address tom_nook@mail.com . When the hyperlink is clicked, it should either open your computer's preferred mail application or an email website from your browser and open a new email draft. The subject should be pre-filled with: \"I Need Miles\".","title":"Task 2"},{"location":"lab02/#optional-task-css-responsiveness","text":"Try and implement a styling that only applies itself in mobile screens. You may look up a screen resolution for a mobile device of your choice (e.g., iPhones, tablet screens).","title":"Optional Task: CSS Responsiveness"},{"location":"lab02/#mini-tutorial-how-to-center-images-in-html","text":"In order to center <img> tags in your webpage, you may want to consider placing them into a block container element (e.g., <div> , <section> ). Then, set the text-align CSS property of that container element to center . While text-align is seemingly meant to work only with text, it can be used to align any inline elements \u2013 this includes <img> elements. You can view this mini-tutorial demonstration here to see this being applied in action:","title":"Mini-Tutorial: How to Center Images in HTML"},{"location":"lab03/","text":"Practical 03: HTML Forms This week's practical activity explores some more features including those in HTML forms and intermediate CSS. We will attempt to create a HTML form utilizing these features (minus information retrieval, this'll be covered when we go through PHP). Task We will attempt to recreate a form resembling the one as shown below: Note Right-cick on the image and select \"Open Image in New Tab\" to have a clearer view of the image. Image assets are given below: Lab 03 Activity Assets The font used to create this form is called Urbanist , and it can be found in Google Fonts. Click HERE to open the Google Fonts page showcasing the font and to get details on incorporating it into your web form. Some Extra Details For Status under Personal Particulars , include the following in the drop-down list: Please select status (disabled, selected) Active Deferred Graduated Terminated For Enrolled Program under Academic Record , include the following: Please select a program (disabled, selected) Foundation in Computing (FIC) Diploma in Information Technology (DIT) Form Submission Upon selecting the Submit button, redirect it to a different webpage called form-submitted.html . In this page, create a webpage that essentially lets the website visitor know that the details entered into the form have been successfully collected. Include any other element/text/etc. that can be considered relevant here. Extra Task Consider someone who may open your form on a mobile device such as a smartphone or tablet. Web developers or designers make use of the following meta tag in the <head> section: < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" /> This will set the viewport of the webpage, which will give the browser instructions on how to control the page's dimensions and scaling. Apart from that, media queries were used to cater for different screen sizes. Look up media queries online and try to incorporate it into your web form. You may use your browser's inspector tool to simulate viewing the webpage from a mobile device of your own choosing. Some Guidelines If you're stuck on where to begin, I can suggest focusing on placing the HTML elements first. Applying CSS can come in later once all HTML elements are placed or if and when you feel confident enough to start styling your webpage. Treat this as some scrap notes on what I think some students may struggle to find out on their own here; I'll see if I can update this as quickly as can be while the practical activity is still somewhat relevant. The given form's body can be divided into three sections - Personal Particulars, Academic Record, and Academic Progression. Personal Particulars The way how this form was structured is by having some sections grouping together two smaller sections containing one form item each. For instance, there'll be one section keeping two subsections containing the label and input field for First Name and Last Name respectively. These two subsections' widths are set to roughly 50% , and both are separated using the CSS float property - one to the left and one to the right. With CSS repsonsiveness, I've set the float properties to only take into effect based on whether the width of the browser is at least a certain given length - you can try and see which one fits you the most here. Academic Record The main thing that I feel should be highlighted is the default selection for the Enrolled Program <select> input. In the given example, I have set the <option> element containing the \"Please select a programme\" text to not have a value attribute, but have disabled and selected instead. disabled makes it so that users are unable to select it from the dropdown <select> list. selected makes it so that the given option is selected during when the page is freshly loaded. Only use this on one <option> from the group of options in the <select> element. Another thing I would like to highlight is to ensure that the name attribute for each radio button in this section (i.e., Semester Intakes) are the same. Radio buttons should only have one selection per group, and keeping the name attribute value equal amongst these radio buttons facilitate this intended and correct behavior. Academic Progression Nothing in particular here, just that the <textarea> element is set to span the whole section's width by default. Of course, it can still be resized as long as nothing extra is done to prevent the <textarea> field from being manipulated. Submit and Reset Buttons With <form> elements, you will require input:submit and input:reset instead of the typical <button> elements. Manually using the <button> elements to redirect users to form-submitted.html or to simply refresh the page does not give the same intended functionality; this can be shown once we start implementing some form retrieval functionality in PHP later in the semester. However, do be reminded that your <form> element containing these two input-specific buttons require both the action and method attributes. Set the method attribute value preferably to POST , or GET is fine - this is of no consequence now, but will be touched once we get into PHP. This attribute is not as important as action for the time being. For your input:submit button to work as intended, you will need to set the value of your action attribute to form-submitted.html . The action attribute allows sending information to an form handler file that can be responsible for entering data into the database, or other kinds of processing to perhaps facilitate a unique experience in a web application (i.e., different sets of data may display different outputs altogether). A Little Advice on Styling Right here, I want to provide a vacuum where you have some freedom to search up whatever CSS properties you feel you can leverage in creating this form. Feel free to play around with how it is, or you can proceed to the Video Guide to see how I've implemented the styles from scratch. One thing you'll notice is that the given image's colors are a lot darker than what's shown in the sample. What I've done here is to use the still unedited image as the webpage's background image, but have the <form> element to have a translucent white-colored background covering over the image to make it seem as if it is lighter to begin with. This is one fix I've used without needing to doctor the image to make it appear just like that. body { background-image : url ( \"../images/taylors-bg.jpg\" ); background-size : cover ; background-position : center ; background-repeat : no-repeat ; } form { background-color : rgba ( 255 , 255 , 255 , 0.8 ); } It is also helpful to keep in mind that there tends to be some predefined CSS stylings set - this includes margins on certain text elements like your heading and paragraph elements, and (particularly useful to know here) a hidden margin set in your webpage's <body> element. If you would like to get rid of these margin, you can set it to 0 with CSS: body { margin : 0 ; } You can refer to the list of CSS Default Values here: CSS Default Values Walkthrough Video Guide The following video will give a thorough walkthrough on how to develop the above form. ```","title":"Practical 03: HTML Forms"},{"location":"lab03/#practical-03-html-forms","text":"This week's practical activity explores some more features including those in HTML forms and intermediate CSS. We will attempt to create a HTML form utilizing these features (minus information retrieval, this'll be covered when we go through PHP).","title":"Practical 03: HTML Forms"},{"location":"lab03/#task","text":"We will attempt to recreate a form resembling the one as shown below: Note Right-cick on the image and select \"Open Image in New Tab\" to have a clearer view of the image. Image assets are given below: Lab 03 Activity Assets The font used to create this form is called Urbanist , and it can be found in Google Fonts. Click HERE to open the Google Fonts page showcasing the font and to get details on incorporating it into your web form.","title":"Task"},{"location":"lab03/#some-extra-details","text":"For Status under Personal Particulars , include the following in the drop-down list: Please select status (disabled, selected) Active Deferred Graduated Terminated For Enrolled Program under Academic Record , include the following: Please select a program (disabled, selected) Foundation in Computing (FIC) Diploma in Information Technology (DIT)","title":"Some Extra Details"},{"location":"lab03/#form-submission","text":"Upon selecting the Submit button, redirect it to a different webpage called form-submitted.html . In this page, create a webpage that essentially lets the website visitor know that the details entered into the form have been successfully collected. Include any other element/text/etc. that can be considered relevant here.","title":"Form Submission"},{"location":"lab03/#extra-task","text":"Consider someone who may open your form on a mobile device such as a smartphone or tablet. Web developers or designers make use of the following meta tag in the <head> section: < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" /> This will set the viewport of the webpage, which will give the browser instructions on how to control the page's dimensions and scaling. Apart from that, media queries were used to cater for different screen sizes. Look up media queries online and try to incorporate it into your web form. You may use your browser's inspector tool to simulate viewing the webpage from a mobile device of your own choosing.","title":"Extra Task"},{"location":"lab03/#some-guidelines","text":"If you're stuck on where to begin, I can suggest focusing on placing the HTML elements first. Applying CSS can come in later once all HTML elements are placed or if and when you feel confident enough to start styling your webpage. Treat this as some scrap notes on what I think some students may struggle to find out on their own here; I'll see if I can update this as quickly as can be while the practical activity is still somewhat relevant. The given form's body can be divided into three sections - Personal Particulars, Academic Record, and Academic Progression.","title":"Some Guidelines"},{"location":"lab03/#personal-particulars","text":"The way how this form was structured is by having some sections grouping together two smaller sections containing one form item each. For instance, there'll be one section keeping two subsections containing the label and input field for First Name and Last Name respectively. These two subsections' widths are set to roughly 50% , and both are separated using the CSS float property - one to the left and one to the right. With CSS repsonsiveness, I've set the float properties to only take into effect based on whether the width of the browser is at least a certain given length - you can try and see which one fits you the most here.","title":"Personal Particulars"},{"location":"lab03/#academic-record","text":"The main thing that I feel should be highlighted is the default selection for the Enrolled Program <select> input. In the given example, I have set the <option> element containing the \"Please select a programme\" text to not have a value attribute, but have disabled and selected instead. disabled makes it so that users are unable to select it from the dropdown <select> list. selected makes it so that the given option is selected during when the page is freshly loaded. Only use this on one <option> from the group of options in the <select> element. Another thing I would like to highlight is to ensure that the name attribute for each radio button in this section (i.e., Semester Intakes) are the same. Radio buttons should only have one selection per group, and keeping the name attribute value equal amongst these radio buttons facilitate this intended and correct behavior.","title":"Academic Record"},{"location":"lab03/#academic-progression","text":"Nothing in particular here, just that the <textarea> element is set to span the whole section's width by default. Of course, it can still be resized as long as nothing extra is done to prevent the <textarea> field from being manipulated.","title":"Academic Progression"},{"location":"lab03/#submit-and-reset-buttons","text":"With <form> elements, you will require input:submit and input:reset instead of the typical <button> elements. Manually using the <button> elements to redirect users to form-submitted.html or to simply refresh the page does not give the same intended functionality; this can be shown once we start implementing some form retrieval functionality in PHP later in the semester. However, do be reminded that your <form> element containing these two input-specific buttons require both the action and method attributes. Set the method attribute value preferably to POST , or GET is fine - this is of no consequence now, but will be touched once we get into PHP. This attribute is not as important as action for the time being. For your input:submit button to work as intended, you will need to set the value of your action attribute to form-submitted.html . The action attribute allows sending information to an form handler file that can be responsible for entering data into the database, or other kinds of processing to perhaps facilitate a unique experience in a web application (i.e., different sets of data may display different outputs altogether).","title":"Submit and Reset Buttons"},{"location":"lab03/#a-little-advice-on-styling","text":"Right here, I want to provide a vacuum where you have some freedom to search up whatever CSS properties you feel you can leverage in creating this form. Feel free to play around with how it is, or you can proceed to the Video Guide to see how I've implemented the styles from scratch. One thing you'll notice is that the given image's colors are a lot darker than what's shown in the sample. What I've done here is to use the still unedited image as the webpage's background image, but have the <form> element to have a translucent white-colored background covering over the image to make it seem as if it is lighter to begin with. This is one fix I've used without needing to doctor the image to make it appear just like that. body { background-image : url ( \"../images/taylors-bg.jpg\" ); background-size : cover ; background-position : center ; background-repeat : no-repeat ; } form { background-color : rgba ( 255 , 255 , 255 , 0.8 ); } It is also helpful to keep in mind that there tends to be some predefined CSS stylings set - this includes margins on certain text elements like your heading and paragraph elements, and (particularly useful to know here) a hidden margin set in your webpage's <body> element. If you would like to get rid of these margin, you can set it to 0 with CSS: body { margin : 0 ; } You can refer to the list of CSS Default Values here: CSS Default Values","title":"A Little Advice on Styling"},{"location":"lab03/#walkthrough","text":"","title":"Walkthrough"},{"location":"lab03/#video-guide","text":"The following video will give a thorough walkthrough on how to develop the above form. ```","title":"Video Guide"},{"location":"lab04/","text":"Practical 04: Introduction to JavaScript In this practical, you will begin to use JavaScript in making your webpages more dynamic. JavaScript enables users to interact with the webpage's elements (and may also consequently modify the appearance of webpages through a set of action(s)). Getting Started There are two methods of implementing JavaScript into your HTML file: embedded style 1 2 3 4 5 6 7 8 9 10 11 12 13 < html > < head > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" /> < title > JavaScript Example </ title > </ head > < body > <!-- Body content --> < script > // JavaScript code here </ script > </ body > </ html > external style 1 2 3 4 5 6 7 8 9 10 11 < html > < head > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" /> < title > JavaScript Example </ title > </ head > < body > <!-- Body content --> < script src = \"script_name_here.js\" ></ script > </ body > </ html > To implement JavaScript using embedded style, the <script></script> element should be used. Location of <script> Tags Unlike CSS, you may use them in either the <head> or <body> section, or both if necessary. The only times when order is necessary is when you require a set of script commands to run first before another set of scripts. let , const and var The ECMAScript 2015 (ECMA 6) standard introduces the let and const keywords as better alternatives to var when naming variables. let is used to declare regular variables virtually the same way as how var was the go-to for the same purpose, whilst const introduces a way to create constant variables that cannot be altered upon declaration. Going forward, let and const should be used instead of var . This is mainly due to their effects on variable declarations. Declaring var is synonymous to declaring a global variable in JavaScript that can easily be modified regardless of context (i.e., in a function vs. outside of a function). By declaring a variable using var , you can expect unwanted changes in your code (basically bugs) and problems revolving scopes (i.e., function scope and block scope). Refer to the following: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 function aRandomFunction () { var a = \"Red\" ; let b = \"Blue\" ; console . log ( a , b ); // this prints: \"Red Blue\" { // Inside a block (can be for program control statements // or practically anything that uses curly parentheses) var a = \"Green\" ; let b = \"Yellow\" ; // let's assume that variables a and b // need to take on a different value temporarily here (for reasons) console . log ( a , b ); // this prints \"Green Yellow\" } // Outside of the block now console . log ( a , b ); // this prints \"Green Blue\", // can be a HUGE problem if a needs to be kept as \"Red\" } aRandomFunction (); // statement to invoke above function By declaring variables using the let keyword, you can ensure that should they need to be temporarily reassigned a different value for only within the block context, it can be done without affecting it's original value outside of said block context. This, being a trait that exists when declaring variables in many other programming languages, is something that var fails to emulate. Within JavaScript, there exists a global context/object called window which contains a number of important preset values. Think of it as like a large drawing canvas with preset items like a house with a roof of a certain color (e.g., blue). In this instance, let's assume that this window object has one attribute called color . By declaring a variable named color using the var keyword, you're essentially going to modify the default color value, which may be potentially important and will cause quite a ton of problems if tampered illegally. You can view all the attributes/variables of concern if you type out window in the Inspector Console, or simply the following statement line in a JavaScript file: // Yep, there's a bootload of 'em! for ( let v of Object . keys ( window )) document . write ( v + \"<br>\" ); The following video also gives a good explanation behind why using var to declare variables in JavaScript can be a BAD idea. Naming Variables When naming most things, it is a popular preference to adhere to the Camel Case Naming Convention . This naming convention requires that: all letters in the first word in the name be strictly in lower case, and the first letter in each subsequent word (to be placed without spaces) in upper case Examples of such names adhering to the Camel Case Naming Convention include: ports , badgerMole , numberOfPots , timeOfDay , sensor1 The other major naming convention, being Pascal Case Naming Convention , should be reserved for naming classes and objects. This naming convention requires the first letter in ALL words in the name to be upper case, the rest of which are in lower case. We will touch classes very briefly on this in Lecture 7, but know that they are not the primary focus of this module; thus there should be nearly no reason to use this convention now for the time being. Some of you who may be familiar with Python may have already been introduced to the naming convention requiring all letters to be in lower case and underscores ( _ ) to be separate each word in the name (e.g., number_of_snakes , user_input , test_subject_1 ). This naming convention is also just as acceptable as the Camel Case Naming Convention, though from my point of view, not many use it here for JavaScript. Naming Constants Constants are typically named differently, vaguely matching the convention used to name variables in Python with regards to how words are separated with underscores. However, all letters in constants are presented in upper case (e.g., NUMBER_OF_ROUNDS , KILOMETERS_TO_MILES ). Tasks Task 1 The code below contains a function named checkReadPageFunction that will ask the user to confirm that the page has been read. Complete the JavaScript code by inserting extra code that will capture the click event and execute the function. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 < html > < head > < title > Check Read Page Exercise </ title > </ head > < body > < p > Click on the button to confirm that you have read this page. </ p > < button id = \"button1\" > Click here </ button > < script type = \"text/javascript\" > function checkReadPageFunction () { alert ( \"I have read this page.\" ); } /* ---- INSERT CODE HERE ---- */ /* ---- END INSERT CODE ---- */ </ script > </ body > </ html > Task 2 Create a HTML webpage with an empty paragraph element and a button with the text \"Click Me!\". When the button is clicked, the paragraph element should then contain the text \"You clicked the button!\". Create JavaScript code within <script> tags inside the webpage to enable this functionality. Additional Sub-task Modify the code such that it prints \"You clicked the button!\" in a new line in the browser window after each time after the button has been clicked on. Task 3 Create a HTML webpage that displays a confirm box asking users: \"Select OK to proceed or Cancel to return.\". If the OK button is selected, display an alert box that contains the message \"You may proceed.\". If the Cancel button is selected, display an alert box that contains the message \"You have chosen to cancel.\". After either alert box is dismissed, display a message on the HTML page. Create JavaScript code within <script> tags inside the webpage to enable this functionality. Task 4 Create a HTML webpage that displays a prompt box that requests users to enter their name. Once entered, an alert box should follow up with a greeting that contains the entered name. Challenge Use a separate JavaScript file to contain the JavaScript code for this functionality. Tip To link another JavaScript file for use with your HTML page, you'll still need the <script> tags, but now with a src attribute added to it: < script src = \"script.js\" ></ script > The given line looks for a JavaScript file named script.js to include together with your HTML file. All rules pertaining to locating JavaScript files in subfolders or the parent folders work the same way as how it is for CSS and image files. Task 5 Create an empty HTML file containing the following in the <body> section: 1 2 3 4 5 6 7 8 9 10 11 < script > let a = \"red\" ; let b = \"blue\" ; /* ---- INSERT CODE HERE ---- */ /* ---- END INSERT CODE ---- */ console . log ( a ); console . log ( b ); </ script > You should now be able to view from the values of a and b being printed in the console. Within the given boundaries as stated in the above code snippet, write some extra JavaScript code that will swap the values of variables a and b . You may check your variable answers using your browser's console or insert additional lines of code to automatically print out their values. Hint Use another variable to temporarily hold one of their values during the swap process.","title":"Practical 04: Introduction to JavaScript"},{"location":"lab04/#practical-04-introduction-to-javascript","text":"In this practical, you will begin to use JavaScript in making your webpages more dynamic. JavaScript enables users to interact with the webpage's elements (and may also consequently modify the appearance of webpages through a set of action(s)).","title":"Practical 04: Introduction to JavaScript"},{"location":"lab04/#getting-started","text":"There are two methods of implementing JavaScript into your HTML file: embedded style 1 2 3 4 5 6 7 8 9 10 11 12 13 < html > < head > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" /> < title > JavaScript Example </ title > </ head > < body > <!-- Body content --> < script > // JavaScript code here </ script > </ body > </ html > external style 1 2 3 4 5 6 7 8 9 10 11 < html > < head > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" /> < title > JavaScript Example </ title > </ head > < body > <!-- Body content --> < script src = \"script_name_here.js\" ></ script > </ body > </ html > To implement JavaScript using embedded style, the <script></script> element should be used.","title":"Getting Started"},{"location":"lab04/#location-of-script-tags","text":"Unlike CSS, you may use them in either the <head> or <body> section, or both if necessary. The only times when order is necessary is when you require a set of script commands to run first before another set of scripts.","title":"Location of &lt;script&gt; Tags"},{"location":"lab04/#let-const-and-var","text":"The ECMAScript 2015 (ECMA 6) standard introduces the let and const keywords as better alternatives to var when naming variables. let is used to declare regular variables virtually the same way as how var was the go-to for the same purpose, whilst const introduces a way to create constant variables that cannot be altered upon declaration. Going forward, let and const should be used instead of var . This is mainly due to their effects on variable declarations. Declaring var is synonymous to declaring a global variable in JavaScript that can easily be modified regardless of context (i.e., in a function vs. outside of a function). By declaring a variable using var , you can expect unwanted changes in your code (basically bugs) and problems revolving scopes (i.e., function scope and block scope). Refer to the following: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 function aRandomFunction () { var a = \"Red\" ; let b = \"Blue\" ; console . log ( a , b ); // this prints: \"Red Blue\" { // Inside a block (can be for program control statements // or practically anything that uses curly parentheses) var a = \"Green\" ; let b = \"Yellow\" ; // let's assume that variables a and b // need to take on a different value temporarily here (for reasons) console . log ( a , b ); // this prints \"Green Yellow\" } // Outside of the block now console . log ( a , b ); // this prints \"Green Blue\", // can be a HUGE problem if a needs to be kept as \"Red\" } aRandomFunction (); // statement to invoke above function By declaring variables using the let keyword, you can ensure that should they need to be temporarily reassigned a different value for only within the block context, it can be done without affecting it's original value outside of said block context. This, being a trait that exists when declaring variables in many other programming languages, is something that var fails to emulate. Within JavaScript, there exists a global context/object called window which contains a number of important preset values. Think of it as like a large drawing canvas with preset items like a house with a roof of a certain color (e.g., blue). In this instance, let's assume that this window object has one attribute called color . By declaring a variable named color using the var keyword, you're essentially going to modify the default color value, which may be potentially important and will cause quite a ton of problems if tampered illegally. You can view all the attributes/variables of concern if you type out window in the Inspector Console, or simply the following statement line in a JavaScript file: // Yep, there's a bootload of 'em! for ( let v of Object . keys ( window )) document . write ( v + \"<br>\" ); The following video also gives a good explanation behind why using var to declare variables in JavaScript can be a BAD idea.","title":"let, const and var"},{"location":"lab04/#naming-variables","text":"When naming most things, it is a popular preference to adhere to the Camel Case Naming Convention . This naming convention requires that: all letters in the first word in the name be strictly in lower case, and the first letter in each subsequent word (to be placed without spaces) in upper case Examples of such names adhering to the Camel Case Naming Convention include: ports , badgerMole , numberOfPots , timeOfDay , sensor1 The other major naming convention, being Pascal Case Naming Convention , should be reserved for naming classes and objects. This naming convention requires the first letter in ALL words in the name to be upper case, the rest of which are in lower case. We will touch classes very briefly on this in Lecture 7, but know that they are not the primary focus of this module; thus there should be nearly no reason to use this convention now for the time being. Some of you who may be familiar with Python may have already been introduced to the naming convention requiring all letters to be in lower case and underscores ( _ ) to be separate each word in the name (e.g., number_of_snakes , user_input , test_subject_1 ). This naming convention is also just as acceptable as the Camel Case Naming Convention, though from my point of view, not many use it here for JavaScript.","title":"Naming Variables"},{"location":"lab04/#naming-constants","text":"Constants are typically named differently, vaguely matching the convention used to name variables in Python with regards to how words are separated with underscores. However, all letters in constants are presented in upper case (e.g., NUMBER_OF_ROUNDS , KILOMETERS_TO_MILES ).","title":"Naming Constants"},{"location":"lab04/#tasks","text":"","title":"Tasks"},{"location":"lab04/#task-1","text":"The code below contains a function named checkReadPageFunction that will ask the user to confirm that the page has been read. Complete the JavaScript code by inserting extra code that will capture the click event and execute the function. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 < html > < head > < title > Check Read Page Exercise </ title > </ head > < body > < p > Click on the button to confirm that you have read this page. </ p > < button id = \"button1\" > Click here </ button > < script type = \"text/javascript\" > function checkReadPageFunction () { alert ( \"I have read this page.\" ); } /* ---- INSERT CODE HERE ---- */ /* ---- END INSERT CODE ---- */ </ script > </ body > </ html >","title":"Task 1"},{"location":"lab04/#task-2","text":"Create a HTML webpage with an empty paragraph element and a button with the text \"Click Me!\". When the button is clicked, the paragraph element should then contain the text \"You clicked the button!\". Create JavaScript code within <script> tags inside the webpage to enable this functionality.","title":"Task 2"},{"location":"lab04/#additional-sub-task","text":"Modify the code such that it prints \"You clicked the button!\" in a new line in the browser window after each time after the button has been clicked on.","title":"Additional Sub-task"},{"location":"lab04/#task-3","text":"Create a HTML webpage that displays a confirm box asking users: \"Select OK to proceed or Cancel to return.\". If the OK button is selected, display an alert box that contains the message \"You may proceed.\". If the Cancel button is selected, display an alert box that contains the message \"You have chosen to cancel.\". After either alert box is dismissed, display a message on the HTML page. Create JavaScript code within <script> tags inside the webpage to enable this functionality.","title":"Task 3"},{"location":"lab04/#task-4","text":"Create a HTML webpage that displays a prompt box that requests users to enter their name. Once entered, an alert box should follow up with a greeting that contains the entered name.","title":"Task 4"},{"location":"lab04/#challenge","text":"Use a separate JavaScript file to contain the JavaScript code for this functionality. Tip To link another JavaScript file for use with your HTML page, you'll still need the <script> tags, but now with a src attribute added to it: < script src = \"script.js\" ></ script > The given line looks for a JavaScript file named script.js to include together with your HTML file. All rules pertaining to locating JavaScript files in subfolders or the parent folders work the same way as how it is for CSS and image files.","title":"Challenge"},{"location":"lab04/#task-5","text":"Create an empty HTML file containing the following in the <body> section: 1 2 3 4 5 6 7 8 9 10 11 < script > let a = \"red\" ; let b = \"blue\" ; /* ---- INSERT CODE HERE ---- */ /* ---- END INSERT CODE ---- */ console . log ( a ); console . log ( b ); </ script > You should now be able to view from the values of a and b being printed in the console. Within the given boundaries as stated in the above code snippet, write some extra JavaScript code that will swap the values of variables a and b . You may check your variable answers using your browser's console or insert additional lines of code to automatically print out their values. Hint Use another variable to temporarily hold one of their values during the swap process.","title":"Task 5"},{"location":"lab05/","text":"Practical 05: JavaScript Program Control Structure & Arrays Program control structures can be leveraged in many programming languages to enable easier implementation of tasks that require decision-making or repetition that would otherwise be tedious to incorporate. This practical activity explores program control structures that can be used to implement logic into websites. Getting Started JavaScript Program Control Structure Syntax The syntax used is applicable to many other languages, but that is not of our concern at the moment. if-else Statement Syntax (Example): if ( condition1 ) { // actions #1 } else if ( condition2 ) { // actions #2 } else { // actions otherwise } switch Statement Syntax (Example): switch ( variable ) { case 1 : // do something break ; case 2 : // do something case 3 : // do something (will carry on from Case 2 since no break statement exists) break ; default : // do something } for Loop Syntax: for ( init ; condition ; update ) { /* do something here */ } for-in Loop Syntax: for ( let key in object ) { /* do something here */ } for-of Loop Syntax: for ( let iter of arr ) { /* do something here */ } while Loop Syntax: init ; while ( condition ) { /* do something here */ update ; } do-while Loop Syntax: init ; do { /* do something here */ update ; } while ( condition ); JavaScript Arrays Presently, there are two ways to declare arrays: using the array() function to contain variables using square brackets [] (I very much prefer this method) Here's an example of declaring an array of numbers and accessing them: 1 2 3 4 let numArray = [ 25 , 29 , 31 , 9 , - 15 ]; console . log ( numArray [ 0 ]); // prints 25 console . log ( numArray [ 2 ]); // prints 31 Activity 1: Difference between while Loops and do-while Loops Create an empty HTML file containing the following in the <body> section: < script > let num = 16 ; console . log ( \"while looping..\" ); while ( num < 15 ) { console . log ( num ); num ++ ; } console . log ( \"do-while looping..\" ); // place do-while loop here </ script > After the last line given, utilize a do-while loop to carry out the same purpose as with the given while loop (i.e., use a do-while loop to print the value of num as it increases after each loop). What is the difference between these two loops in terms of their functions? Activity 2: Bubble Sort Bubble sort is one of many types of sorting algorithms taught in data structures and algorithms courses. Watch the following video to understand the concept behind bubble sort (0:48 to 2:40). In this activity, we will be using an external JavaScript file to contain our logic and the browser's inspector console to view our outputs. Our HTML page should be as follows: 1 2 3 4 5 6 7 8 9 10 < html > < head > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" /> < title > JavaScript Bubble Sort </ title > </ head > < body > <!-- I'm assuming the JavaScript file is named as follows and is in the same file directory as this HTML file. --> < script src = \"bubbleSort.js\" ></ script > </ body > </ html > Let's start our JavaScript file as follows: const array = [ 10 , - 3 , 55 , - 10 , - 24 , 54 , 0 , - 21 , 8 ]; console . log ( `Unsorted array:` , array ); Line 2 should print out the array with its elements in the original order. Let's use bubble sort to reorder the elements in this array in ascending order. Below the given JavaScript code snippet, declare a variable called is_sorted . This variable will serve as a flag variable that will determine whether to continue running through another iteration of the bubble sort algorithm. Our implementation of the bubble sort algorithm will be encapsulated within a do-while loop like as follows: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 const array = [ 10 , - 3 , 55 , - 10 , - 24 , 54 , 0 , - 21 , 8 ]; console . log ( `Unsorted array:` , array ); let is_sorted ; /** * the bubble sort algorithm will continue running * as long as is_sorted is false AFTER each iteration */ do { // we start every iteration of the algorithm by making is_sorted true is_sorted = true ; } while ( ! is_sorted ); // or is_sorted == false console . log ( `Sorted array:` , array ); Using a do-while loop makes it such that we won't require is_sorted to be initialized with a value just yet. Upon completing all the necessary rounds with the bubble sort algorithm, we will print out the sorted array. An alternative to using the do-while loop in this case is a for/of loop. Within the do-while loop, we will implement another loop structure - this time, we will be using a for loop. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 const array = [ 10 , - 3 , 55 , - 10 , - 24 , 54 , 0 , - 21 , 8 ]; console . log ( `Unsorted array:` , array ); let is_sorted ; /** * the bubble sort algorithm will continue running * as long as is_sorted is false AFTER each iteration */ do { // we start every iteration of the algorithm by making is_sorted true is_sorted = true ; for ( let j = 0 ; j < array . length ; ++ j ) { // we start comparing elements in here } } while ( ! is_sorted ); // or is_sorted == false console . log ( `Sorted array:` , array ); The mechanism behind how the bubble sort algorithm works revolves around comparing each element against its neighboring element in the array. In this implementation, we compare to check if each element is smaller than the left neighbor. At the end of each iteration, the largest element \"bubbles\" up to the end of the unsorted portion of the array (hence, why it's called bubble sort). 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 const array = [ 10 , - 3 , 55 , - 10 , - 24 , 54 , 0 , - 21 , 8 ]; console . log ( `Unsorted array:` , array ); let is_sorted ; /** * the bubble sort algorithm will continue running * as long as is_sorted is false AFTER each iteration */ do { // we start every iteration of the algorithm by making is_sorted true is_sorted = true ; for ( let j = 0 ; j < array . length ; ++ j ) { /** * checks if element (i.e., array[j]) * is smaller than the left neighbor (i.e., array[j - 1]) * * if so, flag is_sorted as false * and swap the element with its neighbor */ if ( array [ j ] < array [ j - 1 ]) { is_sorted = false ; const temp = array [ j ]; array [ j ] = array [ j - 1 ]; array [ j - 1 ] = temp ; } } } while ( ! is_sorted ); // or is_sorted == false console . log ( `Sorted array:` , array ); And voila, we basically created a simple implementation of the bubble sort algorithm. We can make a few changes to make this algorithm perform more efficiently though (in data structures and algorithms courses, the idea is to produce efficient algorithms or structures that utilize as little computer resources and/or time as possible). Modifications for Efficiency Here the do-while loop makes it such that the whole algorithm keeps iterating over the whole array to see if it is sorted. However, we have established that after each iteration, every last element in the unsorted portion of the array is considered as sorted. Therefore, we do not need each iteration to loop through to check against the sorted portion of the array. We can do this by replacing the do-while loop with another for loop with another iterator variable. After that, we can deduct the value of that iterator variable from array.length in the inner for loop (i.e., array_length - i ). In this implementation, the first iteration checks the whole array since array_length - 0 . In each subsequent iteration, i is incremented by 1, and the range checked in the inner for loop shrinks by size 1 (i.e., array_length - 1 in iteration #2, array_length - 2 in iteration #3, and so on). 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 const array = [ 10 , - 3 , 55 , - 10 , - 24 , 54 , 0 , - 21 , 8 ]; console . log ( `Unsorted array:` , array ); let is_sorted ; /** * the bubble sort algorithm will continue running * as long as is_sorted is false AFTER each iteration */ for ( let i = 0 ; i < array . length ; ++ i ) { // we start every iteration of the algorithm by making is_sorted true is_sorted = true ; for ( let j = 0 ; j < array . length - i ; ++ j ) { /** * checks if element (i.e., array[j]) * is smaller than the left neighbor (i.e., array[j - 1]) * * if so, flag is_sorted as false * and swap the element with its neighbor */ if ( array [ j ] < array [ j - 1 ]) { is_sorted = false ; const temp = array [ j ]; array [ j ] = array [ j - 1 ]; array [ j - 1 ] = temp ; } } } console . log ( `Sorted array:` , array ); We can also make the algorithm work such that it only proceeds if there was a swap during that iteration (i.e., is_sorted has turned false). If is_sorted remains true after that iteration, it should indicate that there is nothing else to sort in the array and it is safe to leave the array be. We do this by adding an if statement at the end of the outer for loop which breaks through that loop if is_sorted has remained true. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 const array = [ 10 , - 3 , 55 , - 10 , - 24 , 54 , 0 , - 21 , 8 ]; console . log ( `Unsorted array:` , array ); let is_sorted ; /** * the bubble sort algorithm will continue running * as long as is_sorted is false AFTER each iteration */ for ( let i = 0 ; i < array . length ; ++ i ) { // we start every iteration of the algorithm by making is_sorted true is_sorted = true ; for ( let j = 0 ; j < array . length - i ; ++ j ) { /** * checks if element (i.e., array[j]) * is smaller than the left neighbor (i.e., array[j - 1]) * * if so, flag is_sorted as false * and swap the element with its neighbor */ if ( array [ j ] < array [ j - 1 ]) { is_sorted = false ; const temp = array [ j ]; array [ j ] = array [ j - 1 ]; array [ j - 1 ] = temp ; } } if ( is_sorted ) { break ; } } console . log ( `Sorted array:` , array ); Randomized Array So far, we've only tested this algorithm on one type of array. We can test this using different arrays to see if it works. Here, we will implement an array of 10 randomized integers between -100 and 100. We start with an empty array and we utilize a for loop to iterate over a set number of times (i.e., ARRAY_SIZE ) to push integers of the aforementioned range. If you would like to try with a larger array size, simply modify the value of ARRAY_SIZE , but be sure to only place in positive integers or this will not work. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 const ARRAY_SIZE = 10 ; const array = []; for ( let i = 0 ; i < ARRAY_SIZE ; ++ i ) { array . push ( Math . floor ( Math . random () * 201 - 100 )); } console . log ( `Unsorted array:` , array ); let is_sorted ; /** * the bubble sort algorithm will continue running * as long as is_sorted is false AFTER each iteration */ for ( let i = 0 ; i < array . length ; ++ i ) { // we start every iteration of the algorithm by making is_sorted true is_sorted = true ; for ( let j = 0 ; j < array . length - i ; ++ j ) { /** * checks if element (i.e., array[j]) * is smaller than the left neighbor (i.e., array[j - 1]) * * if so, flag is_sorted as false * and swap the element with its neighbor */ if ( array [ j ] < array [ j - 1 ]) { is_sorted = false ; const temp = array [ j ]; array [ j ] = array [ j - 1 ]; array [ j - 1 ] = temp ; } } if ( is_sorted ) { break ; } } console . log ( `Sorted array:` , array ); Math.random() produces a decimal value between 0 (inclusive) and 1 (not inclusive). We need to expand this range to cater for all values between -100 and 100 (both inclusive), which totals up to 201 (100 -(-100) + 1). Therefore, we multiply Math.random() by 201, i.e., Math.random() * 201 . This, however, produces numbers between 0 (inclusive) and 201 (exclusive). To shift the range to be between -100 (inclusive) and 101 (exclusive), we deduct that product by 100 (i.e., Math.random() * 201 - 100 ). Still, do note that Math.random() produces decimal values, and Math.random() * 201 - 100 will give any decimal value between -100 and 100 (both inclusive). We use the Math.floor() function to take the floor boundary of the generated value in order to produce that integer. Note that we do not take the ceiling boundary of the generated value (i.e., Math.ceiling() ), as this will give values between -99 and 101 (both inclusive) instead. We also do not use regular rounding off of those decimal values (i.e., Math.round() ), as this gives values between -100 and 101 (both inclusive). Tasks You may require a little digging online to look up for some solutions for some of these tasks. Task 1 Create a HTML file that uses JavaScript to carry out the following. Create an external JavaScript file that contains an array named students which contains the following values: 'Anthony', 'Barry', 'Desmond', 'Grenda'. Print the students array in the console. Utilize a for-of loop to display the array elements in the console. Pop the last element in the students array (i.e., Grenda). Hint Use the pop() function. Append the values 'Marie' and 'Zacchaeus' to the end of the students array. Print the array again; you do not need any loop structure this time. Hint Use the push() function. Remove the first value from the students array (i.e., Anthony), and replace it with a new element 'Charlie'. Print the array again; just like last time, you do not need any loop structure here. Hint There exists a shift() function that can do one of the given requirements here. Perhaps there's also an unshift function which does the opposite as well? Challenge Use a separate JavaScript file to contain the JavaScript code for this functionality. Task 2 Create a HTML file that uses embedded JavaScript to carry out the following. Prompt users to enter a year using a prompt box. Set the default value to the current year. After entering the year, the browser window should display the Chinese zodiac animal that corresponds with the given remainder after dividing by 12: Remainder Chinese Zodiac Animal Remainder Chinese Zodiac Animal 0 Monkey 6 Tiger 1 Rooster 7 Rabbit 2 Dog 8 Dragon 3 Pig 9 Snake 4 Rat 10 Horse 5 Ox 11 Sheep Hint Use the modulo/remainder operator (i.e., % ) to determine the remainder from dividing the entered year by 12. Task 3 The Body Mass Index (BMI) is a measure of health on weight. A person's BMI is calculated by taking the person's weight (in kilograms) divided by the person's height squared (height in meters). \\[ \\text{BMI} = \\frac{\\text{weight}}{\\text{height} \\times \\text{height}} \\] Create a BMI script that takes in both a person's weight and height as values to interpret the person's BMI. The respective BMI interpretations are as follows: BMI Interpretation BMI < 18.5 Underweight 18.5 \u2264 BMI < 25.0 Normal 25.0 \u2264 BMI < 30.0 Overweight BMI \u2265 30.0 Obese You may choose to output the result from the console or via visual elements on your webpage (i.e., print the result in the browser window as a paragraph or regular text). Task 4 Create a HTML file that uses embedded JavaScript to carry out the following. All output should be displayed in the browser's inspector console. Part 1: Display the numbers between 5 to 22 (inclusive of both) in ascending order using a while loop. Part 2: Display the numbers between -45 to -23 (inclusive of both) in descending order using a for loop. Part 3: In the same HTML file, display the numbers between -14 and 7 (exclusive of both) in descending order using a while loop. Part 4: In the same HTML file, display the even numbers between 208 and 251 (inclusive of both) in descending order using a for loop. Hint Ascending order requires counting up from the smaller number to the larger number. This order should be in reverse for descending order . NOTE: Pay attention to whether the number boundaries are to be included or excluded in your loop structures. If you need to display only the even or odd numbers, consider whether each of these numbers give a remainder of 0 or 1 when divided by 2 (i.e., use the modulo/remainder % operator). 25 % 2 = 1 (25 / 2 = 12 remainder 1) 46 % 2 = 0 (46 / 2 = 23 remainder 0) Use an if statement to check if the remainder is 0 or 1. Based on what the result is, you can make that discernment on whether they need to be printed or not. Task 5 Create a HTML file that uses JavaScript to carry out the following. You are required to only use the browser's inspector console to generate outputs. Part 1: Create an object named movie which contains the following attributes: title: \"Big Hero 6\" releaseYear: 2014 rating: 7.8 director_1: \"Don Hall\" director_2: \"Chris Williams\" Part 2: Use the for-in loop to iterate through the movie object's attributes, printing them each time. Part 3: In the same for-in loop, implement a check such that only the attributes containing string values are printed in the console.","title":"Practical 05: JavaScript Program Control Structure & Arrays"},{"location":"lab05/#practical-05-javascript-program-control-structure-arrays","text":"Program control structures can be leveraged in many programming languages to enable easier implementation of tasks that require decision-making or repetition that would otherwise be tedious to incorporate. This practical activity explores program control structures that can be used to implement logic into websites.","title":"Practical 05: JavaScript Program Control Structure &amp; Arrays"},{"location":"lab05/#getting-started","text":"","title":"Getting Started"},{"location":"lab05/#javascript-program-control-structure-syntax","text":"The syntax used is applicable to many other languages, but that is not of our concern at the moment. if-else Statement Syntax (Example): if ( condition1 ) { // actions #1 } else if ( condition2 ) { // actions #2 } else { // actions otherwise } switch Statement Syntax (Example): switch ( variable ) { case 1 : // do something break ; case 2 : // do something case 3 : // do something (will carry on from Case 2 since no break statement exists) break ; default : // do something } for Loop Syntax: for ( init ; condition ; update ) { /* do something here */ } for-in Loop Syntax: for ( let key in object ) { /* do something here */ } for-of Loop Syntax: for ( let iter of arr ) { /* do something here */ } while Loop Syntax: init ; while ( condition ) { /* do something here */ update ; } do-while Loop Syntax: init ; do { /* do something here */ update ; } while ( condition );","title":"JavaScript Program Control Structure Syntax"},{"location":"lab05/#javascript-arrays","text":"Presently, there are two ways to declare arrays: using the array() function to contain variables using square brackets [] (I very much prefer this method) Here's an example of declaring an array of numbers and accessing them: 1 2 3 4 let numArray = [ 25 , 29 , 31 , 9 , - 15 ]; console . log ( numArray [ 0 ]); // prints 25 console . log ( numArray [ 2 ]); // prints 31","title":"JavaScript Arrays"},{"location":"lab05/#activity-1-difference-between-while-loops-and-do-while-loops","text":"Create an empty HTML file containing the following in the <body> section: < script > let num = 16 ; console . log ( \"while looping..\" ); while ( num < 15 ) { console . log ( num ); num ++ ; } console . log ( \"do-while looping..\" ); // place do-while loop here </ script > After the last line given, utilize a do-while loop to carry out the same purpose as with the given while loop (i.e., use a do-while loop to print the value of num as it increases after each loop). What is the difference between these two loops in terms of their functions?","title":"Activity 1: Difference between while Loops and do-while Loops"},{"location":"lab05/#activity-2-bubble-sort","text":"Bubble sort is one of many types of sorting algorithms taught in data structures and algorithms courses. Watch the following video to understand the concept behind bubble sort (0:48 to 2:40). In this activity, we will be using an external JavaScript file to contain our logic and the browser's inspector console to view our outputs. Our HTML page should be as follows: 1 2 3 4 5 6 7 8 9 10 < html > < head > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" /> < title > JavaScript Bubble Sort </ title > </ head > < body > <!-- I'm assuming the JavaScript file is named as follows and is in the same file directory as this HTML file. --> < script src = \"bubbleSort.js\" ></ script > </ body > </ html > Let's start our JavaScript file as follows: const array = [ 10 , - 3 , 55 , - 10 , - 24 , 54 , 0 , - 21 , 8 ]; console . log ( `Unsorted array:` , array ); Line 2 should print out the array with its elements in the original order. Let's use bubble sort to reorder the elements in this array in ascending order. Below the given JavaScript code snippet, declare a variable called is_sorted . This variable will serve as a flag variable that will determine whether to continue running through another iteration of the bubble sort algorithm. Our implementation of the bubble sort algorithm will be encapsulated within a do-while loop like as follows: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 const array = [ 10 , - 3 , 55 , - 10 , - 24 , 54 , 0 , - 21 , 8 ]; console . log ( `Unsorted array:` , array ); let is_sorted ; /** * the bubble sort algorithm will continue running * as long as is_sorted is false AFTER each iteration */ do { // we start every iteration of the algorithm by making is_sorted true is_sorted = true ; } while ( ! is_sorted ); // or is_sorted == false console . log ( `Sorted array:` , array ); Using a do-while loop makes it such that we won't require is_sorted to be initialized with a value just yet. Upon completing all the necessary rounds with the bubble sort algorithm, we will print out the sorted array. An alternative to using the do-while loop in this case is a for/of loop. Within the do-while loop, we will implement another loop structure - this time, we will be using a for loop. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 const array = [ 10 , - 3 , 55 , - 10 , - 24 , 54 , 0 , - 21 , 8 ]; console . log ( `Unsorted array:` , array ); let is_sorted ; /** * the bubble sort algorithm will continue running * as long as is_sorted is false AFTER each iteration */ do { // we start every iteration of the algorithm by making is_sorted true is_sorted = true ; for ( let j = 0 ; j < array . length ; ++ j ) { // we start comparing elements in here } } while ( ! is_sorted ); // or is_sorted == false console . log ( `Sorted array:` , array ); The mechanism behind how the bubble sort algorithm works revolves around comparing each element against its neighboring element in the array. In this implementation, we compare to check if each element is smaller than the left neighbor. At the end of each iteration, the largest element \"bubbles\" up to the end of the unsorted portion of the array (hence, why it's called bubble sort). 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 const array = [ 10 , - 3 , 55 , - 10 , - 24 , 54 , 0 , - 21 , 8 ]; console . log ( `Unsorted array:` , array ); let is_sorted ; /** * the bubble sort algorithm will continue running * as long as is_sorted is false AFTER each iteration */ do { // we start every iteration of the algorithm by making is_sorted true is_sorted = true ; for ( let j = 0 ; j < array . length ; ++ j ) { /** * checks if element (i.e., array[j]) * is smaller than the left neighbor (i.e., array[j - 1]) * * if so, flag is_sorted as false * and swap the element with its neighbor */ if ( array [ j ] < array [ j - 1 ]) { is_sorted = false ; const temp = array [ j ]; array [ j ] = array [ j - 1 ]; array [ j - 1 ] = temp ; } } } while ( ! is_sorted ); // or is_sorted == false console . log ( `Sorted array:` , array ); And voila, we basically created a simple implementation of the bubble sort algorithm. We can make a few changes to make this algorithm perform more efficiently though (in data structures and algorithms courses, the idea is to produce efficient algorithms or structures that utilize as little computer resources and/or time as possible).","title":"Activity 2: Bubble Sort"},{"location":"lab05/#modifications-for-efficiency","text":"Here the do-while loop makes it such that the whole algorithm keeps iterating over the whole array to see if it is sorted. However, we have established that after each iteration, every last element in the unsorted portion of the array is considered as sorted. Therefore, we do not need each iteration to loop through to check against the sorted portion of the array. We can do this by replacing the do-while loop with another for loop with another iterator variable. After that, we can deduct the value of that iterator variable from array.length in the inner for loop (i.e., array_length - i ). In this implementation, the first iteration checks the whole array since array_length - 0 . In each subsequent iteration, i is incremented by 1, and the range checked in the inner for loop shrinks by size 1 (i.e., array_length - 1 in iteration #2, array_length - 2 in iteration #3, and so on). 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 const array = [ 10 , - 3 , 55 , - 10 , - 24 , 54 , 0 , - 21 , 8 ]; console . log ( `Unsorted array:` , array ); let is_sorted ; /** * the bubble sort algorithm will continue running * as long as is_sorted is false AFTER each iteration */ for ( let i = 0 ; i < array . length ; ++ i ) { // we start every iteration of the algorithm by making is_sorted true is_sorted = true ; for ( let j = 0 ; j < array . length - i ; ++ j ) { /** * checks if element (i.e., array[j]) * is smaller than the left neighbor (i.e., array[j - 1]) * * if so, flag is_sorted as false * and swap the element with its neighbor */ if ( array [ j ] < array [ j - 1 ]) { is_sorted = false ; const temp = array [ j ]; array [ j ] = array [ j - 1 ]; array [ j - 1 ] = temp ; } } } console . log ( `Sorted array:` , array ); We can also make the algorithm work such that it only proceeds if there was a swap during that iteration (i.e., is_sorted has turned false). If is_sorted remains true after that iteration, it should indicate that there is nothing else to sort in the array and it is safe to leave the array be. We do this by adding an if statement at the end of the outer for loop which breaks through that loop if is_sorted has remained true. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 const array = [ 10 , - 3 , 55 , - 10 , - 24 , 54 , 0 , - 21 , 8 ]; console . log ( `Unsorted array:` , array ); let is_sorted ; /** * the bubble sort algorithm will continue running * as long as is_sorted is false AFTER each iteration */ for ( let i = 0 ; i < array . length ; ++ i ) { // we start every iteration of the algorithm by making is_sorted true is_sorted = true ; for ( let j = 0 ; j < array . length - i ; ++ j ) { /** * checks if element (i.e., array[j]) * is smaller than the left neighbor (i.e., array[j - 1]) * * if so, flag is_sorted as false * and swap the element with its neighbor */ if ( array [ j ] < array [ j - 1 ]) { is_sorted = false ; const temp = array [ j ]; array [ j ] = array [ j - 1 ]; array [ j - 1 ] = temp ; } } if ( is_sorted ) { break ; } } console . log ( `Sorted array:` , array );","title":"Modifications for Efficiency"},{"location":"lab05/#randomized-array","text":"So far, we've only tested this algorithm on one type of array. We can test this using different arrays to see if it works. Here, we will implement an array of 10 randomized integers between -100 and 100. We start with an empty array and we utilize a for loop to iterate over a set number of times (i.e., ARRAY_SIZE ) to push integers of the aforementioned range. If you would like to try with a larger array size, simply modify the value of ARRAY_SIZE , but be sure to only place in positive integers or this will not work. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 const ARRAY_SIZE = 10 ; const array = []; for ( let i = 0 ; i < ARRAY_SIZE ; ++ i ) { array . push ( Math . floor ( Math . random () * 201 - 100 )); } console . log ( `Unsorted array:` , array ); let is_sorted ; /** * the bubble sort algorithm will continue running * as long as is_sorted is false AFTER each iteration */ for ( let i = 0 ; i < array . length ; ++ i ) { // we start every iteration of the algorithm by making is_sorted true is_sorted = true ; for ( let j = 0 ; j < array . length - i ; ++ j ) { /** * checks if element (i.e., array[j]) * is smaller than the left neighbor (i.e., array[j - 1]) * * if so, flag is_sorted as false * and swap the element with its neighbor */ if ( array [ j ] < array [ j - 1 ]) { is_sorted = false ; const temp = array [ j ]; array [ j ] = array [ j - 1 ]; array [ j - 1 ] = temp ; } } if ( is_sorted ) { break ; } } console . log ( `Sorted array:` , array ); Math.random() produces a decimal value between 0 (inclusive) and 1 (not inclusive). We need to expand this range to cater for all values between -100 and 100 (both inclusive), which totals up to 201 (100 -(-100) + 1). Therefore, we multiply Math.random() by 201, i.e., Math.random() * 201 . This, however, produces numbers between 0 (inclusive) and 201 (exclusive). To shift the range to be between -100 (inclusive) and 101 (exclusive), we deduct that product by 100 (i.e., Math.random() * 201 - 100 ). Still, do note that Math.random() produces decimal values, and Math.random() * 201 - 100 will give any decimal value between -100 and 100 (both inclusive). We use the Math.floor() function to take the floor boundary of the generated value in order to produce that integer. Note that we do not take the ceiling boundary of the generated value (i.e., Math.ceiling() ), as this will give values between -99 and 101 (both inclusive) instead. We also do not use regular rounding off of those decimal values (i.e., Math.round() ), as this gives values between -100 and 101 (both inclusive).","title":"Randomized Array"},{"location":"lab05/#tasks","text":"You may require a little digging online to look up for some solutions for some of these tasks.","title":"Tasks"},{"location":"lab05/#task-1","text":"Create a HTML file that uses JavaScript to carry out the following. Create an external JavaScript file that contains an array named students which contains the following values: 'Anthony', 'Barry', 'Desmond', 'Grenda'. Print the students array in the console. Utilize a for-of loop to display the array elements in the console. Pop the last element in the students array (i.e., Grenda). Hint Use the pop() function. Append the values 'Marie' and 'Zacchaeus' to the end of the students array. Print the array again; you do not need any loop structure this time. Hint Use the push() function. Remove the first value from the students array (i.e., Anthony), and replace it with a new element 'Charlie'. Print the array again; just like last time, you do not need any loop structure here. Hint There exists a shift() function that can do one of the given requirements here. Perhaps there's also an unshift function which does the opposite as well?","title":"Task 1"},{"location":"lab05/#challenge","text":"Use a separate JavaScript file to contain the JavaScript code for this functionality.","title":"Challenge"},{"location":"lab05/#task-2","text":"Create a HTML file that uses embedded JavaScript to carry out the following. Prompt users to enter a year using a prompt box. Set the default value to the current year. After entering the year, the browser window should display the Chinese zodiac animal that corresponds with the given remainder after dividing by 12: Remainder Chinese Zodiac Animal Remainder Chinese Zodiac Animal 0 Monkey 6 Tiger 1 Rooster 7 Rabbit 2 Dog 8 Dragon 3 Pig 9 Snake 4 Rat 10 Horse 5 Ox 11 Sheep Hint Use the modulo/remainder operator (i.e., % ) to determine the remainder from dividing the entered year by 12.","title":"Task 2"},{"location":"lab05/#task-3","text":"The Body Mass Index (BMI) is a measure of health on weight. A person's BMI is calculated by taking the person's weight (in kilograms) divided by the person's height squared (height in meters). \\[ \\text{BMI} = \\frac{\\text{weight}}{\\text{height} \\times \\text{height}} \\] Create a BMI script that takes in both a person's weight and height as values to interpret the person's BMI. The respective BMI interpretations are as follows: BMI Interpretation BMI < 18.5 Underweight 18.5 \u2264 BMI < 25.0 Normal 25.0 \u2264 BMI < 30.0 Overweight BMI \u2265 30.0 Obese You may choose to output the result from the console or via visual elements on your webpage (i.e., print the result in the browser window as a paragraph or regular text).","title":"Task 3"},{"location":"lab05/#task-4","text":"Create a HTML file that uses embedded JavaScript to carry out the following. All output should be displayed in the browser's inspector console. Part 1: Display the numbers between 5 to 22 (inclusive of both) in ascending order using a while loop. Part 2: Display the numbers between -45 to -23 (inclusive of both) in descending order using a for loop. Part 3: In the same HTML file, display the numbers between -14 and 7 (exclusive of both) in descending order using a while loop. Part 4: In the same HTML file, display the even numbers between 208 and 251 (inclusive of both) in descending order using a for loop. Hint Ascending order requires counting up from the smaller number to the larger number. This order should be in reverse for descending order . NOTE: Pay attention to whether the number boundaries are to be included or excluded in your loop structures. If you need to display only the even or odd numbers, consider whether each of these numbers give a remainder of 0 or 1 when divided by 2 (i.e., use the modulo/remainder % operator). 25 % 2 = 1 (25 / 2 = 12 remainder 1) 46 % 2 = 0 (46 / 2 = 23 remainder 0) Use an if statement to check if the remainder is 0 or 1. Based on what the result is, you can make that discernment on whether they need to be printed or not.","title":"Task 4"},{"location":"lab05/#task-5","text":"Create a HTML file that uses JavaScript to carry out the following. You are required to only use the browser's inspector console to generate outputs. Part 1: Create an object named movie which contains the following attributes: title: \"Big Hero 6\" releaseYear: 2014 rating: 7.8 director_1: \"Don Hall\" director_2: \"Chris Williams\" Part 2: Use the for-in loop to iterate through the movie object's attributes, printing them each time. Part 3: In the same for-in loop, implement a check such that only the attributes containing string values are printed in the console.","title":"Task 5"},{"location":"lab06/","text":"Practical 06: JavaScript Functions & HTML DOM Manipulation This rather challenging practical activity exposes how functions can be used within JavaScript, and how it can interact with web elements in the HTML Document Object Model (DOM). Should you require more guidance, there are plenty of online tutorials detailing multiple solutions - it's best if you can explore and test them out to the best of your ability. Getting Started Functions can be tricky to understand in JavaScript, as unlike some languages like Java or C++, the urgency as to when a function needs to return a value or not is never explicitly stated. Function declarations in JavaScript follow the given syntax: function functionNameHere ( param_1 , param_2 , ..., param_n ) { } The items you include in the round parentheses are referred to as parameters. Sometimes, parameters are required to carry out a function's intended purpose(s). For example, the following function makes use of two number values with intentions to produce the sum after totalling them up. function addition ( number1 , number2 ) { // number addition logic here } The following function, however, does not require any parameter values to display a greeting message, and thus has no parameters associated with it. function greeting () { console . log ( \"Hello World!\" ); } It is imperative to know that there is no such rule that states how many parameters EVERY function needs to have. The number of parameters any function should contain solely lies on any need to depend on any external value(s) to properly carry out its.. well, function. Sometimes, functions can also be used to return values as the last step in completing their purpose(s). In such cases, a return statement is invoked from the function (not necesarily at the end all the time, but merely a traditional thing). For instance, let's refer to the addition function from earlier again. Upon calculating the sum of the two numbers, depending on how you are to present your output, you can choose to have the function just print the sum out or return it out of the function as a form of output at the line that spawned its use. Here's how it will look like if the main idea is to solely print out the sum of the two numbers from within the function: function addition ( number1 , number2 ) { let sum = number1 + number2 ; console . log ( `The sum of the two numbers is ${ sum } .` ); } Here's another variation of the same function, with the main difference being that it returns the sum at the end. function addition ( number1 , number2 ) { let sum = number1 + number2 ; return sum ; // return statement } Admittedly, this may seem relatively confusing as compared to implementing functions in other programming languages like C or Java where one can tell if a function is to return a value or not. For instance, in these two languages the data type of the intended return value is to be explicitly stated in the function declaration itself, or void if it's supposed to not return anything at all. However, just by knowing how you want to craft your function based on the set requirements should be able to provide enough information to keep you going here. Warm-up For each of the following purposes, determine if the function to be created to simulate such should make use of any parameters or not. If so, name them and describe how they will be used in your supposed function. As practice, you may also consider developing these functions with these plans in mind to be used with a HTML page. You may name your parameter(s) and/or function(s) as you please, but preferably with respect to their meaningfulness. This function delivers a greeting based on a provided language from a list of available languages. Model Answer function greeting ( language ) This can be interpreted in many ways - the language can be provided by being passed into the function (e.g., via a prompt box), or the function can have a mechanism in it that will obtain that language value from a drop-down list element, for instance. In the latter case, we can safely omit the language parameter from the function declaration. This function prints out the first 20 numbers in a sequence dictated by an already preset Maclaurin series expression. For testing purposes, you can use the common Maclaurin function: \\[ \\frac{1}{1-x} = 1 + x + x^2 + x^3 + x^4 + ... \\] Use x = 1 to x = 20 in this function. Model Answer function printMaclaurin () The description states a preset number of terms to be printed (i.e., 20), so this value need not be put in as a parameter to the function. This function gathers two strings to check if the first letter in each one match regardless of case. Model Answer function firstLetterMatch ( string1 , string2 ) Two strings are needed from the user, so it only seems right to have them provided as parameters in this case. This function retrieves the user input from a HTML <input> field to prepare an array of distinct characters used in said input. Model Answer function userInputToArray () The description mentions that the user input is to be retrieved from a HTML <input> field, so there is no need to pass it in as a function parameter. This function calculates the age of a person, place, or object by using its year of origin/date of birth/etc. and the current year during use. Model Answer function calculateAge ( year ) Just like the first one, this description does not make clear of how the year of origin/date of birth/etc. is to be obtained from the user. You can have the function read the HTML element's value from within the function, or get the user to enter it from a prompt box. In the earlier case, you don't need the year to be passed in as a parameter. Tasks: HTML DOM Task 1 Drivers who are 16 years of age and older can apply for driving a license online. The government webpage code requires applicants to enter their age and then checks if they are old enough to apply. The following code captures the applicant's age. When the applicant clicks the 'Check now' button the age is first checked to ensure that it is numeric. The age is then checked to see if the applicant is old enough. Suitable messages are displayed as a result of the checks. Part 1: Create an empty webpage with the following HTML scripts inside the <body> section. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 < p > You can apply for a license to drive when you are 16 years old. </ p > < p > To check if you are old enough to drive, input your age and click the button: </ p > < input type = \"number\" id = \"ageNow\" /> < button onclick = \"checkAgeFunction()\" > Check now </ button > < p id = \"ageCheck\" ></ p > < script type = \"text/javascript\" > function checkAgeFunction () { /* ---- INSERT CODE HERE ---- */ /* ---- END INSERT CODE ---- */ document . getElementById ( \"ageCheck\" ). innerHTML = canApply ; } </ script > Part 2: Complete the code for checkAgeFunction() that checks the age entered by the applicant and displays an appropriate response. Tasks: Functions Task 1 Create a HTML file that uses embedded JavaScript to carry out the following. Create a function called arrayFromRange() which creates an array of integers between and including the two numbers that are passed into the function. Example: arrayFromRange ( 5 , 10 ); // this should return [5, 6, 7, 8, 9, 10] arrayFromRange ( - 10 , - 4 ); // this should return [-10, -9, -8, -7, -6, -5, -4]; After creating the function, add another line of JavaScript code at the very end of the <script> element to invoke the created function. Task 2 Create a HTML file that uses embedded JavaScript to carry out the following. You are required to only use the browser's inspector console to generate outputs. Part 1 Create a function that takes two numbers and returns the maximum of the two. ( NOTE: If the two numbers are the same, the function should return the same number.) Part 2 Create a function that takes in a circle's radius value and returns the area of the circle with that radius. Task 3 Part 1 Create a HTML file using external JavaScript that has the following interface. Do NOT use the <form> element to encapsulate the input elements. NOTE: You may assume A, B and C as the id s of the input fields. Do NOT put these letters as default values. Applying them as placeholder text is permissible. Part 2 In the external JavaScript file, create a function called multiply() which will multiply the values of A and B (i.e., \\(A \\times B\\) ), and then display the return value at C once the * button is clicked. Part 3 In the same external JavaScript file, create a function called divide() which will divide the values of A and B (i.e., \\(A \\div B\\) ), and then display the return value at C once the / button is clicked. Part 4 In the same external JavaScript file, create a function called modulo() which will retrieve the remainder after dividing the values of A and B, and then display the return value at C once the % button is clicked. Part 5 In the same external JavaScript file, create a function called exp() which will produce the value of \\(A^B\\) , and then display the return value at C once the ^ button is clicked. Challenge Tasks Challenge Task 1 Create a HTML file that uses external JavaScript to carry out the following. Part 1: In the <body> section, create a single paragraph <p> element with an id value \"result\" containing the text: \"The FizzBuzz Test\". Part 2: Add a <script> tag referencing a JavaScript file called fizzbuzz.js . Part 3: Create the fizzbuzz.js JavaScript file. It should contain the following code snippet: function fizzBuzz ( input ) { /* ---- CONTINUE CODE FROM HERE ---- */ } const number = 15 ; // edit this constant value to test fizzBuzz() document . getElementById ( \"result\" ). innerHTML = fizzBuzz ( number ); The last line makes it such that the value obtained from the fizzBuzz() function is appended into the <p> element with id \"result\" . Part 4: Complete the fizzBuzz() function such that it return \"Fizz\" if the number is divisible by 3, and \"Buzz\" if it is divisible by 5. If the number is divisible by both 3 and 5, fizzBuzz() should return \"FizzBuzz\". If the number is not divisible by 3 or 5, fizzBuzz() should return the value stored in the used input parameter. // Examples fizzBuzz ( 3 ); // it should return \"Fizz\" fizzBuzz ( 10 ); // it should return \"Buzz\" fizzBuzz ( 30 ); // it should return \"FizzBuzz\" fizzBuzz ( 31 ); // it should return 31 Note Do NOT use document.write() or console.log() in the function. You are required to use the return statement instead. Part 5: Implement a check to see if input is a number or not. If the input is not a number (e.g. string, Boolean), it should print \"Not a number\". This needs to be checked first before determining its divisibility. // these should return \"Not a number\" fizzBuzz ( \"3\" ); fizzBuzz ( false ); Hint Use the typeof operator to check the variable's type. Challenge Task 2 Create a HTML file that uses embedded JavaScript to carry out the following. Part 1: Create a <script> element located in the <head> section containing the following code snippet: 1 2 3 4 5 6 function showPrimes ( limit ) { for ( let number = 2 ; number <= limit ; ++ number ) { let isPrime = true ; /* ---- CONTINUE CODE FROM HERE ---- */ } } The given code snippet depicts a function named showPrimes which takes in a parameter value called limit . Part 2: In the <body> section, create another <script> element containing the following line: showPrimes ( 20 );","title":"Practical 06: JavaScript Functions & HTML DOM Manipulation"},{"location":"lab06/#practical-06-javascript-functions-html-dom-manipulation","text":"This rather challenging practical activity exposes how functions can be used within JavaScript, and how it can interact with web elements in the HTML Document Object Model (DOM). Should you require more guidance, there are plenty of online tutorials detailing multiple solutions - it's best if you can explore and test them out to the best of your ability.","title":"Practical 06: JavaScript Functions &amp; HTML DOM Manipulation"},{"location":"lab06/#getting-started","text":"Functions can be tricky to understand in JavaScript, as unlike some languages like Java or C++, the urgency as to when a function needs to return a value or not is never explicitly stated. Function declarations in JavaScript follow the given syntax: function functionNameHere ( param_1 , param_2 , ..., param_n ) { } The items you include in the round parentheses are referred to as parameters. Sometimes, parameters are required to carry out a function's intended purpose(s). For example, the following function makes use of two number values with intentions to produce the sum after totalling them up. function addition ( number1 , number2 ) { // number addition logic here } The following function, however, does not require any parameter values to display a greeting message, and thus has no parameters associated with it. function greeting () { console . log ( \"Hello World!\" ); } It is imperative to know that there is no such rule that states how many parameters EVERY function needs to have. The number of parameters any function should contain solely lies on any need to depend on any external value(s) to properly carry out its.. well, function. Sometimes, functions can also be used to return values as the last step in completing their purpose(s). In such cases, a return statement is invoked from the function (not necesarily at the end all the time, but merely a traditional thing). For instance, let's refer to the addition function from earlier again. Upon calculating the sum of the two numbers, depending on how you are to present your output, you can choose to have the function just print the sum out or return it out of the function as a form of output at the line that spawned its use. Here's how it will look like if the main idea is to solely print out the sum of the two numbers from within the function: function addition ( number1 , number2 ) { let sum = number1 + number2 ; console . log ( `The sum of the two numbers is ${ sum } .` ); } Here's another variation of the same function, with the main difference being that it returns the sum at the end. function addition ( number1 , number2 ) { let sum = number1 + number2 ; return sum ; // return statement } Admittedly, this may seem relatively confusing as compared to implementing functions in other programming languages like C or Java where one can tell if a function is to return a value or not. For instance, in these two languages the data type of the intended return value is to be explicitly stated in the function declaration itself, or void if it's supposed to not return anything at all. However, just by knowing how you want to craft your function based on the set requirements should be able to provide enough information to keep you going here.","title":"Getting Started"},{"location":"lab06/#warm-up","text":"For each of the following purposes, determine if the function to be created to simulate such should make use of any parameters or not. If so, name them and describe how they will be used in your supposed function. As practice, you may also consider developing these functions with these plans in mind to be used with a HTML page. You may name your parameter(s) and/or function(s) as you please, but preferably with respect to their meaningfulness. This function delivers a greeting based on a provided language from a list of available languages. Model Answer function greeting ( language ) This can be interpreted in many ways - the language can be provided by being passed into the function (e.g., via a prompt box), or the function can have a mechanism in it that will obtain that language value from a drop-down list element, for instance. In the latter case, we can safely omit the language parameter from the function declaration. This function prints out the first 20 numbers in a sequence dictated by an already preset Maclaurin series expression. For testing purposes, you can use the common Maclaurin function: \\[ \\frac{1}{1-x} = 1 + x + x^2 + x^3 + x^4 + ... \\] Use x = 1 to x = 20 in this function. Model Answer function printMaclaurin () The description states a preset number of terms to be printed (i.e., 20), so this value need not be put in as a parameter to the function. This function gathers two strings to check if the first letter in each one match regardless of case. Model Answer function firstLetterMatch ( string1 , string2 ) Two strings are needed from the user, so it only seems right to have them provided as parameters in this case. This function retrieves the user input from a HTML <input> field to prepare an array of distinct characters used in said input. Model Answer function userInputToArray () The description mentions that the user input is to be retrieved from a HTML <input> field, so there is no need to pass it in as a function parameter. This function calculates the age of a person, place, or object by using its year of origin/date of birth/etc. and the current year during use. Model Answer function calculateAge ( year ) Just like the first one, this description does not make clear of how the year of origin/date of birth/etc. is to be obtained from the user. You can have the function read the HTML element's value from within the function, or get the user to enter it from a prompt box. In the earlier case, you don't need the year to be passed in as a parameter.","title":"Warm-up"},{"location":"lab06/#tasks-html-dom","text":"","title":"Tasks: HTML DOM"},{"location":"lab06/#task-1","text":"Drivers who are 16 years of age and older can apply for driving a license online. The government webpage code requires applicants to enter their age and then checks if they are old enough to apply. The following code captures the applicant's age. When the applicant clicks the 'Check now' button the age is first checked to ensure that it is numeric. The age is then checked to see if the applicant is old enough. Suitable messages are displayed as a result of the checks. Part 1: Create an empty webpage with the following HTML scripts inside the <body> section. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 < p > You can apply for a license to drive when you are 16 years old. </ p > < p > To check if you are old enough to drive, input your age and click the button: </ p > < input type = \"number\" id = \"ageNow\" /> < button onclick = \"checkAgeFunction()\" > Check now </ button > < p id = \"ageCheck\" ></ p > < script type = \"text/javascript\" > function checkAgeFunction () { /* ---- INSERT CODE HERE ---- */ /* ---- END INSERT CODE ---- */ document . getElementById ( \"ageCheck\" ). innerHTML = canApply ; } </ script > Part 2: Complete the code for checkAgeFunction() that checks the age entered by the applicant and displays an appropriate response.","title":"Task 1"},{"location":"lab06/#tasks-functions","text":"","title":"Tasks: Functions"},{"location":"lab06/#task-1_1","text":"Create a HTML file that uses embedded JavaScript to carry out the following. Create a function called arrayFromRange() which creates an array of integers between and including the two numbers that are passed into the function. Example: arrayFromRange ( 5 , 10 ); // this should return [5, 6, 7, 8, 9, 10] arrayFromRange ( - 10 , - 4 ); // this should return [-10, -9, -8, -7, -6, -5, -4]; After creating the function, add another line of JavaScript code at the very end of the <script> element to invoke the created function.","title":"Task 1"},{"location":"lab06/#task-2","text":"Create a HTML file that uses embedded JavaScript to carry out the following. You are required to only use the browser's inspector console to generate outputs.","title":"Task 2"},{"location":"lab06/#part-1","text":"Create a function that takes two numbers and returns the maximum of the two. ( NOTE: If the two numbers are the same, the function should return the same number.)","title":"Part 1"},{"location":"lab06/#part-2","text":"Create a function that takes in a circle's radius value and returns the area of the circle with that radius.","title":"Part 2"},{"location":"lab06/#task-3","text":"","title":"Task 3"},{"location":"lab06/#part-1_1","text":"Create a HTML file using external JavaScript that has the following interface. Do NOT use the <form> element to encapsulate the input elements. NOTE: You may assume A, B and C as the id s of the input fields. Do NOT put these letters as default values. Applying them as placeholder text is permissible.","title":"Part 1"},{"location":"lab06/#part-2_1","text":"In the external JavaScript file, create a function called multiply() which will multiply the values of A and B (i.e., \\(A \\times B\\) ), and then display the return value at C once the * button is clicked.","title":"Part 2"},{"location":"lab06/#part-3","text":"In the same external JavaScript file, create a function called divide() which will divide the values of A and B (i.e., \\(A \\div B\\) ), and then display the return value at C once the / button is clicked.","title":"Part 3"},{"location":"lab06/#part-4","text":"In the same external JavaScript file, create a function called modulo() which will retrieve the remainder after dividing the values of A and B, and then display the return value at C once the % button is clicked.","title":"Part 4"},{"location":"lab06/#part-5","text":"In the same external JavaScript file, create a function called exp() which will produce the value of \\(A^B\\) , and then display the return value at C once the ^ button is clicked.","title":"Part 5"},{"location":"lab06/#challenge-tasks","text":"","title":"Challenge Tasks"},{"location":"lab06/#challenge-task-1","text":"Create a HTML file that uses external JavaScript to carry out the following. Part 1: In the <body> section, create a single paragraph <p> element with an id value \"result\" containing the text: \"The FizzBuzz Test\". Part 2: Add a <script> tag referencing a JavaScript file called fizzbuzz.js . Part 3: Create the fizzbuzz.js JavaScript file. It should contain the following code snippet: function fizzBuzz ( input ) { /* ---- CONTINUE CODE FROM HERE ---- */ } const number = 15 ; // edit this constant value to test fizzBuzz() document . getElementById ( \"result\" ). innerHTML = fizzBuzz ( number ); The last line makes it such that the value obtained from the fizzBuzz() function is appended into the <p> element with id \"result\" . Part 4: Complete the fizzBuzz() function such that it return \"Fizz\" if the number is divisible by 3, and \"Buzz\" if it is divisible by 5. If the number is divisible by both 3 and 5, fizzBuzz() should return \"FizzBuzz\". If the number is not divisible by 3 or 5, fizzBuzz() should return the value stored in the used input parameter. // Examples fizzBuzz ( 3 ); // it should return \"Fizz\" fizzBuzz ( 10 ); // it should return \"Buzz\" fizzBuzz ( 30 ); // it should return \"FizzBuzz\" fizzBuzz ( 31 ); // it should return 31 Note Do NOT use document.write() or console.log() in the function. You are required to use the return statement instead. Part 5: Implement a check to see if input is a number or not. If the input is not a number (e.g. string, Boolean), it should print \"Not a number\". This needs to be checked first before determining its divisibility. // these should return \"Not a number\" fizzBuzz ( \"3\" ); fizzBuzz ( false ); Hint Use the typeof operator to check the variable's type.","title":"Challenge Task 1"},{"location":"lab06/#challenge-task-2","text":"Create a HTML file that uses embedded JavaScript to carry out the following. Part 1: Create a <script> element located in the <head> section containing the following code snippet: 1 2 3 4 5 6 function showPrimes ( limit ) { for ( let number = 2 ; number <= limit ; ++ number ) { let isPrime = true ; /* ---- CONTINUE CODE FROM HERE ---- */ } } The given code snippet depicts a function named showPrimes which takes in a parameter value called limit . Part 2: In the <body> section, create another <script> element containing the following line: showPrimes ( 20 );","title":"Challenge Task 2"},{"location":"lab07/","text":"Practical 07: Extra JavaScript Activities This practical contains two intermediate-level activities that will hopefully help you strengthen your understanding with JavaScript. Don't worry, these two activities are merely code-alongs; you'll be guided every step of the way from preparations to the end. Similar to the format of your consequent practical sessions themed after PHP and Databases, you may be asked to prepare beforehand by having a few files on the ready. These files are not the main focus of the activity, but rather a common starting point can be ensured before starting with the code-along walkthrough. Activity 1: Multiplication Table School teachers are often advised to look for creative methods into their lessons in order to help engage with students better or help students learn concepts easier with different methods. The multiplication box is one of many creative methods concocted by elementary school math teachers to help students understand multiplication between two-digit numbers (i.e., integer values). CLICK HERE TO ACCESS ACTIVITY 1 Activity 2: Mark Demo This intermediate-level activity will provide a guide as to how you can effectively use program control structures to skillfully loop through the same calculation process with different sets of inputs at a time. CLICK HERE TO ACCESS ACTIVITY 2","title":"Practical 07 Menu"},{"location":"lab07/#practical-07-extra-javascript-activities","text":"This practical contains two intermediate-level activities that will hopefully help you strengthen your understanding with JavaScript. Don't worry, these two activities are merely code-alongs; you'll be guided every step of the way from preparations to the end. Similar to the format of your consequent practical sessions themed after PHP and Databases, you may be asked to prepare beforehand by having a few files on the ready. These files are not the main focus of the activity, but rather a common starting point can be ensured before starting with the code-along walkthrough.","title":"Practical 07: Extra JavaScript Activities"},{"location":"lab07/#activity-1-multiplication-table","text":"School teachers are often advised to look for creative methods into their lessons in order to help engage with students better or help students learn concepts easier with different methods. The multiplication box is one of many creative methods concocted by elementary school math teachers to help students understand multiplication between two-digit numbers (i.e., integer values). CLICK HERE TO ACCESS ACTIVITY 1","title":"Activity 1: Multiplication Table"},{"location":"lab07/#activity-2-mark-demo","text":"This intermediate-level activity will provide a guide as to how you can effectively use program control structures to skillfully loop through the same calculation process with different sets of inputs at a time. CLICK HERE TO ACCESS ACTIVITY 2","title":"Activity 2: Mark Demo"},{"location":"lab07A/","text":"Practical 07 (Activity 1): Multiplication Table Preparation CSS and JS files are to be kept in their own separate subfolders. css/style.css 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 @ import url ( \"https://fonts.googleapis.com/css2?family=Plus+Jakarta+Sans:ital,wght@0,200;0,300;0,400;0,500;0,600;0,700;0,800;1,200;1,300;1,400;1,500;1,600;1,700;1,800&display=swap\" ) ; : root { --table-cell-dimension : 100 px ; --text-size : 32 px ; } * { font-family : \"Plus Jakarta Sans\" , sans-serif ; } body { padding-top : 2 rem ; text-align : center ; } h1 { font-size : 48 px ; } # num_entry , # num_entry input [ type = \"number\" ] { font-size : var ( --text-size ); margin-bottom : 1 rem ; } # num_entry input [ type = \"number\" ] { text-align : center ; width : var ( --table-cell-dimension ); } input [ type = \"number\" ] : disabled { background-color : white ; border : 2 px solid black ; cursor : not-allowed ; } /* For Chrome, Safari, Edge, Opera */ input :: -webkit-outer-spin-button , input :: -webkit-inner-spin-button { -webkit- appearance : none ; margin : 0 ; } /* For Firefox */ input [ type = \"number\" ] { -moz- appearance : textfield ; } input [ type = \"button\" ] { font-size : 20 px ; padding : 0.5 rem 1 rem ; } hr { margin : 2 rem 0 ; } table # multiplication-box { /* border: 1px solid black; */ border-collapse : collapse ; display : inline-block ; margin-left : auto ; } table # multiplication-box th , table # multiplication-box td : not ( . td-hidden ) { border : 1 px solid black ; font-size : var ( --text-size ); height : var ( --table-cell-dimension ); width : var ( --table-cell-dimension ); } index.html 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" /> < meta http-equiv = \"X-UA-Compatible\" content = \"IE=edge\" /> < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" /> < title > Multiplication Box </ title > < link rel = \"stylesheet\" href = \"css/style.css\" /> </ head > < body > < h1 > Multiplication Box </ h1 > < p > Multiplies 2-digit numbers together. </ p > < section id = \"num_entry\" > < input type = \"number\" name = \"num1\" id = \"num1\" min = \"10\" max = \"99\" /> &times; < input type = \"number\" name = \"num2\" id = \"num2\" min = \"10\" max = \"99\" /> = < input type = \"number\" name = \"answer\" id = \"numAns\" min = \"10\" max = \"99\" readonly /> </ section > <!-- /section#num_entry --> < input type = \"button\" value = \"Multiply\" onclick = \"multiply();\" /> < hr /> < table id = \"multiplication-box\" > < tr > < td class = \"td-hidden\" ></ td > < td class = \"td-hidden\" ></ td > < th id = \"num1_show\" colspan = \"2\" ></ th > </ tr > < tr > < td class = \"td-hidden\" ></ td > < th > &times; </ th > < th id = \"num1a\" ></ th > < th id = \"num1b\" ></ th > </ tr > < tr > < th id = \"num2_show\" rowspan = \"2\" ></ th > < th id = \"num2a\" ></ th > < td id = \"m1\" ></ td > < td id = \"m2\" ></ td > < td id = \"m1_m2\" ></ td > </ tr > < tr > < th id = \"num2b\" ></ th > < td id = \"m3\" ></ td > < td id = \"m4\" ></ td > < td id = \"m3_m4\" ></ td > </ tr > < tr > < td class = \"td-hidden\" colspan = \"2\" ></ td > < td id = \"m1_m3\" ></ td > < td id = \"m2_m4\" ></ td > < th id = \"m_total\" ></ th > </ tr > </ table > <!-- /table#multiplication-box --> < script src = \"js/times-box.js\" ></ script > </ body > </ html > times-box.js 1 2 3 function multiply () { // to include code here } You should be able to see the following in your web browser: Multiplication Box Page Motivation School teachers are often advised to look for creative methods into their lessons in order to help engage with students better or help students learn concepts easier with different methods. The multiplication box is one of many creative methods concocted by elementary school math teachers to help students understand multiplication between two-digit numbers (i.e., integer values). This method involves separating both numbers into tens and units, and then multiplying them separately before adding their horizontal and vertical totals up. The cell at the bottom right denotes the eventual product between the two numbers. For instance, with \\(49 \\times 16\\) , both numbers are separated as the pairs (40, 9) and (10, 6) respectively. The following multiplication operations are then carried out first: \\(40 \\times 10 = 400\\) \\(40 \\times 6 = 240\\) \\(9 \\times 10 = 90\\) \\(9 \\times 6 = 54\\) The numbers are populated as shown in the figure below, where their horizontal totals and vertical totals are calculated and displayed. Between both sets of totals, they produce the same correct product after being added together (i.e., \\(490 + 294 = 640 + 144 = 784\\) ). Multiplication Box Page Take note that the only input fields of concern are the three which make up the equation on top of the multiply button, which is associated with the JavaScript multiply() function we will be completing in this activity. Only the first two are allowed to be populated manually by the user. The third representing the calculated product is set to be read-only . Step 1: Obtaining Values from Input Fields Let's work on obtaining the values entered into the first two input fields. The first two lines in the multiply() function is used to obtain the values from input fields input#num1 and input#num2 . times-box.js 1 2 3 4 function multiply () { let num1 = parseInt ( document . querySelector ( \"#num1\" ). value ); let num2 = parseInt ( document . querySelector ( \"#num2\" ). value ); } TIP: Using .innerHTML or .value When Retrieving Values TL;DR: In nearly all cases, .value is only used with <input> whilst .innerHTML is for getting values from any non-self-closing tags. Let's take a <p> element, for example. < p > Content/text/etc. inside here </ p > The content placed in between the opening <p> and closing </p> tags is what we refer to as inner HTML. Therefore, we use .innerHTML to obtain values that are stored in between similarly structured HTML tags. document . querySelector ( \"p\" ). innerHTML However, when it comes to <input> elements, these are represented with self-closing tags. Thus, there isn't really any inner HTML to target. <input> elements do have the a value attribute that contains entered text, though. In this case, it only makes sense to use .value to elicit values out of <input> fields. document . querySelector ( \"input\" ). innerHTML // does not work document . querySelector ( \"input\" ). value // use this for <input> elements instead Here, we observe that the parseInt() function is applied surrounding the expression used to obtain the value from input#num1 and input#num2 . This function ensures that an integer is obtained from the <input> elements, as the value obtained from them typically defaults to being of a \"string\" type. Before we proceed to use these values we've entered, we're going to implement a few checks to see if the numbers entered are two-digit integers . This means that: none of the two input fields (i.e., input#num1 and input#num2 ) should be empty no non-integer values or any value outside of the 10-99 range can be entered The first criterion is pretty straightforward - we check to see if the value of input#num1 and/or input#num2 results in an empty string (i.e., \"\" ). To implement the second criterion, we'll be using the sister variant function of parseInt() called parseFloat() . While parseInt() obtains an integer from the passed in string (in this case the value of the <input> field), parseFloat() obtains any number (with decimal points) from the passed in string. In summary, Function \"17\" \"17.5\" \"17as\" \"17.5as\" \"as17\" \"asap\" parseInt() 17 17 17 17 NaN Nan parseFloat() 17 17.5 17 17.5 NaN Nan From the table above, we can probably tell that parseFloat(\"17.5\") !== parseInt(\"17.5\") . We use this idea here to determine if the input number in either input#num1 or input#num2 or both are not integers, and then we proceed to replace them with the integer obtained after using the parseInt() function. For both criteria, we use an alert box to alert the user of any problems found. times-box.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 function multiply () { let num1 = parseInt ( document . querySelector ( \"#num1\" ). value ); let num2 = parseInt ( document . querySelector ( \"#num2\" ). value ); // replace num1 and num2 with parsed integer (if not integers) // alert user when number is replaced if ( parseFloat ( document . querySelector ( \"#num1\" ). value ) !== parseInt ( document . querySelector ( \"#num1\" ). value )) { if ( document . querySelector ( \"#num1\" ). value == \"\" ) { alert ( \"First number input is empty.\" ); } else { alert ( \"First number isn't an integer. Replacing value at input field with parsed integer value instead.\" ); document . querySelector ( \"#num1\" ). value = num1 ; } } if ( parseFloat ( document . querySelector ( \"#num2\" ). value ) !== parseInt ( document . querySelector ( \"#num2\" ). value )) { if ( document . querySelector ( \"#num2\" ). value == \"\" ) { alert ( \"Second number input is empty.\" ); } else { alert ( \"Second number isn't an integer. Replacing value at input field with parsed integer value instead.\" ); document . querySelector ( \"#num2\" ). value = num2 ; } } } Alert box pop-up if first number has not been entered. Alert box pop-up if second number has not been entered. Alert box pop-up if first number is not an integer. Alert box pop-up if second number is not an integer. Step 2: Checking Validity of Input Integers Now, onward to checking whether the input integers (i.e., num1 and num2 ) are within the correct range. A two-digit integer can only be either one of the numbers between 10 and 99; the rest of which simply will not fit. For the sake of simplicity, we will only consider positive values. We implement this check using a compound condition of 4 conditions to be met simultaneously: num1 >= 10 num1 <= 99 num2 >= 10 num2 <= 99 If all four of these conditions are met, we proceed to display num1 and num2 in td#num1_show and td#num2_show respectively. We will expand on the further logic to be implemented from here. Otherwise, we check to see either num1 < 10 || num1 > 99 or num2 < 10 || num2 > 99 , and display an appropriate error message in an alert box. times-box.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 function multiply () { let num1 = parseInt ( document . querySelector ( \"#num1\" ). value ); let num2 = parseInt ( document . querySelector ( \"#num2\" ). value ); // replace num1 and num2 with parsed integer (if not integers) // alert user when number is replaced if ( parseFloat ( document . querySelector ( \"#num1\" ). value ) !== parseInt ( document . querySelector ( \"#num1\" ). value )) { if ( document . querySelector ( \"#num1\" ). value == \"\" ) { alert ( \"First number input is empty.\" ); } else { alert ( \"First number isn't an integer. Replacing value at input field with parsed integer value instead.\" ); document . querySelector ( \"#num1\" ). value = num1 ; } } if ( parseFloat ( document . querySelector ( \"#num2\" ). value ) !== parseInt ( document . querySelector ( \"#num2\" ). value )) { if ( document . querySelector ( \"#num2\" ). value == \"\" ) { alert ( \"Second number input is empty.\" ); } else { alert ( \"Second number isn't an integer. Replacing value at input field with parsed integer value instead.\" ); document . querySelector ( \"#num2\" ). value = num2 ; } } // check if num1 and num2 is between 10 and 99 (inclusive) if ( num1 >= 10 && num1 <= 99 && num2 >= 10 && num2 <= 99 ) { // show number in num?_show document . querySelector ( \"#num1_show\" ). innerHTML = num1 ; document . querySelector ( \"#num2_show\" ). innerHTML = num2 ; // to continue more here } else { // if first number is not between 10 and 99 (inclusive) if ( num1 < 10 || num1 > 99 ) { alert ( \"First number should be between 10 and 99!\" ); document . querySelector ( \"#num1\" ). value = \"\" ; // empty first input field } // if secondnumber is not between 10 and 99 (inclusive) if ( num2 < 10 || num2 > 99 ) { alert ( \"Second number should be between 10 and 99!\" ); document . querySelector ( \"#num2\" ). value = \"\" ; // empty second input field } } } Alert box pop-up if first number is not between 10 and 99 (inclusive). Alert box pop-up if second number is not between 10 and 99 (inclusive). Otherwise, your multiplication table should start being populated from here. Step 3: Populating the Table: Tens and Units Split The key ideas behind using the multiplication box/table as shown here is to split the two-digit numbers into the tens and units places. In order to elicit the tens digit from the number, we simply obtain the quotient after dividing it by 10. This quotient is then passed into one of the Math functions, namely the floor() function which rounds down a number to the lower boundary (e.g., 3.4 to 3, and 4.9 to 4). The units digit is obtained simply by using the modulo operator on the number; basically, what the remainder is after dividing the number by 10. These values are then stored contiguously in an array for each number (e.g., \\(49 \\times 16\\) produces [4, 9] and [1, 6] ). Each of these digit are then placed in the respective cells: td#num1a , td#num1b , td#num2a , td#num2b . times-box.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 function multiply () { let num1 = parseInt ( document . querySelector ( \"#num1\" ). value ); let num2 = parseInt ( document . querySelector ( \"#num2\" ). value ); // replace num1 and num2 with parsed integer (if not integers) // alert user when number is replaced if ( parseFloat ( document . querySelector ( \"#num1\" ). value ) !== parseInt ( document . querySelector ( \"#num1\" ). value )) { if ( document . querySelector ( \"#num1\" ). value == \"\" ) { alert ( \"First number input is empty.\" ); } else { alert ( \"First number isn't an integer. Replacing value at input field with parsed integer value instead.\" ); document . querySelector ( \"#num1\" ). value = num1 ; } } if ( parseFloat ( document . querySelector ( \"#num2\" ). value ) !== parseInt ( document . querySelector ( \"#num2\" ). value )) { if ( document . querySelector ( \"#num2\" ). value == \"\" ) { alert ( \"Second number input is empty.\" ); } else { alert ( \"Second number isn't an integer. Replacing value at input field with parsed integer value instead.\" ); document . querySelector ( \"#num2\" ). value = num2 ; } } // check if num1 and num2 is between 10 and 99 (inclusive) if ( num1 >= 10 && num1 <= 99 && num2 >= 10 && num2 <= 99 ) { // show number in num?_show document . querySelector ( \"#num1_show\" ). innerHTML = num1 ; document . querySelector ( \"#num2_show\" ). innerHTML = num2 ; // split number into digits based on tens and units value let arr_num1 = [ Math . floor ( num1 / 10 ) * 10 , num1 % 10 ]; let arr_num2 = [ Math . floor ( num2 / 10 ) * 10 , num2 % 10 ]; // show digits in num?a or num?b document . querySelector ( \"#num1a\" ). innerHTML = arr_num1 [ 0 ]; document . querySelector ( \"#num1b\" ). innerHTML = arr_num1 [ 1 ]; document . querySelector ( \"#num2a\" ). innerHTML = arr_num2 [ 0 ]; document . querySelector ( \"#num2b\" ). innerHTML = arr_num2 [ 1 ]; // to continue more here } else { // if first number is not between 10 and 99 (inclusive) if ( num1 < 10 || num1 > 99 ) { alert ( \"First number should be between 10 and 99!\" ); document . querySelector ( \"#num1\" ). value = \"\" ; // empty first input field } // if secondnumber is not between 10 and 99 (inclusive) if ( num2 < 10 || num2 > 99 ) { alert ( \"Second number should be between 10 and 99!\" ); document . querySelector ( \"#num2\" ). value = \"\" ; // empty second input field } } } Your function should now produce this result after clicking the button. Step 4: Populating the Table: Calculating Intermediary Products By splitting both numbers into the tens and units digits, we can now carry out the following intermediary multiplications operations (taking \\(49 \\times 16\\) for example): \\(40 \\times 10 = 400\\) \\(40 \\times 6 = 240\\) \\(9 \\times 10 = 90\\) \\(9 \\times 6 = 54\\) Each of these products are placed like as shown in the following output. times-box.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 function multiply () { let num1 = parseInt ( document . querySelector ( \"#num1\" ). value ); let num2 = parseInt ( document . querySelector ( \"#num2\" ). value ); // replace num1 and num2 with parsed integer (if not integers) // alert user when number is replaced if ( parseFloat ( document . querySelector ( \"#num1\" ). value ) !== parseInt ( document . querySelector ( \"#num1\" ). value )) { if ( document . querySelector ( \"#num1\" ). value == \"\" ) { alert ( \"First number input is empty.\" ); } else { alert ( \"First number isn't an integer. Replacing value at input field with parsed integer value instead.\" ); document . querySelector ( \"#num1\" ). value = num1 ; } } if ( parseFloat ( document . querySelector ( \"#num2\" ). value ) !== parseInt ( document . querySelector ( \"#num2\" ). value )) { if ( document . querySelector ( \"#num2\" ). value == \"\" ) { alert ( \"Second number input is empty.\" ); } else { alert ( \"Second number isn't an integer. Replacing value at input field with parsed integer value instead.\" ); document . querySelector ( \"#num2\" ). value = num2 ; } } // check if num1 and num2 is between 10 and 99 (inclusive) if ( num1 >= 10 && num1 <= 99 && num2 >= 10 && num2 <= 99 ) { // show number in num?_show document . querySelector ( \"#num1_show\" ). innerHTML = num1 ; document . querySelector ( \"#num2_show\" ). innerHTML = num2 ; // split number into digits based on tens and units value let arr_num1 = [ Math . floor ( num1 / 10 ) * 10 , num1 % 10 ]; let arr_num2 = [ Math . floor ( num2 / 10 ) * 10 , num2 % 10 ]; // show digits in num?a or num?b document . querySelector ( \"#num1a\" ). innerHTML = arr_num1 [ 0 ]; document . querySelector ( \"#num1b\" ). innerHTML = arr_num1 [ 1 ]; document . querySelector ( \"#num2a\" ). innerHTML = arr_num2 [ 0 ]; document . querySelector ( \"#num2b\" ). innerHTML = arr_num2 [ 1 ]; /** * Calculate intermediary multiplication values * * Key: * m1 = num1a * num2a * m2 = num1b * num2a * m3 = num1a * num2b * m4 = num1b * num2b */ const m1 = arr_num1 [ 0 ] * arr_num2 [ 0 ]; const m2 = arr_num1 [ 1 ] * arr_num2 [ 0 ]; const m3 = arr_num1 [ 0 ] * arr_num2 [ 1 ]; const m4 = arr_num1 [ 1 ] * arr_num2 [ 1 ]; // Display intermediary multiplication values document . querySelector ( \"#m1\" ). innerHTML = m1 ; document . querySelector ( \"#m2\" ). innerHTML = m2 ; document . querySelector ( \"#m3\" ). innerHTML = m3 ; document . querySelector ( \"#m4\" ). innerHTML = m4 ; // to continue more here } else { // if first number is not between 10 and 99 (inclusive) if ( num1 < 10 || num1 > 99 ) { alert ( \"First number should be between 10 and 99!\" ); document . querySelector ( \"#num1\" ). value = \"\" ; // empty first input field } // if secondnumber is not between 10 and 99 (inclusive) if ( num2 < 10 || num2 > 99 ) { alert ( \"Second number should be between 10 and 99!\" ); document . querySelector ( \"#num2\" ). value = \"\" ; // empty second input field } } } Each of the four separate products should now populate the center table cells. Step 5: Populating the Table: Obtaining Horizontal and Vertical Totals Now, we focus on getting the horizontal and vertical totals of the intermediary products. The cell containing the sum across the top row (horizontal) is denoted as #m1_m2 the bottom row (horizontal) is denoted as #m3_m4 the left column (vertical) is denoted as #m1_m3 the right column (vertical) is denoted as #m2_m4 times-box.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 function multiply () { let num1 = parseInt ( document . querySelector ( \"#num1\" ). value ); let num2 = parseInt ( document . querySelector ( \"#num2\" ). value ); // replace num1 and num2 with parsed integer (if not integers) // alert user when number is replaced if ( parseFloat ( document . querySelector ( \"#num1\" ). value ) !== parseInt ( document . querySelector ( \"#num1\" ). value )) { if ( document . querySelector ( \"#num1\" ). value == \"\" ) { alert ( \"First number input is empty.\" ); } else { alert ( \"First number isn't an integer. Replacing value at input field with parsed integer value instead.\" ); document . querySelector ( \"#num1\" ). value = num1 ; } } if ( parseFloat ( document . querySelector ( \"#num2\" ). value ) !== parseInt ( document . querySelector ( \"#num2\" ). value )) { if ( document . querySelector ( \"#num2\" ). value == \"\" ) { alert ( \"Second number input is empty.\" ); } else { alert ( \"Second number isn't an integer. Replacing value at input field with parsed integer value instead.\" ); document . querySelector ( \"#num2\" ). value = num2 ; } } // check if num1 and num2 is between 10 and 99 (inclusive) if ( num1 >= 10 && num1 <= 99 && num2 >= 10 && num2 <= 99 ) { // show number in num?_show document . querySelector ( \"#num1_show\" ). innerHTML = num1 ; document . querySelector ( \"#num2_show\" ). innerHTML = num2 ; // split number into digits based on tens and units value let arr_num1 = [ Math . floor ( num1 / 10 ) * 10 , num1 % 10 ]; let arr_num2 = [ Math . floor ( num2 / 10 ) * 10 , num2 % 10 ]; // show digits in num?a or num?b document . querySelector ( \"#num1a\" ). innerHTML = arr_num1 [ 0 ]; document . querySelector ( \"#num1b\" ). innerHTML = arr_num1 [ 1 ]; document . querySelector ( \"#num2a\" ). innerHTML = arr_num2 [ 0 ]; document . querySelector ( \"#num2b\" ). innerHTML = arr_num2 [ 1 ]; /** * Calculate intermediary multiplication values * * Key: * m1 = num1a * num2a * m2 = num1b * num2a * m3 = num1a * num2b * m4 = num1b * num2b */ const m1 = arr_num1 [ 0 ] * arr_num2 [ 0 ]; const m2 = arr_num1 [ 1 ] * arr_num2 [ 0 ]; const m3 = arr_num1 [ 0 ] * arr_num2 [ 1 ]; const m4 = arr_num1 [ 1 ] * arr_num2 [ 1 ]; // Display intermediary multiplication values document . querySelector ( \"#m1\" ). innerHTML = m1 ; document . querySelector ( \"#m2\" ). innerHTML = m2 ; document . querySelector ( \"#m3\" ). innerHTML = m3 ; document . querySelector ( \"#m4\" ). innerHTML = m4 ; // add horizontal row values and display the sums document . querySelector ( \"#m1_m2\" ). innerHTML = m1 + m2 ; document . querySelector ( \"#m3_m4\" ). innerHTML = m3 + m4 ; // add vertical column values and display the sums document . querySelector ( \"#m1_m3\" ). innerHTML = m1 + m3 ; document . querySelector ( \"#m2_m4\" ). innerHTML = m2 + m4 ; // to continue more here } else { // if first number is not between 10 and 99 (inclusive) if ( num1 < 10 || num1 > 99 ) { alert ( \"First number should be between 10 and 99!\" ); document . querySelector ( \"#num1\" ). value = \"\" ; // empty first input field } // if secondnumber is not between 10 and 99 (inclusive) if ( num2 < 10 || num2 > 99 ) { alert ( \"Second number should be between 10 and 99!\" ); document . querySelector ( \"#num2\" ). value = \"\" ; // empty second input field } } } The table should now contain the horizontal and vertical totals as shown. Step 6: Retrieving and Displaying the Final Product Finally, we get to displaying the final product from multiplying the integers in the input fields. The vertical sum between values in cells #m1_m2 and #m3_m4 or #m1_m3 and #m2_m4 will suffice in this case. We first store this sum in a variable first before displaying them in the table cell #m_total and the #numAns input field. times-box.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 function multiply () { let num1 = parseInt ( document . querySelector ( \"#num1\" ). value ); let num2 = parseInt ( document . querySelector ( \"#num2\" ). value ); // replace num1 and num2 with parsed integer (if not integers) // alert user when number is replaced if ( parseFloat ( document . querySelector ( \"#num1\" ). value ) !== parseInt ( document . querySelector ( \"#num1\" ). value )) { if ( document . querySelector ( \"#num1\" ). value == \"\" ) { alert ( \"First number input is empty.\" ); } else { alert ( \"First number isn't an integer. Replacing value at input field with parsed integer value instead.\" ); document . querySelector ( \"#num1\" ). value = num1 ; } } if ( parseFloat ( document . querySelector ( \"#num2\" ). value ) !== parseInt ( document . querySelector ( \"#num2\" ). value )) { if ( document . querySelector ( \"#num2\" ). value == \"\" ) { alert ( \"Second number input is empty.\" ); } else { alert ( \"Second number isn't an integer. Replacing value at input field with parsed integer value instead.\" ); document . querySelector ( \"#num2\" ). value = num2 ; } } // check if num1 and num2 is between 10 and 99 (inclusive) if ( num1 >= 10 && num1 <= 99 && num2 >= 10 && num2 <= 99 ) { // show number in num?_show document . querySelector ( \"#num1_show\" ). innerHTML = num1 ; document . querySelector ( \"#num2_show\" ). innerHTML = num2 ; // split number into digits based on tens and units value let arr_num1 = [ Math . floor ( num1 / 10 ) * 10 , num1 % 10 ]; let arr_num2 = [ Math . floor ( num2 / 10 ) * 10 , num2 % 10 ]; // show digits in num?a or num?b document . querySelector ( \"#num1a\" ). innerHTML = arr_num1 [ 0 ]; document . querySelector ( \"#num1b\" ). innerHTML = arr_num1 [ 1 ]; document . querySelector ( \"#num2a\" ). innerHTML = arr_num2 [ 0 ]; document . querySelector ( \"#num2b\" ). innerHTML = arr_num2 [ 1 ]; /** * Calculate intermediary multiplication values * * Key: * m1 = num1a * num2a * m2 = num1b * num2a * m3 = num1a * num2b * m4 = num1b * num2b */ const m1 = arr_num1 [ 0 ] * arr_num2 [ 0 ]; const m2 = arr_num1 [ 1 ] * arr_num2 [ 0 ]; const m3 = arr_num1 [ 0 ] * arr_num2 [ 1 ]; const m4 = arr_num1 [ 1 ] * arr_num2 [ 1 ]; // Display intermediary multiplication values document . querySelector ( \"#m1\" ). innerHTML = m1 ; document . querySelector ( \"#m2\" ). innerHTML = m2 ; document . querySelector ( \"#m3\" ). innerHTML = m3 ; document . querySelector ( \"#m4\" ). innerHTML = m4 ; // add horizontal row values and display the sums document . querySelector ( \"#m1_m2\" ). innerHTML = m1 + m2 ; document . querySelector ( \"#m3_m4\" ). innerHTML = m3 + m4 ; // add vertical column values and display the sums document . querySelector ( \"#m1_m3\" ). innerHTML = m1 + m3 ; document . querySelector ( \"#m2_m4\" ). innerHTML = m2 + m4 ; // calculate product const product = parseInt ( document . querySelector ( \"#m1_m2\" ). innerHTML ) + parseInt ( document . querySelector ( \"#m3_m4\" ). innerHTML ); // or // const product = // parseInt(document.querySelector(\"#m1_m3\").innerHTML) + parseInt(document.querySelector(\"#m2_m4\").innerHTML); // display full product in table document . querySelector ( \"#m_total\" ). innerHTML = product ; // display full product in answer input field document . querySelector ( \"#numAns\" ). value = product ; } else { // if first number is not between 10 and 99 (inclusive) if ( num1 < 10 || num1 > 99 ) { alert ( \"First number should be between 10 and 99!\" ); document . querySelector ( \"#num1\" ). value = \"\" ; // empty first input field } // if secondnumber is not between 10 and 99 (inclusive) if ( num2 < 10 || num2 > 99 ) { alert ( \"Second number should be between 10 and 99!\" ); document . querySelector ( \"#num2\" ). value = \"\" ; // empty second input field } } } And.. it's complete. Well done! And voila, we've just created a replica of the multiplication box/table used by some teachers to help teach children about multiplication between two-digit numbers! Challenge Try to recreate the same table, but dealing with multiplication between three-digit integers instead of two.","title":"Practical 07 (Activity 1): Multiplication Table"},{"location":"lab07A/#practical-07-activity-1-multiplication-table","text":"","title":"Practical 07 (Activity 1): Multiplication Table"},{"location":"lab07A/#preparation","text":"CSS and JS files are to be kept in their own separate subfolders. css/style.css 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 @ import url ( \"https://fonts.googleapis.com/css2?family=Plus+Jakarta+Sans:ital,wght@0,200;0,300;0,400;0,500;0,600;0,700;0,800;1,200;1,300;1,400;1,500;1,600;1,700;1,800&display=swap\" ) ; : root { --table-cell-dimension : 100 px ; --text-size : 32 px ; } * { font-family : \"Plus Jakarta Sans\" , sans-serif ; } body { padding-top : 2 rem ; text-align : center ; } h1 { font-size : 48 px ; } # num_entry , # num_entry input [ type = \"number\" ] { font-size : var ( --text-size ); margin-bottom : 1 rem ; } # num_entry input [ type = \"number\" ] { text-align : center ; width : var ( --table-cell-dimension ); } input [ type = \"number\" ] : disabled { background-color : white ; border : 2 px solid black ; cursor : not-allowed ; } /* For Chrome, Safari, Edge, Opera */ input :: -webkit-outer-spin-button , input :: -webkit-inner-spin-button { -webkit- appearance : none ; margin : 0 ; } /* For Firefox */ input [ type = \"number\" ] { -moz- appearance : textfield ; } input [ type = \"button\" ] { font-size : 20 px ; padding : 0.5 rem 1 rem ; } hr { margin : 2 rem 0 ; } table # multiplication-box { /* border: 1px solid black; */ border-collapse : collapse ; display : inline-block ; margin-left : auto ; } table # multiplication-box th , table # multiplication-box td : not ( . td-hidden ) { border : 1 px solid black ; font-size : var ( --text-size ); height : var ( --table-cell-dimension ); width : var ( --table-cell-dimension ); } index.html 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" /> < meta http-equiv = \"X-UA-Compatible\" content = \"IE=edge\" /> < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" /> < title > Multiplication Box </ title > < link rel = \"stylesheet\" href = \"css/style.css\" /> </ head > < body > < h1 > Multiplication Box </ h1 > < p > Multiplies 2-digit numbers together. </ p > < section id = \"num_entry\" > < input type = \"number\" name = \"num1\" id = \"num1\" min = \"10\" max = \"99\" /> &times; < input type = \"number\" name = \"num2\" id = \"num2\" min = \"10\" max = \"99\" /> = < input type = \"number\" name = \"answer\" id = \"numAns\" min = \"10\" max = \"99\" readonly /> </ section > <!-- /section#num_entry --> < input type = \"button\" value = \"Multiply\" onclick = \"multiply();\" /> < hr /> < table id = \"multiplication-box\" > < tr > < td class = \"td-hidden\" ></ td > < td class = \"td-hidden\" ></ td > < th id = \"num1_show\" colspan = \"2\" ></ th > </ tr > < tr > < td class = \"td-hidden\" ></ td > < th > &times; </ th > < th id = \"num1a\" ></ th > < th id = \"num1b\" ></ th > </ tr > < tr > < th id = \"num2_show\" rowspan = \"2\" ></ th > < th id = \"num2a\" ></ th > < td id = \"m1\" ></ td > < td id = \"m2\" ></ td > < td id = \"m1_m2\" ></ td > </ tr > < tr > < th id = \"num2b\" ></ th > < td id = \"m3\" ></ td > < td id = \"m4\" ></ td > < td id = \"m3_m4\" ></ td > </ tr > < tr > < td class = \"td-hidden\" colspan = \"2\" ></ td > < td id = \"m1_m3\" ></ td > < td id = \"m2_m4\" ></ td > < th id = \"m_total\" ></ th > </ tr > </ table > <!-- /table#multiplication-box --> < script src = \"js/times-box.js\" ></ script > </ body > </ html > times-box.js 1 2 3 function multiply () { // to include code here } You should be able to see the following in your web browser: Multiplication Box Page","title":"Preparation"},{"location":"lab07A/#motivation","text":"School teachers are often advised to look for creative methods into their lessons in order to help engage with students better or help students learn concepts easier with different methods. The multiplication box is one of many creative methods concocted by elementary school math teachers to help students understand multiplication between two-digit numbers (i.e., integer values). This method involves separating both numbers into tens and units, and then multiplying them separately before adding their horizontal and vertical totals up. The cell at the bottom right denotes the eventual product between the two numbers. For instance, with \\(49 \\times 16\\) , both numbers are separated as the pairs (40, 9) and (10, 6) respectively. The following multiplication operations are then carried out first: \\(40 \\times 10 = 400\\) \\(40 \\times 6 = 240\\) \\(9 \\times 10 = 90\\) \\(9 \\times 6 = 54\\) The numbers are populated as shown in the figure below, where their horizontal totals and vertical totals are calculated and displayed. Between both sets of totals, they produce the same correct product after being added together (i.e., \\(490 + 294 = 640 + 144 = 784\\) ). Multiplication Box Page Take note that the only input fields of concern are the three which make up the equation on top of the multiply button, which is associated with the JavaScript multiply() function we will be completing in this activity. Only the first two are allowed to be populated manually by the user. The third representing the calculated product is set to be read-only .","title":"Motivation"},{"location":"lab07A/#step-1-obtaining-values-from-input-fields","text":"Let's work on obtaining the values entered into the first two input fields. The first two lines in the multiply() function is used to obtain the values from input fields input#num1 and input#num2 . times-box.js 1 2 3 4 function multiply () { let num1 = parseInt ( document . querySelector ( \"#num1\" ). value ); let num2 = parseInt ( document . querySelector ( \"#num2\" ). value ); } TIP: Using .innerHTML or .value When Retrieving Values TL;DR: In nearly all cases, .value is only used with <input> whilst .innerHTML is for getting values from any non-self-closing tags. Let's take a <p> element, for example. < p > Content/text/etc. inside here </ p > The content placed in between the opening <p> and closing </p> tags is what we refer to as inner HTML. Therefore, we use .innerHTML to obtain values that are stored in between similarly structured HTML tags. document . querySelector ( \"p\" ). innerHTML However, when it comes to <input> elements, these are represented with self-closing tags. Thus, there isn't really any inner HTML to target. <input> elements do have the a value attribute that contains entered text, though. In this case, it only makes sense to use .value to elicit values out of <input> fields. document . querySelector ( \"input\" ). innerHTML // does not work document . querySelector ( \"input\" ). value // use this for <input> elements instead Here, we observe that the parseInt() function is applied surrounding the expression used to obtain the value from input#num1 and input#num2 . This function ensures that an integer is obtained from the <input> elements, as the value obtained from them typically defaults to being of a \"string\" type. Before we proceed to use these values we've entered, we're going to implement a few checks to see if the numbers entered are two-digit integers . This means that: none of the two input fields (i.e., input#num1 and input#num2 ) should be empty no non-integer values or any value outside of the 10-99 range can be entered The first criterion is pretty straightforward - we check to see if the value of input#num1 and/or input#num2 results in an empty string (i.e., \"\" ). To implement the second criterion, we'll be using the sister variant function of parseInt() called parseFloat() . While parseInt() obtains an integer from the passed in string (in this case the value of the <input> field), parseFloat() obtains any number (with decimal points) from the passed in string. In summary, Function \"17\" \"17.5\" \"17as\" \"17.5as\" \"as17\" \"asap\" parseInt() 17 17 17 17 NaN Nan parseFloat() 17 17.5 17 17.5 NaN Nan From the table above, we can probably tell that parseFloat(\"17.5\") !== parseInt(\"17.5\") . We use this idea here to determine if the input number in either input#num1 or input#num2 or both are not integers, and then we proceed to replace them with the integer obtained after using the parseInt() function. For both criteria, we use an alert box to alert the user of any problems found. times-box.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 function multiply () { let num1 = parseInt ( document . querySelector ( \"#num1\" ). value ); let num2 = parseInt ( document . querySelector ( \"#num2\" ). value ); // replace num1 and num2 with parsed integer (if not integers) // alert user when number is replaced if ( parseFloat ( document . querySelector ( \"#num1\" ). value ) !== parseInt ( document . querySelector ( \"#num1\" ). value )) { if ( document . querySelector ( \"#num1\" ). value == \"\" ) { alert ( \"First number input is empty.\" ); } else { alert ( \"First number isn't an integer. Replacing value at input field with parsed integer value instead.\" ); document . querySelector ( \"#num1\" ). value = num1 ; } } if ( parseFloat ( document . querySelector ( \"#num2\" ). value ) !== parseInt ( document . querySelector ( \"#num2\" ). value )) { if ( document . querySelector ( \"#num2\" ). value == \"\" ) { alert ( \"Second number input is empty.\" ); } else { alert ( \"Second number isn't an integer. Replacing value at input field with parsed integer value instead.\" ); document . querySelector ( \"#num2\" ). value = num2 ; } } } Alert box pop-up if first number has not been entered. Alert box pop-up if second number has not been entered. Alert box pop-up if first number is not an integer. Alert box pop-up if second number is not an integer.","title":"Step 1: Obtaining Values from Input Fields"},{"location":"lab07A/#step-2-checking-validity-of-input-integers","text":"Now, onward to checking whether the input integers (i.e., num1 and num2 ) are within the correct range. A two-digit integer can only be either one of the numbers between 10 and 99; the rest of which simply will not fit. For the sake of simplicity, we will only consider positive values. We implement this check using a compound condition of 4 conditions to be met simultaneously: num1 >= 10 num1 <= 99 num2 >= 10 num2 <= 99 If all four of these conditions are met, we proceed to display num1 and num2 in td#num1_show and td#num2_show respectively. We will expand on the further logic to be implemented from here. Otherwise, we check to see either num1 < 10 || num1 > 99 or num2 < 10 || num2 > 99 , and display an appropriate error message in an alert box. times-box.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 function multiply () { let num1 = parseInt ( document . querySelector ( \"#num1\" ). value ); let num2 = parseInt ( document . querySelector ( \"#num2\" ). value ); // replace num1 and num2 with parsed integer (if not integers) // alert user when number is replaced if ( parseFloat ( document . querySelector ( \"#num1\" ). value ) !== parseInt ( document . querySelector ( \"#num1\" ). value )) { if ( document . querySelector ( \"#num1\" ). value == \"\" ) { alert ( \"First number input is empty.\" ); } else { alert ( \"First number isn't an integer. Replacing value at input field with parsed integer value instead.\" ); document . querySelector ( \"#num1\" ). value = num1 ; } } if ( parseFloat ( document . querySelector ( \"#num2\" ). value ) !== parseInt ( document . querySelector ( \"#num2\" ). value )) { if ( document . querySelector ( \"#num2\" ). value == \"\" ) { alert ( \"Second number input is empty.\" ); } else { alert ( \"Second number isn't an integer. Replacing value at input field with parsed integer value instead.\" ); document . querySelector ( \"#num2\" ). value = num2 ; } } // check if num1 and num2 is between 10 and 99 (inclusive) if ( num1 >= 10 && num1 <= 99 && num2 >= 10 && num2 <= 99 ) { // show number in num?_show document . querySelector ( \"#num1_show\" ). innerHTML = num1 ; document . querySelector ( \"#num2_show\" ). innerHTML = num2 ; // to continue more here } else { // if first number is not between 10 and 99 (inclusive) if ( num1 < 10 || num1 > 99 ) { alert ( \"First number should be between 10 and 99!\" ); document . querySelector ( \"#num1\" ). value = \"\" ; // empty first input field } // if secondnumber is not between 10 and 99 (inclusive) if ( num2 < 10 || num2 > 99 ) { alert ( \"Second number should be between 10 and 99!\" ); document . querySelector ( \"#num2\" ). value = \"\" ; // empty second input field } } } Alert box pop-up if first number is not between 10 and 99 (inclusive). Alert box pop-up if second number is not between 10 and 99 (inclusive). Otherwise, your multiplication table should start being populated from here.","title":"Step 2: Checking Validity of Input Integers"},{"location":"lab07A/#step-3-populating-the-table-tens-and-units-split","text":"The key ideas behind using the multiplication box/table as shown here is to split the two-digit numbers into the tens and units places. In order to elicit the tens digit from the number, we simply obtain the quotient after dividing it by 10. This quotient is then passed into one of the Math functions, namely the floor() function which rounds down a number to the lower boundary (e.g., 3.4 to 3, and 4.9 to 4). The units digit is obtained simply by using the modulo operator on the number; basically, what the remainder is after dividing the number by 10. These values are then stored contiguously in an array for each number (e.g., \\(49 \\times 16\\) produces [4, 9] and [1, 6] ). Each of these digit are then placed in the respective cells: td#num1a , td#num1b , td#num2a , td#num2b . times-box.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 function multiply () { let num1 = parseInt ( document . querySelector ( \"#num1\" ). value ); let num2 = parseInt ( document . querySelector ( \"#num2\" ). value ); // replace num1 and num2 with parsed integer (if not integers) // alert user when number is replaced if ( parseFloat ( document . querySelector ( \"#num1\" ). value ) !== parseInt ( document . querySelector ( \"#num1\" ). value )) { if ( document . querySelector ( \"#num1\" ). value == \"\" ) { alert ( \"First number input is empty.\" ); } else { alert ( \"First number isn't an integer. Replacing value at input field with parsed integer value instead.\" ); document . querySelector ( \"#num1\" ). value = num1 ; } } if ( parseFloat ( document . querySelector ( \"#num2\" ). value ) !== parseInt ( document . querySelector ( \"#num2\" ). value )) { if ( document . querySelector ( \"#num2\" ). value == \"\" ) { alert ( \"Second number input is empty.\" ); } else { alert ( \"Second number isn't an integer. Replacing value at input field with parsed integer value instead.\" ); document . querySelector ( \"#num2\" ). value = num2 ; } } // check if num1 and num2 is between 10 and 99 (inclusive) if ( num1 >= 10 && num1 <= 99 && num2 >= 10 && num2 <= 99 ) { // show number in num?_show document . querySelector ( \"#num1_show\" ). innerHTML = num1 ; document . querySelector ( \"#num2_show\" ). innerHTML = num2 ; // split number into digits based on tens and units value let arr_num1 = [ Math . floor ( num1 / 10 ) * 10 , num1 % 10 ]; let arr_num2 = [ Math . floor ( num2 / 10 ) * 10 , num2 % 10 ]; // show digits in num?a or num?b document . querySelector ( \"#num1a\" ). innerHTML = arr_num1 [ 0 ]; document . querySelector ( \"#num1b\" ). innerHTML = arr_num1 [ 1 ]; document . querySelector ( \"#num2a\" ). innerHTML = arr_num2 [ 0 ]; document . querySelector ( \"#num2b\" ). innerHTML = arr_num2 [ 1 ]; // to continue more here } else { // if first number is not between 10 and 99 (inclusive) if ( num1 < 10 || num1 > 99 ) { alert ( \"First number should be between 10 and 99!\" ); document . querySelector ( \"#num1\" ). value = \"\" ; // empty first input field } // if secondnumber is not between 10 and 99 (inclusive) if ( num2 < 10 || num2 > 99 ) { alert ( \"Second number should be between 10 and 99!\" ); document . querySelector ( \"#num2\" ). value = \"\" ; // empty second input field } } } Your function should now produce this result after clicking the button.","title":"Step 3: Populating the Table: Tens and Units Split"},{"location":"lab07A/#step-4-populating-the-table-calculating-intermediary-products","text":"By splitting both numbers into the tens and units digits, we can now carry out the following intermediary multiplications operations (taking \\(49 \\times 16\\) for example): \\(40 \\times 10 = 400\\) \\(40 \\times 6 = 240\\) \\(9 \\times 10 = 90\\) \\(9 \\times 6 = 54\\) Each of these products are placed like as shown in the following output. times-box.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 function multiply () { let num1 = parseInt ( document . querySelector ( \"#num1\" ). value ); let num2 = parseInt ( document . querySelector ( \"#num2\" ). value ); // replace num1 and num2 with parsed integer (if not integers) // alert user when number is replaced if ( parseFloat ( document . querySelector ( \"#num1\" ). value ) !== parseInt ( document . querySelector ( \"#num1\" ). value )) { if ( document . querySelector ( \"#num1\" ). value == \"\" ) { alert ( \"First number input is empty.\" ); } else { alert ( \"First number isn't an integer. Replacing value at input field with parsed integer value instead.\" ); document . querySelector ( \"#num1\" ). value = num1 ; } } if ( parseFloat ( document . querySelector ( \"#num2\" ). value ) !== parseInt ( document . querySelector ( \"#num2\" ). value )) { if ( document . querySelector ( \"#num2\" ). value == \"\" ) { alert ( \"Second number input is empty.\" ); } else { alert ( \"Second number isn't an integer. Replacing value at input field with parsed integer value instead.\" ); document . querySelector ( \"#num2\" ). value = num2 ; } } // check if num1 and num2 is between 10 and 99 (inclusive) if ( num1 >= 10 && num1 <= 99 && num2 >= 10 && num2 <= 99 ) { // show number in num?_show document . querySelector ( \"#num1_show\" ). innerHTML = num1 ; document . querySelector ( \"#num2_show\" ). innerHTML = num2 ; // split number into digits based on tens and units value let arr_num1 = [ Math . floor ( num1 / 10 ) * 10 , num1 % 10 ]; let arr_num2 = [ Math . floor ( num2 / 10 ) * 10 , num2 % 10 ]; // show digits in num?a or num?b document . querySelector ( \"#num1a\" ). innerHTML = arr_num1 [ 0 ]; document . querySelector ( \"#num1b\" ). innerHTML = arr_num1 [ 1 ]; document . querySelector ( \"#num2a\" ). innerHTML = arr_num2 [ 0 ]; document . querySelector ( \"#num2b\" ). innerHTML = arr_num2 [ 1 ]; /** * Calculate intermediary multiplication values * * Key: * m1 = num1a * num2a * m2 = num1b * num2a * m3 = num1a * num2b * m4 = num1b * num2b */ const m1 = arr_num1 [ 0 ] * arr_num2 [ 0 ]; const m2 = arr_num1 [ 1 ] * arr_num2 [ 0 ]; const m3 = arr_num1 [ 0 ] * arr_num2 [ 1 ]; const m4 = arr_num1 [ 1 ] * arr_num2 [ 1 ]; // Display intermediary multiplication values document . querySelector ( \"#m1\" ). innerHTML = m1 ; document . querySelector ( \"#m2\" ). innerHTML = m2 ; document . querySelector ( \"#m3\" ). innerHTML = m3 ; document . querySelector ( \"#m4\" ). innerHTML = m4 ; // to continue more here } else { // if first number is not between 10 and 99 (inclusive) if ( num1 < 10 || num1 > 99 ) { alert ( \"First number should be between 10 and 99!\" ); document . querySelector ( \"#num1\" ). value = \"\" ; // empty first input field } // if secondnumber is not between 10 and 99 (inclusive) if ( num2 < 10 || num2 > 99 ) { alert ( \"Second number should be between 10 and 99!\" ); document . querySelector ( \"#num2\" ). value = \"\" ; // empty second input field } } } Each of the four separate products should now populate the center table cells.","title":"Step 4: Populating the Table: Calculating Intermediary Products"},{"location":"lab07A/#step-5-populating-the-table-obtaining-horizontal-and-vertical-totals","text":"Now, we focus on getting the horizontal and vertical totals of the intermediary products. The cell containing the sum across the top row (horizontal) is denoted as #m1_m2 the bottom row (horizontal) is denoted as #m3_m4 the left column (vertical) is denoted as #m1_m3 the right column (vertical) is denoted as #m2_m4 times-box.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 function multiply () { let num1 = parseInt ( document . querySelector ( \"#num1\" ). value ); let num2 = parseInt ( document . querySelector ( \"#num2\" ). value ); // replace num1 and num2 with parsed integer (if not integers) // alert user when number is replaced if ( parseFloat ( document . querySelector ( \"#num1\" ). value ) !== parseInt ( document . querySelector ( \"#num1\" ). value )) { if ( document . querySelector ( \"#num1\" ). value == \"\" ) { alert ( \"First number input is empty.\" ); } else { alert ( \"First number isn't an integer. Replacing value at input field with parsed integer value instead.\" ); document . querySelector ( \"#num1\" ). value = num1 ; } } if ( parseFloat ( document . querySelector ( \"#num2\" ). value ) !== parseInt ( document . querySelector ( \"#num2\" ). value )) { if ( document . querySelector ( \"#num2\" ). value == \"\" ) { alert ( \"Second number input is empty.\" ); } else { alert ( \"Second number isn't an integer. Replacing value at input field with parsed integer value instead.\" ); document . querySelector ( \"#num2\" ). value = num2 ; } } // check if num1 and num2 is between 10 and 99 (inclusive) if ( num1 >= 10 && num1 <= 99 && num2 >= 10 && num2 <= 99 ) { // show number in num?_show document . querySelector ( \"#num1_show\" ). innerHTML = num1 ; document . querySelector ( \"#num2_show\" ). innerHTML = num2 ; // split number into digits based on tens and units value let arr_num1 = [ Math . floor ( num1 / 10 ) * 10 , num1 % 10 ]; let arr_num2 = [ Math . floor ( num2 / 10 ) * 10 , num2 % 10 ]; // show digits in num?a or num?b document . querySelector ( \"#num1a\" ). innerHTML = arr_num1 [ 0 ]; document . querySelector ( \"#num1b\" ). innerHTML = arr_num1 [ 1 ]; document . querySelector ( \"#num2a\" ). innerHTML = arr_num2 [ 0 ]; document . querySelector ( \"#num2b\" ). innerHTML = arr_num2 [ 1 ]; /** * Calculate intermediary multiplication values * * Key: * m1 = num1a * num2a * m2 = num1b * num2a * m3 = num1a * num2b * m4 = num1b * num2b */ const m1 = arr_num1 [ 0 ] * arr_num2 [ 0 ]; const m2 = arr_num1 [ 1 ] * arr_num2 [ 0 ]; const m3 = arr_num1 [ 0 ] * arr_num2 [ 1 ]; const m4 = arr_num1 [ 1 ] * arr_num2 [ 1 ]; // Display intermediary multiplication values document . querySelector ( \"#m1\" ). innerHTML = m1 ; document . querySelector ( \"#m2\" ). innerHTML = m2 ; document . querySelector ( \"#m3\" ). innerHTML = m3 ; document . querySelector ( \"#m4\" ). innerHTML = m4 ; // add horizontal row values and display the sums document . querySelector ( \"#m1_m2\" ). innerHTML = m1 + m2 ; document . querySelector ( \"#m3_m4\" ). innerHTML = m3 + m4 ; // add vertical column values and display the sums document . querySelector ( \"#m1_m3\" ). innerHTML = m1 + m3 ; document . querySelector ( \"#m2_m4\" ). innerHTML = m2 + m4 ; // to continue more here } else { // if first number is not between 10 and 99 (inclusive) if ( num1 < 10 || num1 > 99 ) { alert ( \"First number should be between 10 and 99!\" ); document . querySelector ( \"#num1\" ). value = \"\" ; // empty first input field } // if secondnumber is not between 10 and 99 (inclusive) if ( num2 < 10 || num2 > 99 ) { alert ( \"Second number should be between 10 and 99!\" ); document . querySelector ( \"#num2\" ). value = \"\" ; // empty second input field } } } The table should now contain the horizontal and vertical totals as shown.","title":"Step 5: Populating the Table: Obtaining Horizontal and Vertical Totals"},{"location":"lab07A/#step-6-retrieving-and-displaying-the-final-product","text":"Finally, we get to displaying the final product from multiplying the integers in the input fields. The vertical sum between values in cells #m1_m2 and #m3_m4 or #m1_m3 and #m2_m4 will suffice in this case. We first store this sum in a variable first before displaying them in the table cell #m_total and the #numAns input field. times-box.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 function multiply () { let num1 = parseInt ( document . querySelector ( \"#num1\" ). value ); let num2 = parseInt ( document . querySelector ( \"#num2\" ). value ); // replace num1 and num2 with parsed integer (if not integers) // alert user when number is replaced if ( parseFloat ( document . querySelector ( \"#num1\" ). value ) !== parseInt ( document . querySelector ( \"#num1\" ). value )) { if ( document . querySelector ( \"#num1\" ). value == \"\" ) { alert ( \"First number input is empty.\" ); } else { alert ( \"First number isn't an integer. Replacing value at input field with parsed integer value instead.\" ); document . querySelector ( \"#num1\" ). value = num1 ; } } if ( parseFloat ( document . querySelector ( \"#num2\" ). value ) !== parseInt ( document . querySelector ( \"#num2\" ). value )) { if ( document . querySelector ( \"#num2\" ). value == \"\" ) { alert ( \"Second number input is empty.\" ); } else { alert ( \"Second number isn't an integer. Replacing value at input field with parsed integer value instead.\" ); document . querySelector ( \"#num2\" ). value = num2 ; } } // check if num1 and num2 is between 10 and 99 (inclusive) if ( num1 >= 10 && num1 <= 99 && num2 >= 10 && num2 <= 99 ) { // show number in num?_show document . querySelector ( \"#num1_show\" ). innerHTML = num1 ; document . querySelector ( \"#num2_show\" ). innerHTML = num2 ; // split number into digits based on tens and units value let arr_num1 = [ Math . floor ( num1 / 10 ) * 10 , num1 % 10 ]; let arr_num2 = [ Math . floor ( num2 / 10 ) * 10 , num2 % 10 ]; // show digits in num?a or num?b document . querySelector ( \"#num1a\" ). innerHTML = arr_num1 [ 0 ]; document . querySelector ( \"#num1b\" ). innerHTML = arr_num1 [ 1 ]; document . querySelector ( \"#num2a\" ). innerHTML = arr_num2 [ 0 ]; document . querySelector ( \"#num2b\" ). innerHTML = arr_num2 [ 1 ]; /** * Calculate intermediary multiplication values * * Key: * m1 = num1a * num2a * m2 = num1b * num2a * m3 = num1a * num2b * m4 = num1b * num2b */ const m1 = arr_num1 [ 0 ] * arr_num2 [ 0 ]; const m2 = arr_num1 [ 1 ] * arr_num2 [ 0 ]; const m3 = arr_num1 [ 0 ] * arr_num2 [ 1 ]; const m4 = arr_num1 [ 1 ] * arr_num2 [ 1 ]; // Display intermediary multiplication values document . querySelector ( \"#m1\" ). innerHTML = m1 ; document . querySelector ( \"#m2\" ). innerHTML = m2 ; document . querySelector ( \"#m3\" ). innerHTML = m3 ; document . querySelector ( \"#m4\" ). innerHTML = m4 ; // add horizontal row values and display the sums document . querySelector ( \"#m1_m2\" ). innerHTML = m1 + m2 ; document . querySelector ( \"#m3_m4\" ). innerHTML = m3 + m4 ; // add vertical column values and display the sums document . querySelector ( \"#m1_m3\" ). innerHTML = m1 + m3 ; document . querySelector ( \"#m2_m4\" ). innerHTML = m2 + m4 ; // calculate product const product = parseInt ( document . querySelector ( \"#m1_m2\" ). innerHTML ) + parseInt ( document . querySelector ( \"#m3_m4\" ). innerHTML ); // or // const product = // parseInt(document.querySelector(\"#m1_m3\").innerHTML) + parseInt(document.querySelector(\"#m2_m4\").innerHTML); // display full product in table document . querySelector ( \"#m_total\" ). innerHTML = product ; // display full product in answer input field document . querySelector ( \"#numAns\" ). value = product ; } else { // if first number is not between 10 and 99 (inclusive) if ( num1 < 10 || num1 > 99 ) { alert ( \"First number should be between 10 and 99!\" ); document . querySelector ( \"#num1\" ). value = \"\" ; // empty first input field } // if secondnumber is not between 10 and 99 (inclusive) if ( num2 < 10 || num2 > 99 ) { alert ( \"Second number should be between 10 and 99!\" ); document . querySelector ( \"#num2\" ). value = \"\" ; // empty second input field } } } And.. it's complete. Well done! And voila, we've just created a replica of the multiplication box/table used by some teachers to help teach children about multiplication between two-digit numbers!","title":"Step 6: Retrieving and Displaying the Final Product"},{"location":"lab07A/#challenge","text":"Try to recreate the same table, but dealing with multiplication between three-digit integers instead of two.","title":"Challenge"},{"location":"lab07B/","text":"Practical 07 (Activity 2): Mark Demo Preparation You'll require the following font file to be kept in a subfolder called fonts in your project directory: SF Pro Display Additionally, CSS and JS files are to be kept in their own separate subfolders. style.css 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 @ font-face { font-family : \"SF Pro Display\" ; src : url ( \"../fonts/SF-Pro-Display-Regular.otf\" ); } * { font-family : \"SF Pro Display\" , sans-serif ; } h1 { font-size : 48 px ; } hr { margin : 2 rem 0 ; } button { background-color : transparent ; border-radius : 1 rem ; font-size : 24 px ; padding : 0.5 rem 1 rem ; } button : hover { box-shadow : 0 0 1 rem yellowgreen , 0 0 5 rem lemonchiffon ; cursor : pointer ; } button : active { background-color : lemonchiffon ; } . text-center { text-align : center ; } style_input.css 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 input [ type = \"number\" ] { text-align : right ; } input : read-only { background-color : khaki ; } /* For Chrome, Safari, Edge, Opera */ input :: -webkit-outer-spin-button , input :: -webkit-inner-spin-button { -webkit- appearance : none ; margin : 0 ; } /* For Firefox */ input [ type = \"number\" ] { -moz- appearance : textfield ; } style_table.css 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 table { border-collapse : collapse ; margin : 0 auto ; } table * { font-size : 24 px ; } th , td { border : 1 px solid black ; padding : 0.5 rem 1 rem ; } th { background-color : lightcyan ; } tr : not ( : first-of-type ) : not ( : last-of-type ) : hover { background-color : greenyellow ; } index.html 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" /> < meta http-equiv = \"X-UA-Compatible\" content = \"IE=edge\" /> < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" /> < title > Mark Demo </ title > < link rel = \"stylesheet\" href = \"css/style.css\" /> < link rel = \"stylesheet\" href = \"css/style_input.css\" /> < link rel = \"stylesheet\" href = \"css/style_table.css\" /> </ head > < body > < section class = \"text-center\" > < h1 > Mark Demo </ h1 > </ section > <!-- /section.text-center --> < table > < tr class = \"text-center\" > < th > # </ th > < th > Asgn 1 [100%] </ th > < th > Asgn 2 [100%] </ th > < th > Asgn 1 [20 points] </ th > < th > Asgn 2 [30 points] </ th > < th > Total [50 points] </ th > </ tr > < tr > < th > 1 </ th > < td >< input type = \"number\" name = \"stu1_asgn1\" id = \"stu1_asgn1\" /></ td > < td >< input type = \"number\" name = \"stu1_asgn2\" id = \"stu1_asgn2\" /></ td > < td >< input type = \"number\" name = \"stu1_asgn1_points\" id = \"stu1_asgn1_points\" readonly /></ td > < td >< input type = \"number\" name = \"stu1_asgn2_points\" id = \"stu1_asgn2_points\" readonly /></ td > < td >< input type = \"number\" name = \"stu1_total_points\" id = \"stu1_total_points\" readonly /></ td > </ tr > < tr > < th > 2 </ th > < td >< input type = \"number\" name = \"stu2_asgn1\" id = \"stu2_asgn1\" /></ td > < td >< input type = \"number\" name = \"stu2_asgn2\" id = \"stu2_asgn2\" /></ td > < td >< input type = \"number\" name = \"stu2_asgn1_points\" id = \"stu2_asgn1_points\" readonly /></ td > < td >< input type = \"number\" name = \"stu2_asgn2_points\" id = \"stu2_asgn2_points\" readonly /></ td > < td >< input type = \"number\" name = \"stu2_total_points\" id = \"stu2_total_points\" readonly /></ td > </ tr > < tr > < th > 3 </ th > < td >< input type = \"number\" name = \"stu3_asgn1\" id = \"stu3_asgn1\" /></ td > < td >< input type = \"number\" name = \"stu3_asgn2\" id = \"stu3_asgn2\" /></ td > < td >< input type = \"number\" name = \"stu3_asgn1_points\" id = \"stu3_asgn1_points\" readonly /></ td > < td >< input type = \"number\" name = \"stu3_asgn2_points\" id = \"stu3_asgn2_points\" readonly /></ td > < td >< input type = \"number\" name = \"stu3_total_points\" id = \"stu3_total_points\" readonly /></ td > </ tr > < tr > < th colspan = \"3\" > Average </ th > < th >< input type = \"number\" name = \"avg1\" id = \"avg1\" readonly /></ th > < th >< input type = \"number\" name = \"avg2\" id = \"avg2\" readonly /></ th > < th >< input type = \"number\" name = \"avg_total\" id = \"avg_total\" readonly /></ th > </ tr > </ table > <!-- /table --> < hr /> < section class = \"text-center\" > < button onclick = \"calculate();\" > Calculate Total and Average </ button > < button onclick = \"clearTable();\" > Clear Table </ button > </ section > <!-- /section.text-center --> < script src = \"js/script.js\" ></ script > </ body > </ html > script.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 function calculate () { // Variables to contain total values let asgn1_total = 0 , asgn2_total = 0 , grand_total = 0 ; // We'll use a constant to referece the <table> element to try to shorten the code. const TABLE = document . querySelector ( \"table\" ); // Calculate number of rows in between top and bottom row const NUMBER_OF_STUDENTS = TABLE . rows . length - 2 ; // we will be adding code from here } function clearTable () { // Initialize Asgn 1 & Asgn 2 (100% each) to 0 document . querySelectorAll ( `input:not(:read-only)` ). forEach (( inputField ) => ( inputField . value = \"0\" )); // Initialize Asgn & Total Points to 0.00 document . querySelectorAll ( `input:read-only` ). forEach (( inputField ) => ( inputField . value = \"0.00\" )); } window . onload = clearTable (); You should be able to see the following in your web browser: Multiplication Box Page Motivation This intermediate-level activity will provide a guide as to how you can effectively use program control structures to skillfully loop through the same calculation process with different sets of inputs at a time. Here, each row represents a student's record. Each student would have had 2 assessment components graded on a 0 to 100 percent scale. When the button at the bottom of the page (i.e., Calculate Total and Average) is selected, each student's Assignment 1 and 2's respective point weightage is calculated based on the input marks. This is followed up by the calculation of points obtained by each student, along with the cumulative average of each point component. The button has an onclick attribute that invokes the calculate() function when clicked on. Another button to clear the table is present alongside while having its functionality tied in with the clearTable() function. Understanding the clearTable() Function The clearTable() function contains two statements. The first statement targets all input fields not set to read-only to \"0\", whilst the second statement sets the remaining input fields' value attribute to \"0.00\". Both statements use the forEach() method, but a regular for loop will also suffice here. The forEach() method retrieves each related input field and autonomously sets their value attributes accordingly. Step 1: Obtaining Values from Input Fields The starting point in script.js should give some light onto the function of concern: the calculate() function. At first, we initialize variables asgn1_total , asgn2_total and grand_total to contain the total sum of all points. We will revisit them later, but for now we initialize all of them with the value 0. We will also make reference to the <table> element a lot here. In order to shorten the code as to simplify the process, we declare a constant variable named TABLE referencing this <table> element. In addition, we refer to the number of student records to be put in as TABLE.rows.length - 2 . Of course, we can immediately take it as just 3 since there isn't any functionality to add more rows that'll question whether the number of records will stay put. Not only that, the way you calculate the number of students will depend on whether you semantic tags within your <table> element; if so, the value of NUMBER_OF_STUDENTS constant should be calculated differently. script.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 function calculate () { // Variables to contain total values let asgn1_total = 0 , asgn2_total = 0 , grand_total = 0 ; // We'll use a constant to referece the <table> element to try to shorten the code. const TABLE = document . querySelector ( \"table\" ); // Calculate number of rows in between top and bottom row const NUMBER_OF_STUDENTS = TABLE . rows . length - 2 ; // we will be adding code from here } function clearTable () { // Initialize Asgn 1 & Asgn 2 (100% each) to 0 document . querySelectorAll ( `input:not(:read-only)` ). forEach (( inputField ) => ( inputField . value = \"0\" )); // Initialize Asgn & Total Points to 0.00 document . querySelectorAll ( `input:read-only` ). forEach (( inputField ) => ( inputField . value = \"0.00\" )); } window . onload = clearTable (); Step 2: Catering for Unfilled Input Fields Now here's the bit that would take many lines if done without any program control structures in place. We mitigate needing to write numerous lines of code by introducing a for loop that will iterate over each row while obtaining values from each of its associated input fields. The id attribute values for each input field referencing the total marks (100%) for each student is named in a fashion similar to this: #stu${i}_asgn1 and #stu${i}_asgn2 . More specifically, you will find input fields with the following id attribute values: Student 1: #stu1_asgn1 , #stu1_asgn2 Student 2: #stu2_asgn1 , #stu2_asgn2 Student 3: #stu3_asgn1 , #stu3_asgn2 Notice a pattern in how the id attribute values are aptly named? By iterating an iterator variable (we'll be using i here), we can run this in a for loop to write out each required statement once! The first order of action in this for loop is to check whether there are any unfilled input fields in any of the six input fields with the aforementioned id attribute values. Should there be any, they will be automatically filled with \"0\" . This will help prevent errors during the calculation of total and average points. script.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 function calculate () { // Variables to contain total values let asgn1_total = 0 , asgn2_total = 0 , grand_total = 0 ; // We'll use a constant to referece the <table> element to try to shorten the code. const TABLE = document . querySelector ( \"table\" ); // Calculate number of rows in between top and bottom row const NUMBER_OF_STUDENTS = TABLE . rows . length - 2 ; for ( let i = 1 ; i <= NUMBER_OF_STUDENTS ; ++ i ) { /** * Check if #stu?_asgn1 and #stu?_asgn2 are empty * If empty, place in 0 values. */ if ( document . querySelector ( `#stu ${ i } _asgn1` ). value == \"\" ) { document . querySelector ( `#stu ${ i } _asgn1` ). value = \"0\" ; } if ( document . querySelector ( `#stu ${ i } _asgn2` ). value == \"\" ) { document . querySelector ( `#stu ${ i } _asgn2` ). value = \"0\" ; } // we will be adding code from here } } function clearTable () { // Initialize Asgn 1 & Asgn 2 (100% each) to 0 document . querySelectorAll ( `input:not(:read-only)` ). forEach (( inputField ) => ( inputField . value = \"0\" )); // Initialize Asgn & Total Points to 0.00 document . querySelectorAll ( `input:read-only` ). forEach (( inputField ) => ( inputField . value = \"0.00\" )); } window . onload = clearTable (); A Check The procedure above doesn't cater for negative marks. Assuming that the marks entered should be nonnegative, how would you go about catering for this requirement? Step 3: Generating Total Points Now we get to calculating the total points obtained from the entered Assignment 1 and 2 marks. From the table, we can probably guess that the total points obtained for the Assignment 1 component is to be scaled from 100% to 20 points (i.e., multiply by 0.2) Assignment 2 component is to be scaled from 100% to 30 points (i.e., multiply by 0.3) During each for loop iteration, we store the points obtained for Assignment 1 and Assignment 2 into asgn1_points and asgn2_points respectively. Then from here, we display them in #stu${i}_asgn1_points and #stu${i}_asgn2_points , where i still represents the iteration number/row count/student count. These point values are displayed in 2 decimal places using an appended .toFixed() function, which takes in 2 as the parameter denoting the number of decimal places to be shown. After both asgn1_points and asgn2_points have been calculated, we proceed with adding both of them to stu_total before displaying them in a similar fashion in #stu${i}_total_points with the same number of decimal places shown. Also, during each iteration, the value of asgn1_points is added to asgn1_total , the value of asgn2_points is added to asgn2_total , and the value of grand_points is added to grand_total . script.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 function calculate () { // Variables to contain total values let asgn1_total = 0 , asgn2_total = 0 , grand_total = 0 ; // We'll use a constant to referece the <table> element to try to shorten the code. const TABLE = document . querySelector ( \"table\" ); // Calculate number of rows in between top and bottom row const NUMBER_OF_STUDENTS = TABLE . rows . length - 2 ; for ( let i = 1 ; i <= NUMBER_OF_STUDENTS ; ++ i ) { /** * Check if #stu?_asgn1 and #stu?_asgn2 are empty * If empty, place in 0 values. */ if ( document . querySelector ( `#stu ${ i } _asgn1` ). value == \"\" ) { document . querySelector ( `#stu ${ i } _asgn1` ). value = \"0\" ; } if ( document . querySelector ( `#stu ${ i } _asgn2` ). value == \"\" ) { document . querySelector ( `#stu ${ i } _asgn2` ). value = \"0\" ; } // calculate the marks from total percentage let asgn1_points = parseFloat ( document . querySelector ( `#stu ${ i } _asgn1` ). value ) * 0.2 ; let asgn2_points = parseFloat ( document . querySelector ( `#stu ${ i } _asgn2` ). value ) * 0.3 ; document . querySelector ( `#stu ${ i } _asgn1_points` ). value = asgn1_points . toFixed ( 2 ); document . querySelector ( `#stu ${ i } _asgn2_points` ). value = asgn2_points . toFixed ( 2 ); // calculate total marks for given student let stu_total = parseFloat ( document . querySelector ( `#stu ${ i } _asgn1_points` ). value ) + parseFloat ( document . querySelector ( `#stu ${ i } _asgn2_points` ). value ); document . querySelector ( `#stu ${ i } _total_points` ). value = stu_total . toFixed ( 2 ); // add to respective totals asgn1_total += asgn1_points ; asgn2_total += asgn2_points ; grand_total += stu_total ; } // Note: use parseFloat() to get number with decimal places, and parseInt() to get Integer values (non-decimal) // we will be adding code from here } function clearTable () { // Initialize Asgn 1 & Asgn 2 (100% each) to 0 document . querySelectorAll ( `input:not(:read-only)` ). forEach (( inputField ) => ( inputField . value = \"0\" )); // Initialize Asgn & Total Points to 0.00 document . querySelectorAll ( `input:read-only` ). forEach (( inputField ) => ( inputField . value = \"0.00\" )); } window . onload = clearTable (); Step 4: Generating Average Points Finally, we get to calculating the average points obtained among all students for Assignment 1, Assignment 2, and accumulatively. The averages for each component are stored in asgn1_avg , asgn2_avg , and grand_avg respectively. These averages are calculated by dividing their respective totals by the number of students (i.e., NUMBER_OF_STUDENTS ). The last course of action is to display them in the input fields with id attribute values #avg1 , #avg2 , #avg_total . script.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 function calculate () { // Variables to contain total values let asgn1_total = 0 , asgn2_total = 0 , grand_total = 0 ; // We'll use a constant to referece the <table> element to try to shorten the code. const TABLE = document . querySelector ( \"table\" ); // Calculate number of rows in between top and bottom row const NUMBER_OF_STUDENTS = TABLE . rows . length - 2 ; for ( let i = 1 ; i <= NUMBER_OF_STUDENTS ; ++ i ) { /** * Check if #stu?_asgn1 and #stu?_asgn2 are empty * If empty, place in 0 values. */ if ( document . querySelector ( `#stu ${ i } _asgn1` ). value == \"\" ) { document . querySelector ( `#stu ${ i } _asgn1` ). value = \"0\" ; } if ( document . querySelector ( `#stu ${ i } _asgn2` ). value == \"\" ) { document . querySelector ( `#stu ${ i } _asgn2` ). value = \"0\" ; } // calculate the marks from total percentage let asgn1_points = parseFloat ( document . querySelector ( `#stu ${ i } _asgn1` ). value ) * 0.2 ; let asgn2_points = parseFloat ( document . querySelector ( `#stu ${ i } _asgn2` ). value ) * 0.3 ; document . querySelector ( `#stu ${ i } _asgn1_points` ). value = asgn1_points . toFixed ( 2 ); document . querySelector ( `#stu ${ i } _asgn2_points` ). value = asgn2_points . toFixed ( 2 ); // calculate total marks for given student let stu_total = parseFloat ( document . querySelector ( `#stu ${ i } _asgn1_points` ). value ) + parseFloat ( document . querySelector ( `#stu ${ i } _asgn2_points` ). value ); document . querySelector ( `#stu ${ i } _total_points` ). value = stu_total . toFixed ( 2 ); // add to respective totals asgn1_total += asgn1_points ; asgn2_total += asgn2_points ; grand_total += stu_total ; } // Note: use parseFloat() to get number with decimal places, and parseInt() to get Integer values (non-decimal) // calculate average const asgn1_avg = asgn1_total / NUMBER_OF_STUDENTS ; const asgn2_avg = asgn2_total / NUMBER_OF_STUDENTS ; const grand_avg = grand_total / NUMBER_OF_STUDENTS ; // assign average to correct input fields document . querySelector ( `#avg1` ). value = asgn1_avg . toFixed ( 2 ); document . querySelector ( `#avg2` ). value = asgn2_avg . toFixed ( 2 ); document . querySelector ( `#avg_total` ). value = grand_avg . toFixed ( 2 ); // Note: toFixed(2) sets number values to display 2 decimal places } function clearTable () { // Initialize Asgn 1 & Asgn 2 (100% each) to 0 document . querySelectorAll ( `input:not(:read-only)` ). forEach (( inputField ) => ( inputField . value = \"0\" )); // Initialize Asgn & Total Points to 0.00 document . querySelectorAll ( `input:read-only` ). forEach (( inputField ) => ( inputField . value = \"0.00\" )); } window . onload = clearTable (); This is the end - you've successfully completed the Mark Demo page.. congrats!! Hopefully, this would have given you an idea or two on how to go about the similarly structured problem in your second assignment! \ud83d\ude0a","title":"Practical 07 (Activity 2): Mark Demo"},{"location":"lab07B/#practical-07-activity-2-mark-demo","text":"","title":"Practical 07 (Activity 2): Mark Demo"},{"location":"lab07B/#preparation","text":"You'll require the following font file to be kept in a subfolder called fonts in your project directory: SF Pro Display Additionally, CSS and JS files are to be kept in their own separate subfolders. style.css 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 @ font-face { font-family : \"SF Pro Display\" ; src : url ( \"../fonts/SF-Pro-Display-Regular.otf\" ); } * { font-family : \"SF Pro Display\" , sans-serif ; } h1 { font-size : 48 px ; } hr { margin : 2 rem 0 ; } button { background-color : transparent ; border-radius : 1 rem ; font-size : 24 px ; padding : 0.5 rem 1 rem ; } button : hover { box-shadow : 0 0 1 rem yellowgreen , 0 0 5 rem lemonchiffon ; cursor : pointer ; } button : active { background-color : lemonchiffon ; } . text-center { text-align : center ; } style_input.css 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 input [ type = \"number\" ] { text-align : right ; } input : read-only { background-color : khaki ; } /* For Chrome, Safari, Edge, Opera */ input :: -webkit-outer-spin-button , input :: -webkit-inner-spin-button { -webkit- appearance : none ; margin : 0 ; } /* For Firefox */ input [ type = \"number\" ] { -moz- appearance : textfield ; } style_table.css 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 table { border-collapse : collapse ; margin : 0 auto ; } table * { font-size : 24 px ; } th , td { border : 1 px solid black ; padding : 0.5 rem 1 rem ; } th { background-color : lightcyan ; } tr : not ( : first-of-type ) : not ( : last-of-type ) : hover { background-color : greenyellow ; } index.html 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" /> < meta http-equiv = \"X-UA-Compatible\" content = \"IE=edge\" /> < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" /> < title > Mark Demo </ title > < link rel = \"stylesheet\" href = \"css/style.css\" /> < link rel = \"stylesheet\" href = \"css/style_input.css\" /> < link rel = \"stylesheet\" href = \"css/style_table.css\" /> </ head > < body > < section class = \"text-center\" > < h1 > Mark Demo </ h1 > </ section > <!-- /section.text-center --> < table > < tr class = \"text-center\" > < th > # </ th > < th > Asgn 1 [100%] </ th > < th > Asgn 2 [100%] </ th > < th > Asgn 1 [20 points] </ th > < th > Asgn 2 [30 points] </ th > < th > Total [50 points] </ th > </ tr > < tr > < th > 1 </ th > < td >< input type = \"number\" name = \"stu1_asgn1\" id = \"stu1_asgn1\" /></ td > < td >< input type = \"number\" name = \"stu1_asgn2\" id = \"stu1_asgn2\" /></ td > < td >< input type = \"number\" name = \"stu1_asgn1_points\" id = \"stu1_asgn1_points\" readonly /></ td > < td >< input type = \"number\" name = \"stu1_asgn2_points\" id = \"stu1_asgn2_points\" readonly /></ td > < td >< input type = \"number\" name = \"stu1_total_points\" id = \"stu1_total_points\" readonly /></ td > </ tr > < tr > < th > 2 </ th > < td >< input type = \"number\" name = \"stu2_asgn1\" id = \"stu2_asgn1\" /></ td > < td >< input type = \"number\" name = \"stu2_asgn2\" id = \"stu2_asgn2\" /></ td > < td >< input type = \"number\" name = \"stu2_asgn1_points\" id = \"stu2_asgn1_points\" readonly /></ td > < td >< input type = \"number\" name = \"stu2_asgn2_points\" id = \"stu2_asgn2_points\" readonly /></ td > < td >< input type = \"number\" name = \"stu2_total_points\" id = \"stu2_total_points\" readonly /></ td > </ tr > < tr > < th > 3 </ th > < td >< input type = \"number\" name = \"stu3_asgn1\" id = \"stu3_asgn1\" /></ td > < td >< input type = \"number\" name = \"stu3_asgn2\" id = \"stu3_asgn2\" /></ td > < td >< input type = \"number\" name = \"stu3_asgn1_points\" id = \"stu3_asgn1_points\" readonly /></ td > < td >< input type = \"number\" name = \"stu3_asgn2_points\" id = \"stu3_asgn2_points\" readonly /></ td > < td >< input type = \"number\" name = \"stu3_total_points\" id = \"stu3_total_points\" readonly /></ td > </ tr > < tr > < th colspan = \"3\" > Average </ th > < th >< input type = \"number\" name = \"avg1\" id = \"avg1\" readonly /></ th > < th >< input type = \"number\" name = \"avg2\" id = \"avg2\" readonly /></ th > < th >< input type = \"number\" name = \"avg_total\" id = \"avg_total\" readonly /></ th > </ tr > </ table > <!-- /table --> < hr /> < section class = \"text-center\" > < button onclick = \"calculate();\" > Calculate Total and Average </ button > < button onclick = \"clearTable();\" > Clear Table </ button > </ section > <!-- /section.text-center --> < script src = \"js/script.js\" ></ script > </ body > </ html > script.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 function calculate () { // Variables to contain total values let asgn1_total = 0 , asgn2_total = 0 , grand_total = 0 ; // We'll use a constant to referece the <table> element to try to shorten the code. const TABLE = document . querySelector ( \"table\" ); // Calculate number of rows in between top and bottom row const NUMBER_OF_STUDENTS = TABLE . rows . length - 2 ; // we will be adding code from here } function clearTable () { // Initialize Asgn 1 & Asgn 2 (100% each) to 0 document . querySelectorAll ( `input:not(:read-only)` ). forEach (( inputField ) => ( inputField . value = \"0\" )); // Initialize Asgn & Total Points to 0.00 document . querySelectorAll ( `input:read-only` ). forEach (( inputField ) => ( inputField . value = \"0.00\" )); } window . onload = clearTable (); You should be able to see the following in your web browser: Multiplication Box Page","title":"Preparation"},{"location":"lab07B/#motivation","text":"This intermediate-level activity will provide a guide as to how you can effectively use program control structures to skillfully loop through the same calculation process with different sets of inputs at a time. Here, each row represents a student's record. Each student would have had 2 assessment components graded on a 0 to 100 percent scale. When the button at the bottom of the page (i.e., Calculate Total and Average) is selected, each student's Assignment 1 and 2's respective point weightage is calculated based on the input marks. This is followed up by the calculation of points obtained by each student, along with the cumulative average of each point component. The button has an onclick attribute that invokes the calculate() function when clicked on. Another button to clear the table is present alongside while having its functionality tied in with the clearTable() function.","title":"Motivation"},{"location":"lab07B/#understanding-the-cleartable-function","text":"The clearTable() function contains two statements. The first statement targets all input fields not set to read-only to \"0\", whilst the second statement sets the remaining input fields' value attribute to \"0.00\". Both statements use the forEach() method, but a regular for loop will also suffice here. The forEach() method retrieves each related input field and autonomously sets their value attributes accordingly.","title":"Understanding the clearTable() Function"},{"location":"lab07B/#step-1-obtaining-values-from-input-fields","text":"The starting point in script.js should give some light onto the function of concern: the calculate() function. At first, we initialize variables asgn1_total , asgn2_total and grand_total to contain the total sum of all points. We will revisit them later, but for now we initialize all of them with the value 0. We will also make reference to the <table> element a lot here. In order to shorten the code as to simplify the process, we declare a constant variable named TABLE referencing this <table> element. In addition, we refer to the number of student records to be put in as TABLE.rows.length - 2 . Of course, we can immediately take it as just 3 since there isn't any functionality to add more rows that'll question whether the number of records will stay put. Not only that, the way you calculate the number of students will depend on whether you semantic tags within your <table> element; if so, the value of NUMBER_OF_STUDENTS constant should be calculated differently. script.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 function calculate () { // Variables to contain total values let asgn1_total = 0 , asgn2_total = 0 , grand_total = 0 ; // We'll use a constant to referece the <table> element to try to shorten the code. const TABLE = document . querySelector ( \"table\" ); // Calculate number of rows in between top and bottom row const NUMBER_OF_STUDENTS = TABLE . rows . length - 2 ; // we will be adding code from here } function clearTable () { // Initialize Asgn 1 & Asgn 2 (100% each) to 0 document . querySelectorAll ( `input:not(:read-only)` ). forEach (( inputField ) => ( inputField . value = \"0\" )); // Initialize Asgn & Total Points to 0.00 document . querySelectorAll ( `input:read-only` ). forEach (( inputField ) => ( inputField . value = \"0.00\" )); } window . onload = clearTable ();","title":"Step 1: Obtaining Values from Input Fields"},{"location":"lab07B/#step-2-catering-for-unfilled-input-fields","text":"Now here's the bit that would take many lines if done without any program control structures in place. We mitigate needing to write numerous lines of code by introducing a for loop that will iterate over each row while obtaining values from each of its associated input fields. The id attribute values for each input field referencing the total marks (100%) for each student is named in a fashion similar to this: #stu${i}_asgn1 and #stu${i}_asgn2 . More specifically, you will find input fields with the following id attribute values: Student 1: #stu1_asgn1 , #stu1_asgn2 Student 2: #stu2_asgn1 , #stu2_asgn2 Student 3: #stu3_asgn1 , #stu3_asgn2 Notice a pattern in how the id attribute values are aptly named? By iterating an iterator variable (we'll be using i here), we can run this in a for loop to write out each required statement once! The first order of action in this for loop is to check whether there are any unfilled input fields in any of the six input fields with the aforementioned id attribute values. Should there be any, they will be automatically filled with \"0\" . This will help prevent errors during the calculation of total and average points. script.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 function calculate () { // Variables to contain total values let asgn1_total = 0 , asgn2_total = 0 , grand_total = 0 ; // We'll use a constant to referece the <table> element to try to shorten the code. const TABLE = document . querySelector ( \"table\" ); // Calculate number of rows in between top and bottom row const NUMBER_OF_STUDENTS = TABLE . rows . length - 2 ; for ( let i = 1 ; i <= NUMBER_OF_STUDENTS ; ++ i ) { /** * Check if #stu?_asgn1 and #stu?_asgn2 are empty * If empty, place in 0 values. */ if ( document . querySelector ( `#stu ${ i } _asgn1` ). value == \"\" ) { document . querySelector ( `#stu ${ i } _asgn1` ). value = \"0\" ; } if ( document . querySelector ( `#stu ${ i } _asgn2` ). value == \"\" ) { document . querySelector ( `#stu ${ i } _asgn2` ). value = \"0\" ; } // we will be adding code from here } } function clearTable () { // Initialize Asgn 1 & Asgn 2 (100% each) to 0 document . querySelectorAll ( `input:not(:read-only)` ). forEach (( inputField ) => ( inputField . value = \"0\" )); // Initialize Asgn & Total Points to 0.00 document . querySelectorAll ( `input:read-only` ). forEach (( inputField ) => ( inputField . value = \"0.00\" )); } window . onload = clearTable (); A Check The procedure above doesn't cater for negative marks. Assuming that the marks entered should be nonnegative, how would you go about catering for this requirement?","title":"Step 2: Catering for Unfilled Input Fields"},{"location":"lab07B/#step-3-generating-total-points","text":"Now we get to calculating the total points obtained from the entered Assignment 1 and 2 marks. From the table, we can probably guess that the total points obtained for the Assignment 1 component is to be scaled from 100% to 20 points (i.e., multiply by 0.2) Assignment 2 component is to be scaled from 100% to 30 points (i.e., multiply by 0.3) During each for loop iteration, we store the points obtained for Assignment 1 and Assignment 2 into asgn1_points and asgn2_points respectively. Then from here, we display them in #stu${i}_asgn1_points and #stu${i}_asgn2_points , where i still represents the iteration number/row count/student count. These point values are displayed in 2 decimal places using an appended .toFixed() function, which takes in 2 as the parameter denoting the number of decimal places to be shown. After both asgn1_points and asgn2_points have been calculated, we proceed with adding both of them to stu_total before displaying them in a similar fashion in #stu${i}_total_points with the same number of decimal places shown. Also, during each iteration, the value of asgn1_points is added to asgn1_total , the value of asgn2_points is added to asgn2_total , and the value of grand_points is added to grand_total . script.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 function calculate () { // Variables to contain total values let asgn1_total = 0 , asgn2_total = 0 , grand_total = 0 ; // We'll use a constant to referece the <table> element to try to shorten the code. const TABLE = document . querySelector ( \"table\" ); // Calculate number of rows in between top and bottom row const NUMBER_OF_STUDENTS = TABLE . rows . length - 2 ; for ( let i = 1 ; i <= NUMBER_OF_STUDENTS ; ++ i ) { /** * Check if #stu?_asgn1 and #stu?_asgn2 are empty * If empty, place in 0 values. */ if ( document . querySelector ( `#stu ${ i } _asgn1` ). value == \"\" ) { document . querySelector ( `#stu ${ i } _asgn1` ). value = \"0\" ; } if ( document . querySelector ( `#stu ${ i } _asgn2` ). value == \"\" ) { document . querySelector ( `#stu ${ i } _asgn2` ). value = \"0\" ; } // calculate the marks from total percentage let asgn1_points = parseFloat ( document . querySelector ( `#stu ${ i } _asgn1` ). value ) * 0.2 ; let asgn2_points = parseFloat ( document . querySelector ( `#stu ${ i } _asgn2` ). value ) * 0.3 ; document . querySelector ( `#stu ${ i } _asgn1_points` ). value = asgn1_points . toFixed ( 2 ); document . querySelector ( `#stu ${ i } _asgn2_points` ). value = asgn2_points . toFixed ( 2 ); // calculate total marks for given student let stu_total = parseFloat ( document . querySelector ( `#stu ${ i } _asgn1_points` ). value ) + parseFloat ( document . querySelector ( `#stu ${ i } _asgn2_points` ). value ); document . querySelector ( `#stu ${ i } _total_points` ). value = stu_total . toFixed ( 2 ); // add to respective totals asgn1_total += asgn1_points ; asgn2_total += asgn2_points ; grand_total += stu_total ; } // Note: use parseFloat() to get number with decimal places, and parseInt() to get Integer values (non-decimal) // we will be adding code from here } function clearTable () { // Initialize Asgn 1 & Asgn 2 (100% each) to 0 document . querySelectorAll ( `input:not(:read-only)` ). forEach (( inputField ) => ( inputField . value = \"0\" )); // Initialize Asgn & Total Points to 0.00 document . querySelectorAll ( `input:read-only` ). forEach (( inputField ) => ( inputField . value = \"0.00\" )); } window . onload = clearTable ();","title":"Step 3: Generating Total Points"},{"location":"lab07B/#step-4-generating-average-points","text":"Finally, we get to calculating the average points obtained among all students for Assignment 1, Assignment 2, and accumulatively. The averages for each component are stored in asgn1_avg , asgn2_avg , and grand_avg respectively. These averages are calculated by dividing their respective totals by the number of students (i.e., NUMBER_OF_STUDENTS ). The last course of action is to display them in the input fields with id attribute values #avg1 , #avg2 , #avg_total . script.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 function calculate () { // Variables to contain total values let asgn1_total = 0 , asgn2_total = 0 , grand_total = 0 ; // We'll use a constant to referece the <table> element to try to shorten the code. const TABLE = document . querySelector ( \"table\" ); // Calculate number of rows in between top and bottom row const NUMBER_OF_STUDENTS = TABLE . rows . length - 2 ; for ( let i = 1 ; i <= NUMBER_OF_STUDENTS ; ++ i ) { /** * Check if #stu?_asgn1 and #stu?_asgn2 are empty * If empty, place in 0 values. */ if ( document . querySelector ( `#stu ${ i } _asgn1` ). value == \"\" ) { document . querySelector ( `#stu ${ i } _asgn1` ). value = \"0\" ; } if ( document . querySelector ( `#stu ${ i } _asgn2` ). value == \"\" ) { document . querySelector ( `#stu ${ i } _asgn2` ). value = \"0\" ; } // calculate the marks from total percentage let asgn1_points = parseFloat ( document . querySelector ( `#stu ${ i } _asgn1` ). value ) * 0.2 ; let asgn2_points = parseFloat ( document . querySelector ( `#stu ${ i } _asgn2` ). value ) * 0.3 ; document . querySelector ( `#stu ${ i } _asgn1_points` ). value = asgn1_points . toFixed ( 2 ); document . querySelector ( `#stu ${ i } _asgn2_points` ). value = asgn2_points . toFixed ( 2 ); // calculate total marks for given student let stu_total = parseFloat ( document . querySelector ( `#stu ${ i } _asgn1_points` ). value ) + parseFloat ( document . querySelector ( `#stu ${ i } _asgn2_points` ). value ); document . querySelector ( `#stu ${ i } _total_points` ). value = stu_total . toFixed ( 2 ); // add to respective totals asgn1_total += asgn1_points ; asgn2_total += asgn2_points ; grand_total += stu_total ; } // Note: use parseFloat() to get number with decimal places, and parseInt() to get Integer values (non-decimal) // calculate average const asgn1_avg = asgn1_total / NUMBER_OF_STUDENTS ; const asgn2_avg = asgn2_total / NUMBER_OF_STUDENTS ; const grand_avg = grand_total / NUMBER_OF_STUDENTS ; // assign average to correct input fields document . querySelector ( `#avg1` ). value = asgn1_avg . toFixed ( 2 ); document . querySelector ( `#avg2` ). value = asgn2_avg . toFixed ( 2 ); document . querySelector ( `#avg_total` ). value = grand_avg . toFixed ( 2 ); // Note: toFixed(2) sets number values to display 2 decimal places } function clearTable () { // Initialize Asgn 1 & Asgn 2 (100% each) to 0 document . querySelectorAll ( `input:not(:read-only)` ). forEach (( inputField ) => ( inputField . value = \"0\" )); // Initialize Asgn & Total Points to 0.00 document . querySelectorAll ( `input:read-only` ). forEach (( inputField ) => ( inputField . value = \"0.00\" )); } window . onload = clearTable (); This is the end - you've successfully completed the Mark Demo page.. congrats!! Hopefully, this would have given you an idea or two on how to go about the similarly structured problem in your second assignment! \ud83d\ude0a","title":"Step 4: Generating Average Points"},{"location":"lab08/","text":"Practical 08: Introducing PHP into HTML In this practical activity, we will be utilizing different sets of data in PHP variables to modify how a webpage appears. We will only be dabbling with one PHP file, namely index.php . Additional styles are provided as embedded CSS here. Note If you're not sure how to set up your machine for PHP development, or where to place your files and how to open the files from that location, I strongly advise you to check out setting up XAMPP here . You may need to look elsewhere if you have anything else other than XAMPP or MAMP. Activity Prepare index.php like as follows: index.php 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" /> < meta http-equiv = \"X-UA-Compatible\" content = \"IE=edge\" /> < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" /> < title > My PHP Page </ title > < style > table , th , td { border : 1 px solid black ; } table { border-collapse : collapse ; } th , td { padding : 5 px ; } </ style > </ head > < body > < table > < thead > < tr > < th > No. </ th > < th > Name </ th > < th > Class </ th > </ tr > </ thead > < tbody ></ tbody > </ table > </ body > </ html > You should see the following output: Note that the table as shown here does not have any other rows displayed aside from the header row. We will now have PHP utilize the array values as stored in the following PHP code block to populate the table. Place the following PHP block on top of index.php : 1 2 3 4 <?php $students = [ \"Mamat\" , \"Minah\" , \"Joyah\" , \"Adam\" ]; $ids = [ \"101A\" , \"102B\" , \"103C\" , \"201F\" ]; ?> Add the following code block in between the <tbody></tbody> tags: 1 2 3 4 5 6 7 8 9 10 11 <?php for ( $i = 0 ; $i < sizeof ( $students ); $i ++ ) { ?> <tr> <th> <? = $i + 1 ; ?> </th> <td> <? = $students [ $i ]; ?> </td> <td> <? = $ids [ $i ]; ?> </td> </tr> <?php } ?> The code block that's provided here makes use of a for loop to iterate over the elements in the array. The for loop as shown here makes it so that a new <tr> row element along with its <th> and <td> elements are created during each iteration. Since there are 4 items in the array, the for loop ends up creating 4 rows of data. The highlighted lines show that a PHP block can be prematurely broken to encapsulate HTML code as part of your program control structure's block. This will apply for all loop structures and conditional statements. You may also notice that in between lines 5 to 7, they make use of special expression tags that are purposed to print out the values of expressions and/or PHP variables. Let's see this in action again. Task 1 Create an empty <h1></h1> tag before the table in your HTML, and add the following variable in the top PHP block: 1 2 3 4 5 <?php $heading = \"My First PHP Page\" ; $students = [ \"Mamat\" , \"Minah\" , \"Joyah\" , \"Adam\" ]; $ids = [ \"101A\" , \"102B\" , \"103C\" , \"201F\" ]; ?> Hence or otherwise, add the value of $heading in the newly-created <h1></h1> element. You should now see something like as follows: Solution 1 <h1> <? = $heading ; ?> </h1> Back to the Activity Narrative With PHP, you can also create different views with conditional statements. Add one more PHP variable in the top PHP block: 1 2 3 4 5 6 <?php $forbidden = true ; $heading = \"My First PHP Page\" ; $students = [ \"Mamat\" , \"Minah\" , \"Joyah\" , \"Adam\" ]; $ids = [ \"101A\" , \"102B\" , \"103C\" , \"201F\" ]; ?> Task 2 Modify the webpage so that the heading and table only appear if $forbidden is false . Otherwise, the webpage should display this message in a single (and separate) <h1> element: Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 <?php if ( ! $forbidden ) { ?> <h1> <? = $heading ; ?> </h1> <table> <thead> <tr> <th>No.</th> <th>Name</th> <th>Class</th> </tr> </thead> <tbody> <?php for ( $i = 0 ; $i < sizeof ( $students ); $i ++ ) { ?> <tr> <th> <? = $i + 1 ; ?> </th> <td> <? = $students [ $i ]; ?> </td> <td> <? = $ids [ $i ]; ?> </td> </tr> <?php } ?> </tbody> </table> <?php } else { ?> <h1>You are unauthorized to view the data on this page.</h1> <?php } ?> We will use program control structures more extensively in the next practical exercise. By now, hopefully you understand how to leverage PHP to prepare different views based on conditions.","title":"Practical 08: Introducing PHP into HTML"},{"location":"lab08/#practical-08-introducing-php-into-html","text":"In this practical activity, we will be utilizing different sets of data in PHP variables to modify how a webpage appears. We will only be dabbling with one PHP file, namely index.php . Additional styles are provided as embedded CSS here. Note If you're not sure how to set up your machine for PHP development, or where to place your files and how to open the files from that location, I strongly advise you to check out setting up XAMPP here . You may need to look elsewhere if you have anything else other than XAMPP or MAMP.","title":"Practical 08: Introducing PHP into HTML"},{"location":"lab08/#activity","text":"Prepare index.php like as follows: index.php 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" /> < meta http-equiv = \"X-UA-Compatible\" content = \"IE=edge\" /> < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" /> < title > My PHP Page </ title > < style > table , th , td { border : 1 px solid black ; } table { border-collapse : collapse ; } th , td { padding : 5 px ; } </ style > </ head > < body > < table > < thead > < tr > < th > No. </ th > < th > Name </ th > < th > Class </ th > </ tr > </ thead > < tbody ></ tbody > </ table > </ body > </ html > You should see the following output: Note that the table as shown here does not have any other rows displayed aside from the header row. We will now have PHP utilize the array values as stored in the following PHP code block to populate the table. Place the following PHP block on top of index.php : 1 2 3 4 <?php $students = [ \"Mamat\" , \"Minah\" , \"Joyah\" , \"Adam\" ]; $ids = [ \"101A\" , \"102B\" , \"103C\" , \"201F\" ]; ?> Add the following code block in between the <tbody></tbody> tags: 1 2 3 4 5 6 7 8 9 10 11 <?php for ( $i = 0 ; $i < sizeof ( $students ); $i ++ ) { ?> <tr> <th> <? = $i + 1 ; ?> </th> <td> <? = $students [ $i ]; ?> </td> <td> <? = $ids [ $i ]; ?> </td> </tr> <?php } ?> The code block that's provided here makes use of a for loop to iterate over the elements in the array. The for loop as shown here makes it so that a new <tr> row element along with its <th> and <td> elements are created during each iteration. Since there are 4 items in the array, the for loop ends up creating 4 rows of data. The highlighted lines show that a PHP block can be prematurely broken to encapsulate HTML code as part of your program control structure's block. This will apply for all loop structures and conditional statements. You may also notice that in between lines 5 to 7, they make use of special expression tags that are purposed to print out the values of expressions and/or PHP variables. Let's see this in action again.","title":"Activity"},{"location":"lab08/#task-1","text":"Create an empty <h1></h1> tag before the table in your HTML, and add the following variable in the top PHP block: 1 2 3 4 5 <?php $heading = \"My First PHP Page\" ; $students = [ \"Mamat\" , \"Minah\" , \"Joyah\" , \"Adam\" ]; $ids = [ \"101A\" , \"102B\" , \"103C\" , \"201F\" ]; ?> Hence or otherwise, add the value of $heading in the newly-created <h1></h1> element. You should now see something like as follows: Solution 1 <h1> <? = $heading ; ?> </h1>","title":"Task 1"},{"location":"lab08/#back-to-the-activity-narrative","text":"With PHP, you can also create different views with conditional statements. Add one more PHP variable in the top PHP block: 1 2 3 4 5 6 <?php $forbidden = true ; $heading = \"My First PHP Page\" ; $students = [ \"Mamat\" , \"Minah\" , \"Joyah\" , \"Adam\" ]; $ids = [ \"101A\" , \"102B\" , \"103C\" , \"201F\" ]; ?>","title":"Back to the Activity Narrative"},{"location":"lab08/#task-2","text":"Modify the webpage so that the heading and table only appear if $forbidden is false . Otherwise, the webpage should display this message in a single (and separate) <h1> element: Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 <?php if ( ! $forbidden ) { ?> <h1> <? = $heading ; ?> </h1> <table> <thead> <tr> <th>No.</th> <th>Name</th> <th>Class</th> </tr> </thead> <tbody> <?php for ( $i = 0 ; $i < sizeof ( $students ); $i ++ ) { ?> <tr> <th> <? = $i + 1 ; ?> </th> <td> <? = $students [ $i ]; ?> </td> <td> <? = $ids [ $i ]; ?> </td> </tr> <?php } ?> </tbody> </table> <?php } else { ?> <h1>You are unauthorized to view the data on this page.</h1> <?php } ?> We will use program control structures more extensively in the next practical exercise. By now, hopefully you understand how to leverage PHP to prepare different views based on conditions.","title":"Task 2"},{"location":"lab09/","text":"Practical 09: Introducing PHP into Forms In this practical activity, we will be implementing an order form for Wendy's Bakery, a fictional bakery company. Right now, Wendy's HTML programmer has gotten as far as setting up an order for for the cakes Wendy sells. The order form is shown as in the figure below. This is a relatively simple order form, similar to many which you hve probably seen while surfing. The first thing Wendy would like to be able to do is to know what her customer ordered, work out the total of the customer's order, and how much sales tax is payable on the order. Part of the HTML for this is shown in Listing 1. In the form, we have set the form's action to be the name of the PHP script that will process the customer's order and also the name of the form fields. Listing 1 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 < form action = \"process-order.php\" method = \"post\" > < table > < tr > < th > Item </ th > < th > Quantity </ th > </ tr > < tr > < td > Cupcakes </ td > < td > < input type = \"text\" name = \"cupcakeqty\" size = \"3\" maxlength = \"3\" /> </ td > </ tr > < tr > < td > Puffs </ td > < td > < input type = \"text\" name = \"puffqty\" size = \"3\" maxlength = \"3\" /> </ td > </ tr > < tr > < td > Muffins </ td > < td > < input type = \"text\" name = \"muffinqty\" size = \"3\" maxlength = \"3\" /> </ td > </ tr > < tr > < td colspan = \"2\" > < input type = \"submit\" value = \"Submit Order\" /> </ td > </ tr > </ table > </ form > We'll proceed to create our PHP file surrounding this form element. Task 1: Embedding PHP in HTML To process the form, we'll need to create the script mentioned in the action attribute of the <form> tag called process-order.php . Prepare process-order.php starting off with the following HTML code: process-order.php 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 <!DOCTYPE html> < html > < head > < meta charset = \"UTF-8\" /> < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" /> < title > Wendy's Bakery - Order Form </ title > < style > . font-bold { font-weight : bold ; } th { background-color : #cccccc ; } th , td { padding : 0.5 rem 1.5 rem ; } form td { text-align : center ; } # freight-table tbody td { text-align : right ; } # order-details { margin-bottom : 1 rem ; } </ style > </ head > < body > < h1 > Wendy's Bakery </ h1 > < h2 > Order Results </ h2 > <!-- Listing 1 goes here --> </ body > </ html > Task 2: Conditional Display of Information Modify process-order.php such that it displays the following when the order form is filled and the Submit button is clicked on. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 <?php if ( $_SERVER [ 'REQUEST_METHOD' ] == 'POST' ) { // If a form with POST superglobal variable is sent, display this message echo \"<p>Order processed</p>\" ; } else { /** * NOTE: * You can break through to HTML in the middle of a PHP block, * especially if you have a lot of HTML elements to display under * set conditions. */ ?> <!-- Listing 1 goes here --> <?php } ?> Tip In place of where you immediately insert Listing 1, replace it with the given code snippet. This code snippet has a line where you insert Listing 1 in as well. Task 3: Adding Dynamic Content Modify process-order.php to display the date and time when the form was submitted. 1 2 3 4 5 6 7 8 9 10 <?php if ( $_SERVER [ 'REQUEST_METHOD' ] == 'POST' ) { // If a form with POST superglobal variable is sent, display this message echo \"<p>Order processed on \" . date ( \"F jS Y, l, H:i:s\" ) . \"</p>\" ; } else { ?> <!-- Listing 1 goes here --> <?php } ?> DateTime in PHP Read more here: PHP DateTime Task 4: Accessing Variables Within the same PHP script, add some lines to display the customer's order list. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 <?php if ( $_SERVER [ 'REQUEST_METHOD' ] == 'POST' ) { // If a form with POST superglobal variable is sent, display this message echo \"<p>Order processed on \" . date ( \"F jS Y, l, H:i:s\" ) . \"</p>\" ; ?> <p class=\"font-bold\">Your order is as follows:</p> <p> 20 cupcakes<br> 10 puffs<br> 15 muffins </p> <?php } else { ?> <!-- Listing 1 goes here --> <?php } ?> Task 5: Assigning Values to Variables On Wendy's site, we want to work out the total number of items ordered and the total amount payable. Assume the prices of each item are as follows: Cupcake = $2.50 Puff = $3.00 Muffin = $4.00 Sales Tax = 6% of the total amount Within the same script, add some lines to display the following additional output: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 <?php if ( $_SERVER [ 'REQUEST_METHOD' ] == 'POST' ) { // If a form with POST superglobal variable is sent, display this message echo \"<p>Order processed on \" . date ( \"F jS Y, l, H:i:s\" ) . \"</p>\" ; ?> <p class=\"font-bold\">Your order is as follows:</p> <p> 20 cupcakes<br> 10 puffs<br> 15 muffins </p> <p> Items Ordered: 3<br> Subtotal: $140.00<br> Total including tax: $148.40<br> </p> <?php } else { ?> <!-- Listing 1 goes here --> <?php } ?> Task 6: Making Decisions with Conditionals Modify the script such that it alerts if the customer has not ordered anything from Wendy. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 <?php if ( $_SERVER [ 'REQUEST_METHOD' ] == 'POST' ) { // If a form with POST superglobal variable is sent, display this message echo \"<p>Order processed on \" . date ( \"F jS Y, l, H:i:s\" ) . \"</p>\" ; if ( $_POST [ \"cupcakeqty\" ] === \"\" && $_POST [ \"puffqty\" ] === \"\" && $_POST [ \"muffinqty\" ] === \"\" ) : // Display message if nothing has been ordered ?> <p>You did not order anything from the previous page!</p> <?php else : ?> <p class=\"font-bold\">Your order is as follows:</p> <p> 20 cupcakes<br> 10 puffs<br> 15 muffins </p> <p> Items Ordered: 3<br> Subtotal: $140.00<br> Total including tax: $148.40<br> </p> <?php endif ; } else { ?> <!-- Listing 1 goes here --> <?php } ?> Otherwise, the script should display the items the customer ordered from Wendy. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 <?php if ( $_SERVER [ 'REQUEST_METHOD' ] == 'POST' ) { // If a form with POST superglobal variable is sent, display this message echo \"<p>Order processed on \" . date ( \"F jS Y, l, H:i:s\" ) . \"</p>\" ; if ( $_POST [ \"cupcakeqty\" ] === \"\" && $_POST [ \"puffqty\" ] === \"\" && $_POST [ \"muffinqty\" ] === \"\" ) : // Display message if nothing has been ordered ?> <p>You did not order anything from the previous page!</p> <?php else : $qty = array (); if ( $_POST [ \"cupcakeqty\" ] !== \"\" ) $qty [ \"cupcake\" ] = ( int )( $_POST [ \"cupcakeqty\" ]); // cupcake quantity if ( $_POST [ \"puffqty\" ] !== \"\" ) $qty [ \"puff\" ] = ( int )( $_POST [ \"puffqty\" ]); // puff quantity if ( $_POST [ \"muffinqty\" ] !== \"\" ) $qty [ \"muffin\" ] = ( int )( $_POST [ \"muffinqty\" ]); // muffin quantity ?> <p class=\"font-bold\">Your order is as follows:</p> <p> <? = $qty [ \"cupcake\" ]; ?> cupcakes<br> <? = $qty [ \"puff\" ]; ?> puffs<br> <? = $qty [ \"muffin\" ]; ?> muffins </p> <p> Items Ordered: <? = sizeof ( $qty ); ?> <?php $price = [ \"cupcake\" => 2.50 , \"puff\" => 3 , \"muffin\" => 4 ]; $subtotal = $qty [ \"cupcake\" ] * $price [ \"cupcake\" ] + $qty [ \"puff\" ] * $price [ \"puff\" ] + $qty [ \"muffin\" ] * $price [ \"muffin\" ]; $total = $subtotal * 1.06 ; ?> Subtotal: $ <? = number_format ( $subtotal , 2 ); ?> <br> Total including tax: $ <? = number_format ( $total , 2 ); ?> <br> </p> <?php endif ; } else { ?> <!-- Listing 1 goes here --> <?php } ?> Note You may have noticed that there are some errors when you only fill up the form partially (to make it such that you only want some of the items, not all). Try to find a way to circumvent this issue (i.e., by placing an if statement, modifying the form input element, etc.). See if you can find any loopholes in the web application at this point and look to see if you can fix them as much as possible. Task 7: elseif Statements Wendy provides discounts for large orders of cupcakes. Less than 10 cupcakes: no discount 10-49 cupcakes: 5% discount 50-99 cupcakes: 10% discount \u2265100 cupcakes: 20% discount Modify process-order.php such that it calculates the discount using conditions and if-else and elseif statements. Task 8: switch Statements Wendy wants to know what forms of advertising are working for her. Insert a <select> element to the form to retrieve that information. < tr > < td colspan = \"2\" > < p >< label for = \"find\" > How did you find Wendy's? </ label ></ p > < select name = \"find\" id = \"find\" > < option disabled selected > Select option </ option > < option value = \"a\" > I am a regular customer. </ option > < option value = \"b\" > TV Advertising </ option > < option value = \"c\" > Phone Directory </ option > < option value = \"d\" > Word of Mouth </ option > </ select > </ td > </ tr > Use the appropriate selection statements to handle the variables and display the information in process-order.php . Task 9: Iteration and Repeating Actions Wendy wants a table displaying the freight cost that is to be added to the customer's order. With the courier Wendy's uses, the cost of freight depends on the distance the parcel is being shipped. We want our freight table to resemble the following: Generate the same freight table using loop structures. <table id=\"freight-table\"> <thead> <tr> <th>Distance</th> <th>Cost</th> </tr> </thead> <tbody> <?php $freight = [ [ \"distance\" => 50 , \"cost\" => 5 ], [ \"distance\" => 100 , \"cost\" => 10 ], [ \"distance\" => 150 , \"cost\" => 15 ], [ \"distance\" => 200 , \"cost\" => 20 ], [ \"distance\" => 250 , \"cost\" => 25 ], ]; // var_dump($freight); foreach ( $freight as $f ) { ?> <tr> <td> <? = $f [ \"distance\" ]; ?> </td> <td> <? = $f [ \"cost\" ]; ?> </td> </tr> <?php } ?> </tbody> </table>","title":"Practical 09: Introducing PHP into Forms"},{"location":"lab09/#practical-09-introducing-php-into-forms","text":"In this practical activity, we will be implementing an order form for Wendy's Bakery, a fictional bakery company. Right now, Wendy's HTML programmer has gotten as far as setting up an order for for the cakes Wendy sells. The order form is shown as in the figure below. This is a relatively simple order form, similar to many which you hve probably seen while surfing. The first thing Wendy would like to be able to do is to know what her customer ordered, work out the total of the customer's order, and how much sales tax is payable on the order. Part of the HTML for this is shown in Listing 1. In the form, we have set the form's action to be the name of the PHP script that will process the customer's order and also the name of the form fields.","title":"Practical 09: Introducing PHP into Forms"},{"location":"lab09/#listing-1","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 < form action = \"process-order.php\" method = \"post\" > < table > < tr > < th > Item </ th > < th > Quantity </ th > </ tr > < tr > < td > Cupcakes </ td > < td > < input type = \"text\" name = \"cupcakeqty\" size = \"3\" maxlength = \"3\" /> </ td > </ tr > < tr > < td > Puffs </ td > < td > < input type = \"text\" name = \"puffqty\" size = \"3\" maxlength = \"3\" /> </ td > </ tr > < tr > < td > Muffins </ td > < td > < input type = \"text\" name = \"muffinqty\" size = \"3\" maxlength = \"3\" /> </ td > </ tr > < tr > < td colspan = \"2\" > < input type = \"submit\" value = \"Submit Order\" /> </ td > </ tr > </ table > </ form > We'll proceed to create our PHP file surrounding this form element.","title":"Listing 1"},{"location":"lab09/#task-1-embedding-php-in-html","text":"To process the form, we'll need to create the script mentioned in the action attribute of the <form> tag called process-order.php . Prepare process-order.php starting off with the following HTML code: process-order.php 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 <!DOCTYPE html> < html > < head > < meta charset = \"UTF-8\" /> < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" /> < title > Wendy's Bakery - Order Form </ title > < style > . font-bold { font-weight : bold ; } th { background-color : #cccccc ; } th , td { padding : 0.5 rem 1.5 rem ; } form td { text-align : center ; } # freight-table tbody td { text-align : right ; } # order-details { margin-bottom : 1 rem ; } </ style > </ head > < body > < h1 > Wendy's Bakery </ h1 > < h2 > Order Results </ h2 > <!-- Listing 1 goes here --> </ body > </ html >","title":"Task 1: Embedding PHP in HTML"},{"location":"lab09/#task-2-conditional-display-of-information","text":"Modify process-order.php such that it displays the following when the order form is filled and the Submit button is clicked on. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 <?php if ( $_SERVER [ 'REQUEST_METHOD' ] == 'POST' ) { // If a form with POST superglobal variable is sent, display this message echo \"<p>Order processed</p>\" ; } else { /** * NOTE: * You can break through to HTML in the middle of a PHP block, * especially if you have a lot of HTML elements to display under * set conditions. */ ?> <!-- Listing 1 goes here --> <?php } ?> Tip In place of where you immediately insert Listing 1, replace it with the given code snippet. This code snippet has a line where you insert Listing 1 in as well.","title":"Task 2: Conditional Display of Information"},{"location":"lab09/#task-3-adding-dynamic-content","text":"Modify process-order.php to display the date and time when the form was submitted. 1 2 3 4 5 6 7 8 9 10 <?php if ( $_SERVER [ 'REQUEST_METHOD' ] == 'POST' ) { // If a form with POST superglobal variable is sent, display this message echo \"<p>Order processed on \" . date ( \"F jS Y, l, H:i:s\" ) . \"</p>\" ; } else { ?> <!-- Listing 1 goes here --> <?php } ?> DateTime in PHP Read more here: PHP DateTime","title":"Task 3: Adding Dynamic Content"},{"location":"lab09/#task-4-accessing-variables","text":"Within the same PHP script, add some lines to display the customer's order list. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 <?php if ( $_SERVER [ 'REQUEST_METHOD' ] == 'POST' ) { // If a form with POST superglobal variable is sent, display this message echo \"<p>Order processed on \" . date ( \"F jS Y, l, H:i:s\" ) . \"</p>\" ; ?> <p class=\"font-bold\">Your order is as follows:</p> <p> 20 cupcakes<br> 10 puffs<br> 15 muffins </p> <?php } else { ?> <!-- Listing 1 goes here --> <?php } ?>","title":"Task 4: Accessing Variables"},{"location":"lab09/#task-5-assigning-values-to-variables","text":"On Wendy's site, we want to work out the total number of items ordered and the total amount payable. Assume the prices of each item are as follows: Cupcake = $2.50 Puff = $3.00 Muffin = $4.00 Sales Tax = 6% of the total amount Within the same script, add some lines to display the following additional output: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 <?php if ( $_SERVER [ 'REQUEST_METHOD' ] == 'POST' ) { // If a form with POST superglobal variable is sent, display this message echo \"<p>Order processed on \" . date ( \"F jS Y, l, H:i:s\" ) . \"</p>\" ; ?> <p class=\"font-bold\">Your order is as follows:</p> <p> 20 cupcakes<br> 10 puffs<br> 15 muffins </p> <p> Items Ordered: 3<br> Subtotal: $140.00<br> Total including tax: $148.40<br> </p> <?php } else { ?> <!-- Listing 1 goes here --> <?php } ?>","title":"Task 5: Assigning Values to Variables"},{"location":"lab09/#task-6-making-decisions-with-conditionals","text":"Modify the script such that it alerts if the customer has not ordered anything from Wendy. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 <?php if ( $_SERVER [ 'REQUEST_METHOD' ] == 'POST' ) { // If a form with POST superglobal variable is sent, display this message echo \"<p>Order processed on \" . date ( \"F jS Y, l, H:i:s\" ) . \"</p>\" ; if ( $_POST [ \"cupcakeqty\" ] === \"\" && $_POST [ \"puffqty\" ] === \"\" && $_POST [ \"muffinqty\" ] === \"\" ) : // Display message if nothing has been ordered ?> <p>You did not order anything from the previous page!</p> <?php else : ?> <p class=\"font-bold\">Your order is as follows:</p> <p> 20 cupcakes<br> 10 puffs<br> 15 muffins </p> <p> Items Ordered: 3<br> Subtotal: $140.00<br> Total including tax: $148.40<br> </p> <?php endif ; } else { ?> <!-- Listing 1 goes here --> <?php } ?> Otherwise, the script should display the items the customer ordered from Wendy. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 <?php if ( $_SERVER [ 'REQUEST_METHOD' ] == 'POST' ) { // If a form with POST superglobal variable is sent, display this message echo \"<p>Order processed on \" . date ( \"F jS Y, l, H:i:s\" ) . \"</p>\" ; if ( $_POST [ \"cupcakeqty\" ] === \"\" && $_POST [ \"puffqty\" ] === \"\" && $_POST [ \"muffinqty\" ] === \"\" ) : // Display message if nothing has been ordered ?> <p>You did not order anything from the previous page!</p> <?php else : $qty = array (); if ( $_POST [ \"cupcakeqty\" ] !== \"\" ) $qty [ \"cupcake\" ] = ( int )( $_POST [ \"cupcakeqty\" ]); // cupcake quantity if ( $_POST [ \"puffqty\" ] !== \"\" ) $qty [ \"puff\" ] = ( int )( $_POST [ \"puffqty\" ]); // puff quantity if ( $_POST [ \"muffinqty\" ] !== \"\" ) $qty [ \"muffin\" ] = ( int )( $_POST [ \"muffinqty\" ]); // muffin quantity ?> <p class=\"font-bold\">Your order is as follows:</p> <p> <? = $qty [ \"cupcake\" ]; ?> cupcakes<br> <? = $qty [ \"puff\" ]; ?> puffs<br> <? = $qty [ \"muffin\" ]; ?> muffins </p> <p> Items Ordered: <? = sizeof ( $qty ); ?> <?php $price = [ \"cupcake\" => 2.50 , \"puff\" => 3 , \"muffin\" => 4 ]; $subtotal = $qty [ \"cupcake\" ] * $price [ \"cupcake\" ] + $qty [ \"puff\" ] * $price [ \"puff\" ] + $qty [ \"muffin\" ] * $price [ \"muffin\" ]; $total = $subtotal * 1.06 ; ?> Subtotal: $ <? = number_format ( $subtotal , 2 ); ?> <br> Total including tax: $ <? = number_format ( $total , 2 ); ?> <br> </p> <?php endif ; } else { ?> <!-- Listing 1 goes here --> <?php } ?> Note You may have noticed that there are some errors when you only fill up the form partially (to make it such that you only want some of the items, not all). Try to find a way to circumvent this issue (i.e., by placing an if statement, modifying the form input element, etc.). See if you can find any loopholes in the web application at this point and look to see if you can fix them as much as possible.","title":"Task 6: Making Decisions with Conditionals"},{"location":"lab09/#task-7-elseif-statements","text":"Wendy provides discounts for large orders of cupcakes. Less than 10 cupcakes: no discount 10-49 cupcakes: 5% discount 50-99 cupcakes: 10% discount \u2265100 cupcakes: 20% discount Modify process-order.php such that it calculates the discount using conditions and if-else and elseif statements.","title":"Task 7: elseif Statements"},{"location":"lab09/#task-8-switch-statements","text":"Wendy wants to know what forms of advertising are working for her. Insert a <select> element to the form to retrieve that information. < tr > < td colspan = \"2\" > < p >< label for = \"find\" > How did you find Wendy's? </ label ></ p > < select name = \"find\" id = \"find\" > < option disabled selected > Select option </ option > < option value = \"a\" > I am a regular customer. </ option > < option value = \"b\" > TV Advertising </ option > < option value = \"c\" > Phone Directory </ option > < option value = \"d\" > Word of Mouth </ option > </ select > </ td > </ tr > Use the appropriate selection statements to handle the variables and display the information in process-order.php .","title":"Task 8: switch Statements"},{"location":"lab09/#task-9-iteration-and-repeating-actions","text":"Wendy wants a table displaying the freight cost that is to be added to the customer's order. With the courier Wendy's uses, the cost of freight depends on the distance the parcel is being shipped. We want our freight table to resemble the following: Generate the same freight table using loop structures. <table id=\"freight-table\"> <thead> <tr> <th>Distance</th> <th>Cost</th> </tr> </thead> <tbody> <?php $freight = [ [ \"distance\" => 50 , \"cost\" => 5 ], [ \"distance\" => 100 , \"cost\" => 10 ], [ \"distance\" => 150 , \"cost\" => 15 ], [ \"distance\" => 200 , \"cost\" => 20 ], [ \"distance\" => 250 , \"cost\" => 25 ], ]; // var_dump($freight); foreach ( $freight as $f ) { ?> <tr> <td> <? = $f [ \"distance\" ]; ?> </td> <td> <? = $f [ \"cost\" ]; ?> </td> </tr> <?php } ?> </tbody> </table>","title":"Task 9: Iteration and Repeating Actions"},{"location":"lab10/","text":"Practical 10: PHP Forms and Sessions In this practical activity, we will be creating a dummy login system that utilizes sessions. This will not utilize database connectivity just yet, but you should be able to piece them together once the lessons on those start next week. Preparation CSS and JS files are to be kept in their own separate subfolders. css/style.css 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 @ import url ( \"https://fonts.googleapis.com/css2?family=Open+Sans:ital,wght@0,300;0,400;0,500;0,600;0,700;0,800;1,300;1,400;1,500;1,600;1,700;1,800&display=swap\" ) ; : root { --form-size : 400 px ; --normal-text-size : 20 px ; } * { font-family : \"Open Sans\" , sans-serif ; } body { background-color : beige ; } button , input { border : none ; font-size : var ( --normal-text-size ); margin : 1 rem 0 ; } # container { background-color : bisque ; border : 2 px dashed orangered ; border-radius : 2 rem ; margin : 10 rem auto 0 ; max-width : 750 px ; min-width : var ( --form-size ); padding : 2 rem ; text-align : center ; } p # error { color : red ; font-size : var ( --normal-text-size ); } input # username , input [ type = \"password\" ] { border-radius : 0.5 rem ; max-width : 100 % ; min-width : var ( --form-size ); padding : 0.5 rem ; text-align : center ; width : 75 % ; } button # logout , input [ type = \"submit\" ], input [ type = \"reset\" ] { border-radius : 2 rem ; padding : 0.5 rem 1 rem ; } input # username : hover , input [ type = \"password\" ] : hover { box-shadow : 0 0 1 rem orange , 0 0 2 rem lightsalmon ; } input # username : focus , input [ type = \"password\" ] : focus , input [ type = \"button\" ] : hover , input [ type = \"submit\" ] : hover , input [ type = \"reset\" ] : hover { box-shadow : 0 0 1 rem orange , 0 0 2 rem lightsalmon , 0 0 4 rem darkorange ; } button # logout : hover { background-color : rgba ( 220 , 20 , 60 , 0.75 ); box-shadow : 0 0 1 rem red , 0 0 2 rem lightcoral , 0 0 4 rem maroon ; color : white ; font-weight : bold ; } js/index.js if ( document . querySelector ( \"#logout\" )) { document . querySelector ( \"#logout\" ). addEventListener ( \"click\" , () => { const response = confirm ( \"Confirm logout?\" ); if ( response ) window . location . href = \"logout.php\" ; }); } credentials.php <?php $username = \"root\" ; $pw = \"Welovepasswords123\" ; ?> index.php 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" /> < meta http-equiv = \"X-UA-Compatible\" content = \"IE=edge\" /> < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" /> < title > Login Example </ title > < link rel = \"stylesheet\" href = \"css/style.css\" /> </ head > < body > < section id = \"container\" > < h1 > Login Page </ h1 > < form action = \".\" method = \"post\" autocomplete = \"off\" > < p id = \"error\" ></ p > < input type = \"text\" name = \"username\" id = \"username\" placeholder = \"Username\" autocomplete = \"off\" />< br /> < input type = \"password\" name = \"password\" id = \"password\" placeholder = \"Password\" />< br /> < input type = \"submit\" value = \"Log In\" /> < input type = \"reset\" value = \"Reset\" /> </ form > </ section > < script src = \"js/index.js\" ></ script > </ body > </ html > Task 1: Checking Credentials Our credentials are kept in a separate file named credentials.php . We can append it to index.php by introducing the following on top: <?php require_once \"credentials.php\" ; ?> require_once is a command that appends contents of a HTML or PHP file to wherever it is called. In this case, credentials.php is appended at the beginning of the webpage. There are other variants of this command: include_once is the same as require_once , but it does not halt the other webpage items from being loaded if the file doesn't exist. include and require are different from include_once and require_once respectively in the sense of how many times they are allowed to be appended to the page. Now that we have our credentials appended at the top, we can now proceed to carry out form validation. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 <?php session_start (); require_once \"credentials.php\" ; // flag to indicate whether credentials match (i.e., false) or not (i.e., TRUE) $invalid_login = false ; if ( $_SERVER [ \"REQUEST_METHOD\" ] == \"POST\" ) { // check credentials first if ( $_POST [ \"username\" ] === $username && $_POST [ \"password\" ] === $pw ) { $_SESSION [ \"username\" ] = $_POST [ \"username\" ]; } else $invalid_login = true ; } // var_dump($_SESSION); ?> var_dump is useful if you would like to test if your credential checking is working as intended or not based on your $_POST superglobal variables. Uncomment the var_dump line if you would like to carry out this checking, but its output should not be visible in the end result. We are adding the sessions_start() line on top to introduce session variables if the credentials match. This will be worked on more in the next task, but what's important now is that we create a new session variable called $_SESSION[\"username\"] which will contain the username value entered into the form. As for when the credentials do not match, we have a flag variable named $invalid_login which indicates if the credentials match or not. We will utilize this to display a message in our p#error element in the form to alert users if the credentials do not match. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 <form action=\".\" method=\"post\" autocomplete=\"off\"> <p id=\"error\"> <?php if ( $invalid_login ) : ?> Invalid credentials! <?php endif ; ?> </p> <input type=\"text\" name=\"username\" id=\"username\" placeholder=\"Username\" autocomplete=\"off\" /><br /> <input type=\"password\" name=\"password\" id=\"password\" placeholder=\"Password\" /><br /> <input type=\"submit\" value=\"Log In\" /> <input type=\"reset\" value=\"Reset\" /> </form> The if statement syntax used here is different from that of most languages, but it works especially if you plan on printing large and/or complex lines of HTML. Your page should now display a paragraph containing the alert message like as follows: Now, let's replace the contents inside section#container to display something else if the credentials are correct (and consequently giving the illusion that you're logged in). We will carry this out through utilizing an if-else statement. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 <section id=\"container\"> <?php if ( isset ( $_SESSION [ \"username\" ])) : ?> <h1>Hello, <? = $_SESSION [ \"username\" ]; ?> !</h1> <p id=\"time\"></p> <button id=\"logout\">Log Out</button> <?php else : ?> <h1>Login Page</h1> <form action=\".\" method=\"post\" autocomplete=\"off\"> <p id=\"error\"> <?php if ( $invalid_login ) : ?> Invalid credentials! <?php endif ; ?> </p> <input type=\"text\" name=\"username\" id=\"username\" placeholder=\"Username\" autocomplete=\"off\"><br> <input type=\"password\" name=\"password\" id=\"password\" placeholder=\"Password\"><br> <input type=\"submit\" value=\"Log In\"> <input type=\"reset\" value=\"Reset\"> </form> <?php endif ; ?> </section> Depending on whether $_SESSION[\"username\"] has been defined or not, either the form or the following gets displayed: Here, when the user is \"logged in\", we now have a greeting on display with the entered username. At the bottom of that greeting line, we also have a log out button. Task 2: Implementing Logout Feature Session variables get carried across multiple webpages, so long as they have the line session_start() on top of the page - this is compulsory. In the end, however, all good things have to come to an end - this also includes logged-in sessions. The logout button included has an onclick attribute which redirects the browser to another page called logout.php . logout.php will contain a simple script to log a user out. The contents of this script are as follows: <?php session_start (); session_unset (); session_destroy (); header ( \"Location: .\" ); ?> The simple logout process works in 3 steps: Start the session with session_start() . Unset all session variables with session_unset() . Destroy the session using session_destroy() . One main reason why session_destroy() does not settle everything without session_unset() is that it only destroys the session, but any session data is still kept around. Think of it as a job not completely done properly in such case. The fourth line (i.e., header(\"Location: .\"); ) redirects the user immediately back to index.php . This can also be achieved if you were to type in header(\"Location: index.php\"); . Using a period punctuation here points to the current directory, and browsers will automatically search for any file named index.php or index.html by default. With this, you will find that you will immediately be sent back to index.php without viewing anything in logout.php .. not that it contains any visual content to be displayed in the browser to begin with. Extra Task: Timeout Modify the web application such that it will log you out upon refreshing the page after 5 minutes of inactivity.","title":"Practical 10: PHP Forms and Sessions"},{"location":"lab10/#practical-10-php-forms-and-sessions","text":"In this practical activity, we will be creating a dummy login system that utilizes sessions. This will not utilize database connectivity just yet, but you should be able to piece them together once the lessons on those start next week.","title":"Practical 10: PHP Forms and Sessions"},{"location":"lab10/#preparation","text":"CSS and JS files are to be kept in their own separate subfolders. css/style.css 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 @ import url ( \"https://fonts.googleapis.com/css2?family=Open+Sans:ital,wght@0,300;0,400;0,500;0,600;0,700;0,800;1,300;1,400;1,500;1,600;1,700;1,800&display=swap\" ) ; : root { --form-size : 400 px ; --normal-text-size : 20 px ; } * { font-family : \"Open Sans\" , sans-serif ; } body { background-color : beige ; } button , input { border : none ; font-size : var ( --normal-text-size ); margin : 1 rem 0 ; } # container { background-color : bisque ; border : 2 px dashed orangered ; border-radius : 2 rem ; margin : 10 rem auto 0 ; max-width : 750 px ; min-width : var ( --form-size ); padding : 2 rem ; text-align : center ; } p # error { color : red ; font-size : var ( --normal-text-size ); } input # username , input [ type = \"password\" ] { border-radius : 0.5 rem ; max-width : 100 % ; min-width : var ( --form-size ); padding : 0.5 rem ; text-align : center ; width : 75 % ; } button # logout , input [ type = \"submit\" ], input [ type = \"reset\" ] { border-radius : 2 rem ; padding : 0.5 rem 1 rem ; } input # username : hover , input [ type = \"password\" ] : hover { box-shadow : 0 0 1 rem orange , 0 0 2 rem lightsalmon ; } input # username : focus , input [ type = \"password\" ] : focus , input [ type = \"button\" ] : hover , input [ type = \"submit\" ] : hover , input [ type = \"reset\" ] : hover { box-shadow : 0 0 1 rem orange , 0 0 2 rem lightsalmon , 0 0 4 rem darkorange ; } button # logout : hover { background-color : rgba ( 220 , 20 , 60 , 0.75 ); box-shadow : 0 0 1 rem red , 0 0 2 rem lightcoral , 0 0 4 rem maroon ; color : white ; font-weight : bold ; } js/index.js if ( document . querySelector ( \"#logout\" )) { document . querySelector ( \"#logout\" ). addEventListener ( \"click\" , () => { const response = confirm ( \"Confirm logout?\" ); if ( response ) window . location . href = \"logout.php\" ; }); } credentials.php <?php $username = \"root\" ; $pw = \"Welovepasswords123\" ; ?> index.php 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" /> < meta http-equiv = \"X-UA-Compatible\" content = \"IE=edge\" /> < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" /> < title > Login Example </ title > < link rel = \"stylesheet\" href = \"css/style.css\" /> </ head > < body > < section id = \"container\" > < h1 > Login Page </ h1 > < form action = \".\" method = \"post\" autocomplete = \"off\" > < p id = \"error\" ></ p > < input type = \"text\" name = \"username\" id = \"username\" placeholder = \"Username\" autocomplete = \"off\" />< br /> < input type = \"password\" name = \"password\" id = \"password\" placeholder = \"Password\" />< br /> < input type = \"submit\" value = \"Log In\" /> < input type = \"reset\" value = \"Reset\" /> </ form > </ section > < script src = \"js/index.js\" ></ script > </ body > </ html >","title":"Preparation"},{"location":"lab10/#task-1-checking-credentials","text":"Our credentials are kept in a separate file named credentials.php . We can append it to index.php by introducing the following on top: <?php require_once \"credentials.php\" ; ?> require_once is a command that appends contents of a HTML or PHP file to wherever it is called. In this case, credentials.php is appended at the beginning of the webpage. There are other variants of this command: include_once is the same as require_once , but it does not halt the other webpage items from being loaded if the file doesn't exist. include and require are different from include_once and require_once respectively in the sense of how many times they are allowed to be appended to the page. Now that we have our credentials appended at the top, we can now proceed to carry out form validation. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 <?php session_start (); require_once \"credentials.php\" ; // flag to indicate whether credentials match (i.e., false) or not (i.e., TRUE) $invalid_login = false ; if ( $_SERVER [ \"REQUEST_METHOD\" ] == \"POST\" ) { // check credentials first if ( $_POST [ \"username\" ] === $username && $_POST [ \"password\" ] === $pw ) { $_SESSION [ \"username\" ] = $_POST [ \"username\" ]; } else $invalid_login = true ; } // var_dump($_SESSION); ?> var_dump is useful if you would like to test if your credential checking is working as intended or not based on your $_POST superglobal variables. Uncomment the var_dump line if you would like to carry out this checking, but its output should not be visible in the end result. We are adding the sessions_start() line on top to introduce session variables if the credentials match. This will be worked on more in the next task, but what's important now is that we create a new session variable called $_SESSION[\"username\"] which will contain the username value entered into the form. As for when the credentials do not match, we have a flag variable named $invalid_login which indicates if the credentials match or not. We will utilize this to display a message in our p#error element in the form to alert users if the credentials do not match. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 <form action=\".\" method=\"post\" autocomplete=\"off\"> <p id=\"error\"> <?php if ( $invalid_login ) : ?> Invalid credentials! <?php endif ; ?> </p> <input type=\"text\" name=\"username\" id=\"username\" placeholder=\"Username\" autocomplete=\"off\" /><br /> <input type=\"password\" name=\"password\" id=\"password\" placeholder=\"Password\" /><br /> <input type=\"submit\" value=\"Log In\" /> <input type=\"reset\" value=\"Reset\" /> </form> The if statement syntax used here is different from that of most languages, but it works especially if you plan on printing large and/or complex lines of HTML. Your page should now display a paragraph containing the alert message like as follows: Now, let's replace the contents inside section#container to display something else if the credentials are correct (and consequently giving the illusion that you're logged in). We will carry this out through utilizing an if-else statement. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 <section id=\"container\"> <?php if ( isset ( $_SESSION [ \"username\" ])) : ?> <h1>Hello, <? = $_SESSION [ \"username\" ]; ?> !</h1> <p id=\"time\"></p> <button id=\"logout\">Log Out</button> <?php else : ?> <h1>Login Page</h1> <form action=\".\" method=\"post\" autocomplete=\"off\"> <p id=\"error\"> <?php if ( $invalid_login ) : ?> Invalid credentials! <?php endif ; ?> </p> <input type=\"text\" name=\"username\" id=\"username\" placeholder=\"Username\" autocomplete=\"off\"><br> <input type=\"password\" name=\"password\" id=\"password\" placeholder=\"Password\"><br> <input type=\"submit\" value=\"Log In\"> <input type=\"reset\" value=\"Reset\"> </form> <?php endif ; ?> </section> Depending on whether $_SESSION[\"username\"] has been defined or not, either the form or the following gets displayed: Here, when the user is \"logged in\", we now have a greeting on display with the entered username. At the bottom of that greeting line, we also have a log out button.","title":"Task 1: Checking Credentials"},{"location":"lab10/#task-2-implementing-logout-feature","text":"Session variables get carried across multiple webpages, so long as they have the line session_start() on top of the page - this is compulsory. In the end, however, all good things have to come to an end - this also includes logged-in sessions. The logout button included has an onclick attribute which redirects the browser to another page called logout.php . logout.php will contain a simple script to log a user out. The contents of this script are as follows: <?php session_start (); session_unset (); session_destroy (); header ( \"Location: .\" ); ?> The simple logout process works in 3 steps: Start the session with session_start() . Unset all session variables with session_unset() . Destroy the session using session_destroy() . One main reason why session_destroy() does not settle everything without session_unset() is that it only destroys the session, but any session data is still kept around. Think of it as a job not completely done properly in such case. The fourth line (i.e., header(\"Location: .\"); ) redirects the user immediately back to index.php . This can also be achieved if you were to type in header(\"Location: index.php\"); . Using a period punctuation here points to the current directory, and browsers will automatically search for any file named index.php or index.html by default. With this, you will find that you will immediately be sent back to index.php without viewing anything in logout.php .. not that it contains any visual content to be displayed in the browser to begin with.","title":"Task 2: Implementing Logout Feature"},{"location":"lab10/#extra-task-timeout","text":"Modify the web application such that it will log you out upon refreshing the page after 5 minutes of inactivity.","title":"Extra Task: Timeout"},{"location":"lab11/","text":"Practical 11: Understanding MySQL Commands We will go through a small series of exercises to create tables in a MySQL/MariaDB database. For the purpose of this exercise, we will carry out everything in phpMyAdmin, but the SQL scripts can be run on a typical MySQL console. To access phpMyAdmin, type in localhost/phpmyadmin in your web browser's address bar. NOTE For those who installed each component of the LAMP stack individually including the MySQL database, ensure you remember your root user password. Starting Out in phpMyAdmin On the top menu bar, select \"SQL\". You should see an interface like as follows: This will be where we will be typing in our SQL scripts for today's practical exercise. Creating a New Database The basic syntax to create a new database is as follows: CREATE DATABASE < database_name > ; Let's create a database named exercise_db . We will create the database by entering the following script: CREATE DATABASE IF NOT EXISTS ` exercise_db ` ; Note that throughout my demo, I will be using backticks (`) to surround any names given to the database, tables and columns. This is completely optional. Upon running this command, you can only run it once as you can only create a database with a stated name if it already does not exist. The IF NOT EXISTS clause will make it such that the statement can be run multiple times instead of spititng out an error each time, but it also does nothing as a result. Select the \"Go\" button to execute the SQL statement, and a message from the database server should be displayed like as shown below: By now, the database should now be available to use - the database name should appear on the left hand side of the window. DROP DATABASES The opposite act of creating a database is referred as dropping a database. If you wish to drop the database, you have to use the following command script: DROP DATABASE IF EXISTS ` exercise_db ` ; The IF EXISTS clause works the same way as how the IF NOT EXISTS clause works for the CREATE TABLE statement - you can only drop a database if it actually exists in the database server. The general syntax for dropping a database is as follows: DROP DATABASE < database_name > ; Create a Table Right now, the database does not have any tables inside of it. Let's create a new table called Student that has the following columns: id: INT, AUTO_INCREMENT, NOT NULL, Primary Key first_name: VARCHAR(50), NOT NULL last_name: VARCHAR(50), NOT NULL age: INT(3), NOT NULL email: VARCHAR(255) active: BOOL, NOT NULL, DEFAULT is TRUE(1) Note: INT : integer value (default size 7); VARCHAR(50) : max 50 alphanumeric characters, BOOLEAN : boolean value We set id as our PRIMARY KEY of the table - this is a unique column which distinguishes each record/row from each other. AUTO_INCREMENT is often used with primary key columns so that they need not be defined when entering records. NOT NULL constraint makes a column unable to be empty in any record. The script to create this table is as follows. CREATE TABLE IF NOT EXISTS ` Student ` ( ` id ` INT NOT NULL AUTO_INCREMENT , ` first_name ` VARCHAR ( 50 ) NOT NULL , ` last_name ` VARCHAR ( 50 ) NOT NULL , ` age ` INT ( 3 ) NOT NULL , ` email ` VARCHAR ( 255 ), ` active ` BOOLEAN NOT NULL DEFAULT TRUE , PRIMARY KEY ( ` id ` ) ); You can view the database table contents by selecting the table name from the left-hand side menu in the browser window. Multiple Tables in Databases Yes, you are allowed to have multiple tables in your database (unless it's a SQLite database). In fact, there are mechanisms to simplify tables so that they don't require so many columns (i.e., normalization) and/or so that tables are linked together with foreign keys . We will not cover them in this module, but feel free to look up on how they work if you are curious! Dropping Tables Just like dropping databases, you can also drop a table if you want to recreate the table from scratch. DROP TABLE IF EXISTS ` Student ` ; Populating the Database Table Let's populate the table with some data. The following command script adds in one record of data in the database. INSERT INTO ` Student ` ( ` first_name ` , ` last_name ` , ` age ` , ` email ` , ` active ` ) VALUES ( \"Adam\" , \"Burns\" , 18 , \"adam_burns@gmail.com\" , 1 ); After running the given command, you should see the table being populated like as follows: Take note that with id being set to AUTO_INCREMENT , there's no need to specify the id value when adding new records (it will automatically start from 1 by default). However, you are still allowed to put in a custom id value if you so desire. Also, note that the active value is set to TRUE or 1 by default. In this case, you can shorten your SQL command to be like as follows and it should give the same result: INSERT INTO ` Student ` ( ` first_name ` , ` last_name ` , ` age ` , ` email ` ) VALUES ( \"Adam\" , \"Burns\" , 18 , \"adam_burns@gmail.com\" ); Task Populate the table with more records: id first_name last_name age email active 2 Karen Allen 19 karen_allen@outlook.com 1 3 Mark Weiss 24 hello@mweiss.com 0 4 Tyson Russell 16 ask@tyson.com 1 Updating Records in a Table Let's update Mark's record to say that he is now no longer inactive (i.e., active = 1). UPDATE ` Student ` SET ` active ` = 1 WHERE ` id ` = 3 ; Mark's record is indicated with id 3. As mentioned prior, we can make utilize this column to uniquely identify one record from the others. However, this is not restricted to just primary keys or unique columns like id . When feasible, one may also utilize other columns that are not unique to easily modify multiple records at once. Also, you can also have multiple conditions in your SQL script to further specify those columns to consider as well. The table contents should now look like the following: Task Run SQL commands to make the following changes: Adam has recently changed his e-mail to adam@burnings.com . Tyson is no longer an active student. Karen's age is to be updated to 20 instead of 19. Selecting Records from a Table By now, you should see the given SQL command script appear upon selecting the table in phpMyAdmin: SELECT * FROM ` Student ` ; * is representative of \"ALL\". The above syntax simply means to select all available records in Student . You can specify which records/rows to select by adding conditions. The following example will select the row(s) where the id value is equal to 2: SELECT * FROM ` Student ` WHERE ` id ` = 2 ; You can also make comparison conditions too when selecting columns. The following example will select only the first and last names of the row(s) where the age is greater than 21: SELECT ` first_name ` , ` last_name ` FROM ` Student ` WHERE ` age ` > 21 ; Task Populate the Student table with 4 more records. Select all students whose age is not greater than 20. Select all active students, displaying only the first_name , last_name , and email . Deleting Records from a Table Deleting records works the same as updating and selecting records - you can utilize IDs as indicators of which record(s) to delete. For example, if we want to delete Tyson's record, we can use the following command script: DELETE FROM ` Student ` WHERE ` id ` = 4 ; # Tyson ' s record id value is 4 The same rules for selecting which type of records based on what column(s) to update also apply to what column(s) to delete. Note about id Progression Now that we've deleted Tyson's record, if you are to add another record after, the id will not reassume as 4, but will continue after the number of the last record instead. Previously occupied id values that were used and deleted will not be used under AUTO_INCREMENT , but can be added manually if not occupied.","title":"Practical 11: Understanding MySQL Commands"},{"location":"lab11/#practical-11-understanding-mysql-commands","text":"We will go through a small series of exercises to create tables in a MySQL/MariaDB database. For the purpose of this exercise, we will carry out everything in phpMyAdmin, but the SQL scripts can be run on a typical MySQL console. To access phpMyAdmin, type in localhost/phpmyadmin in your web browser's address bar. NOTE For those who installed each component of the LAMP stack individually including the MySQL database, ensure you remember your root user password.","title":"Practical 11: Understanding MySQL Commands"},{"location":"lab11/#starting-out-in-phpmyadmin","text":"On the top menu bar, select \"SQL\". You should see an interface like as follows: This will be where we will be typing in our SQL scripts for today's practical exercise.","title":"Starting Out in phpMyAdmin"},{"location":"lab11/#creating-a-new-database","text":"The basic syntax to create a new database is as follows: CREATE DATABASE < database_name > ; Let's create a database named exercise_db . We will create the database by entering the following script: CREATE DATABASE IF NOT EXISTS ` exercise_db ` ; Note that throughout my demo, I will be using backticks (`) to surround any names given to the database, tables and columns. This is completely optional. Upon running this command, you can only run it once as you can only create a database with a stated name if it already does not exist. The IF NOT EXISTS clause will make it such that the statement can be run multiple times instead of spititng out an error each time, but it also does nothing as a result. Select the \"Go\" button to execute the SQL statement, and a message from the database server should be displayed like as shown below: By now, the database should now be available to use - the database name should appear on the left hand side of the window. DROP DATABASES The opposite act of creating a database is referred as dropping a database. If you wish to drop the database, you have to use the following command script: DROP DATABASE IF EXISTS ` exercise_db ` ; The IF EXISTS clause works the same way as how the IF NOT EXISTS clause works for the CREATE TABLE statement - you can only drop a database if it actually exists in the database server. The general syntax for dropping a database is as follows: DROP DATABASE < database_name > ;","title":"Creating a New Database"},{"location":"lab11/#create-a-table","text":"Right now, the database does not have any tables inside of it. Let's create a new table called Student that has the following columns: id: INT, AUTO_INCREMENT, NOT NULL, Primary Key first_name: VARCHAR(50), NOT NULL last_name: VARCHAR(50), NOT NULL age: INT(3), NOT NULL email: VARCHAR(255) active: BOOL, NOT NULL, DEFAULT is TRUE(1) Note: INT : integer value (default size 7); VARCHAR(50) : max 50 alphanumeric characters, BOOLEAN : boolean value We set id as our PRIMARY KEY of the table - this is a unique column which distinguishes each record/row from each other. AUTO_INCREMENT is often used with primary key columns so that they need not be defined when entering records. NOT NULL constraint makes a column unable to be empty in any record. The script to create this table is as follows. CREATE TABLE IF NOT EXISTS ` Student ` ( ` id ` INT NOT NULL AUTO_INCREMENT , ` first_name ` VARCHAR ( 50 ) NOT NULL , ` last_name ` VARCHAR ( 50 ) NOT NULL , ` age ` INT ( 3 ) NOT NULL , ` email ` VARCHAR ( 255 ), ` active ` BOOLEAN NOT NULL DEFAULT TRUE , PRIMARY KEY ( ` id ` ) ); You can view the database table contents by selecting the table name from the left-hand side menu in the browser window. Multiple Tables in Databases Yes, you are allowed to have multiple tables in your database (unless it's a SQLite database). In fact, there are mechanisms to simplify tables so that they don't require so many columns (i.e., normalization) and/or so that tables are linked together with foreign keys . We will not cover them in this module, but feel free to look up on how they work if you are curious! Dropping Tables Just like dropping databases, you can also drop a table if you want to recreate the table from scratch. DROP TABLE IF EXISTS ` Student ` ;","title":"Create a Table"},{"location":"lab11/#populating-the-database-table","text":"Let's populate the table with some data. The following command script adds in one record of data in the database. INSERT INTO ` Student ` ( ` first_name ` , ` last_name ` , ` age ` , ` email ` , ` active ` ) VALUES ( \"Adam\" , \"Burns\" , 18 , \"adam_burns@gmail.com\" , 1 ); After running the given command, you should see the table being populated like as follows: Take note that with id being set to AUTO_INCREMENT , there's no need to specify the id value when adding new records (it will automatically start from 1 by default). However, you are still allowed to put in a custom id value if you so desire. Also, note that the active value is set to TRUE or 1 by default. In this case, you can shorten your SQL command to be like as follows and it should give the same result: INSERT INTO ` Student ` ( ` first_name ` , ` last_name ` , ` age ` , ` email ` ) VALUES ( \"Adam\" , \"Burns\" , 18 , \"adam_burns@gmail.com\" );","title":"Populating the Database Table"},{"location":"lab11/#task","text":"Populate the table with more records: id first_name last_name age email active 2 Karen Allen 19 karen_allen@outlook.com 1 3 Mark Weiss 24 hello@mweiss.com 0 4 Tyson Russell 16 ask@tyson.com 1","title":"Task"},{"location":"lab11/#updating-records-in-a-table","text":"Let's update Mark's record to say that he is now no longer inactive (i.e., active = 1). UPDATE ` Student ` SET ` active ` = 1 WHERE ` id ` = 3 ; Mark's record is indicated with id 3. As mentioned prior, we can make utilize this column to uniquely identify one record from the others. However, this is not restricted to just primary keys or unique columns like id . When feasible, one may also utilize other columns that are not unique to easily modify multiple records at once. Also, you can also have multiple conditions in your SQL script to further specify those columns to consider as well. The table contents should now look like the following:","title":"Updating Records in a Table"},{"location":"lab11/#task_1","text":"Run SQL commands to make the following changes: Adam has recently changed his e-mail to adam@burnings.com . Tyson is no longer an active student. Karen's age is to be updated to 20 instead of 19.","title":"Task"},{"location":"lab11/#selecting-records-from-a-table","text":"By now, you should see the given SQL command script appear upon selecting the table in phpMyAdmin: SELECT * FROM ` Student ` ; * is representative of \"ALL\". The above syntax simply means to select all available records in Student . You can specify which records/rows to select by adding conditions. The following example will select the row(s) where the id value is equal to 2: SELECT * FROM ` Student ` WHERE ` id ` = 2 ; You can also make comparison conditions too when selecting columns. The following example will select only the first and last names of the row(s) where the age is greater than 21: SELECT ` first_name ` , ` last_name ` FROM ` Student ` WHERE ` age ` > 21 ;","title":"Selecting Records from a Table"},{"location":"lab11/#task_2","text":"Populate the Student table with 4 more records. Select all students whose age is not greater than 20. Select all active students, displaying only the first_name , last_name , and email .","title":"Task"},{"location":"lab11/#deleting-records-from-a-table","text":"Deleting records works the same as updating and selecting records - you can utilize IDs as indicators of which record(s) to delete. For example, if we want to delete Tyson's record, we can use the following command script: DELETE FROM ` Student ` WHERE ` id ` = 4 ; # Tyson ' s record id value is 4 The same rules for selecting which type of records based on what column(s) to update also apply to what column(s) to delete. Note about id Progression Now that we've deleted Tyson's record, if you are to add another record after, the id will not reassume as 4, but will continue after the number of the last record instead. Previously occupied id values that were used and deleted will not be used under AUTO_INCREMENT , but can be added manually if not occupied.","title":"Deleting Records from a Table"},{"location":"lab12/","text":"Practical 12: Linking MySQL Database with PHP Files This practical will give a rundown on how to utilize the CREATE, INSERT, UPDATE and DELETE functionalities of your MySQL database via PHP. This continues on from where we left off from Practical 11: Databases Part 1 . Throughout this practical, you may boot up PHPMyAdmin to check and see if the intended database server modifications are applied correctly. However, we are to assume that we do not have the luxury of using it when developing database(s) and its/their table(s). Creating or Dropping Database from PHP Before we get into the meat and potatoes of the lab work, we will prepare some files that can enable creation of the database and required table(s) via PHP. In this practical, we will attempt to prepare the same database and table from the last one, namely the exercise_db database. The first thing that should be dealt with should be based on whether or not the MySQL database server can be reached. Provided if your database connection is set properly and you are able to access PHPMyAdmin, the following file should be able to tell that a connection to the database server is established. db-connect-test.php 1 2 3 4 5 6 7 8 9 10 11 12 <?php $servername = \"localhost\" ; $username = \"root\" ; $password = \"\" ; // password for you should be empty if XAMPP or MAMP is used $conn = new mysqli ( $servername , $username , $password ); // Check connection; if error occurs, display error message and force exit if ( $conn -> error ) { die ( \"Connection failed: \" . $conn -> connect_error ); } ?> The mysqli object is key here to establish a connection to the database server. It takes in the server name (that being localhost or 127.0.0.1 by default if you are working on your local machine) and your database server credentials - the username ( root by default), and your password. NOTE For those who installed each component of the LAMP stack individually including the MySQL database, ensure you remember your root user password. You will need to fill up $password with that same password or it will throw an error stating that you have incorrect credentials. Those who proceeded with XAMPP or MAMP should proceed with an empty string as the password value. With this test file, we can use it to create or drop a database from the MySQL server. For simplicity sake, we will be attaching db-connect-test.php as like a header attachment with a require statement in the next two PHP files. The first one creates the database whilst the second one drops the database. create-db.php 1 2 3 4 5 6 7 8 9 10 11 12 13 14 <?php require \"db-connect-test.php\" ; $sql = \"CREATE DATABASE IF NOT EXISTS `exercise_db`\" ; // create SQL statement to be executed by MySQL // $conn->query($sql) runs the SQL statement inside $sql, returns TRUE if successful if ( $conn -> query ( $sql )) { echo \"Database created successfully.\" ; } else { echo \"Error creating database: \" . $conn -> error ; // $conn->error retrieves the latest error message generated from the MySQL server } $conn -> close (); // closes the database connection drop-db.php 1 2 3 4 5 6 7 8 9 10 11 12 13 14 <?php require \"db-connect-test.php\" ; $sql = \"DROP DATABASE IF EXISTS `exercise_db`\" ; // create SQL statement to be executed by MySQL // $conn->query($sql) runs the SQL statement inside $sql, returns TRUE if successful if ( $conn -> query ( $sql )) { echo \"Database dropped successfully.\" ; } else { echo \"Error dropping database: \" . $conn -> error ; // $conn->error retrieves the latest error message generated from the MySQL server } $conn -> close (); // closes the database connection Here, $conn->query($sql) executes the statement in $sql in the established database server connection. Should the statement fail to run due to syntax errors, database constraints, etc., the result of this will render FALSE . The converse is not always the case, but all except the SELECT statements should render a TRUE value. CHECKPOINT: ARE YOU LOST? If any of the used SQL statements do not make sense to you, head back into Practical 11: Databases Part 1 to familiarize yourselves with the required database commands before proceeding with the rest of this practical activity. Creating or Dropping Table from PHP After creating the database, we can now establish a more complete connection to it. The following shows a variant of the db-connect-test.php file, but notably with changes to the creation of the mysqli object. More specifically, the mysqli object should now include the database name as a fourth parameter. db-connect.php 1 2 3 4 5 6 7 8 9 10 11 12 13 <?php $servername = \"localhost\" ; $username = \"root\" ; $password = \"\" ; // password for you should be empty $dbName = \"exercise_db\" ; // database name here, fourth value required $conn = new mysqli ( $servername , $username , $password , $dbName ); // Check connection; if error occurs, display error message and force exit if ( $conn -> error ) { die ( \"Connection failed: \" . $conn -> connect_error ); } ?> In the same fashion as before, db-connect.php will be added as a header attachment to the rest of the PHP files in this practical exercise. The next two files deal with creating and dropping the Student table. create-table.php 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 <?php /* copy PHP code from db-connect.php, or include it as follows: */ require \"db-connect.php\" ; // db-connect.php is treated like an attachment $sql = \"CREATE TABLE IF NOT EXISTS `Student` ( `id` INT NOT NULL AUTO_INCREMENT, `first_name` VARCHAR(50) NOT NULL, `last_name` VARCHAR(50) NOT NULL, `age` INT(3) NOT NULL, `email` VARCHAR(255), `active` BOOLEAN NOT NULL DEFAULT TRUE, PRIMARY KEY(`id`) );\" ; // Run the SQL statement if ( $conn -> query ( $sql )) echo \"Table `Student` created successfully\" ; else echo \"Error creating table: \" . $conn -> error ; $conn -> close (); drop-table.php 1 2 3 4 5 6 7 8 9 10 11 <?php /* copy PHP code from db-connect.php, or include it as follows: */ require \"db-connect.php\" ; // db-connect.php is treated like an attachment $sql = \"DROP TABLE IF EXISTS `Student`;\" ; // Run the SQL statement if ( $conn -> query ( $sql )) echo \"Table `Student` dropped successfully\" ; else echo \"Error dropping table: \" . $conn -> error ; $conn -> close (); Displaying Data from Database Table Let's start displaying some data from the Student table. In the following index file, observe the highlighted lines. index.php 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 <?php require \"db-connect.php\" ; ?> <!DOCTYPE html> <html lang=\"en\"> <head> <meta charset=\"UTF-8\"> <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"> <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"> <title>Student Records</title> <style> table { border-collapse: collapse; } th, td { border: 1px solid black; padding: 5px; } </style> <script> function confirmDelete(id) { const CONFIRM_RESULT = confirm(`Do you wish to delete record #${id}?`); if (CONFIRM_RESULT) window.location.href = `delete-student.php?id=${id}`; } </script> </head> <body> <h1>Student Records</h1> <?php $sql = \"SELECT * FROM `Student`\" ; $result = $conn -> query ( $sql ); if ( $result ) { // check to see if query was successful if ( $result -> num_rows > 0 ) { // $result->num_rows returns the number of row results ?> <table> <tr> <th>ID</th> <th>First Name</th> <th>Last Name</th> <th>Age</th> <th>Email</th> <th>Active</th> <th>Actions</th> </tr> <?php while ( $row = $result -> fetch_assoc ()) { ?> <tr> <td> <? = $row [ \"id\" ]; ?> </td> <td> <? = $row [ \"first_name\" ]; ?> </td> <td> <? = $row [ \"last_name\" ]; ?> </td> <td> <? = $row [ \"age\" ]; ?> </td> <td> <? = $row [ \"email\" ]; ?> </td> <td> <? = $row [ \"active\" ] == 1 ? \"Yes\" : \"No\" ; ?> </td> <td> <button onclick=\"window.location.href='update-student.php?id= <? = $row [ 'id' ]; ?> ';\">Update</button> <button onclick=\"confirmDelete( <? = $row [ 'id' ]; ?> )\">Delete</button> </td> </tr> <?php } ?> </table> <?php } else echo \"No data found.\" ; // $result->num_rows = 0 (no rows of results are retrieved) } else echo \"Error retrieving results: \" . $conn -> error ; // database selection query not successful ?> <p><button onclick=\"window.location.href='add-student.php'\">Add Student</button></p> </body> </html> On line 40, the result after querying the SQL statement into the MySQL server is stored in a variable named $result . In here, a successful database query does not produce the TRUE value, but rather a query result often stored as an associative array. An unsuccessful one will still produce FALSE . Here, $result is checked to see if it is not false before proceeding. Following this, we check to see if there are any selected rows by retrieving the num_rows attribute from $result . It is important to know that not all SELECT statements will produce the intended results, let alone the intended number of selected rows. No row retrieval can mean a wrong SQL statement has been used to be executed in the database server. Should this happen, do check back in PHPMyAdmin to see if there are any discrepancies in the produced SQL statement. You may need to print out $sql to retrieve the statement used in this case. In each of the aforementioned checks, appropriate error messages are produced in the browser. Once all of these checks have been successfully performed and nothing is amiss, we iterate through the array of rows retrieved using a for loop. In each iteration, we store the current row temporarily in a variable named $row using the fetch_assoc() method. From here, selecting row data can be performed. In our index page here, each iteration produces a new <tr> in the <table> element, thus automating something that would have required quite a number of duplicated HTML lines but with different data portrayal. At the end of each row, an update and delete button is produced to allow editing and/or deletion of the rows starting from the index.php page itself. We will look into those later. Adding Records to Table Underneath the produced table, there is a button which should link to a PHP form page responsible for collecting information from the user. add-student.php 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" /> < meta http-equiv = \"X-UA-Compatible\" content = \"IE=edge\" /> < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" /> < title > Add Student </ title > </ head > < body > < h1 > Add Student </ h1 > < form action = \"add-to-db.php\" method = \"post\" > < p > < label for = \"first_name\" > First Name </ label > < input type = \"text\" name = \"first_name\" id = \"first_name\" required /> </ p > < p > < label for = \"last_name\" > Last Name </ label > < input type = \"text\" name = \"last_name\" id = \"last_name\" required /> </ p > < p > < label for = \"age\" > Age </ label > < input type = \"number\" name = \"age\" id = \"age\" required /> </ p > < p > < label for = \"email\" > Email </ label > < input type = \"email\" name = \"email\" id = \"email\" required /> </ p > < p > < label for = \"active\" > Active? </ label > < input type = \"radio\" name = \"active\" value = \"1\" id = \"active-yes\" checked /> Yes < input type = \"radio\" name = \"active\" value = \"0\" id = \"active-no\" /> No </ p > < p > < input type = \"submit\" value = \"Submit\" /> < input type = \"reset\" value = \"Reset\" /> </ p > </ form > </ body > </ html > A simple form can be seen, where information is sent to add-to-db.php as the appropriate form handler. add-to-db.php 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 <?php require \"db-connect.php\" ; // var_dump($_POST); $first_name = $_POST [ \"first_name\" ]; $last_name = $_POST [ \"last_name\" ]; $age = $_POST [ \"age\" ]; $email = $_POST [ \"email\" ]; $active = $_POST [ \"active\" ]; if ( $age <= 0 ) { echo \"<script> alert('Invalid age, must be positive!'); window.location.href = 'add-student.php'; </script>\" ; } else { $sql = \"INSERT INTO `Student` (`first_name`, `last_name`, `age`, `email`, `active`) VALUES ('\" . $first_name . \"', '\" . $last_name . \"', \" . $age . \", '\" . $email . \"', \" . $active . \");\" ; // echo $sql; // Run the SQL statement if ( $conn -> query ( $sql )) { echo \"Inserted new record successfully\" ; // Redirect to index.php after successful entry header ( \"Location: index.php\" ); } else echo \"Error inserting record: \" . $conn -> error ; } The retrieved data from the form (ensure that your name attributes in your form elements are present and aptly named) stored inside the $_POST superglobal variable can then be appended to the $sql statement to be executed in the database server. An added check for $age is added in order to prevent erroneous age entry into the database. If the information entry into the database table is successful, the user should be redirected back to index.php where the newly entered data should be reflected in the table. Note While it is right to prepare cautionary measures to prevent erroneous or illegal data entry into the database, the database is often not the place to consider implementing such restrictions. Very often, it falls under the role of other back-end files interacting with it (and in charge of information retrieval). Updating Records in Table update-student.php 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 <?php if ( ! isset ( $_GET [ \"id\" ])) header ( \"Location: index.php\" ); require \"db-connect.php\" ; $sql = \"SELECT * FROM `Student` WHERE `id` = \" . $_GET [ \"id\" ]; $result = $conn -> query ( $sql ); ?> <!DOCTYPE html> <html lang=\"en\"> <head> <meta charset=\"UTF-8\"> <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"> <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"> <title>Update Student</title> </head> <body> <h1>Update Student</h1> <?php if ( $result ) { if ( $result -> num_rows > 0 ) { $row = $result -> fetch_assoc (); ?> <form action=\"update-db.php\" method=\"post\"> <input type=\"hidden\" name=\"id\" value=\" <? = $row [ \"id\" ]; ?> \"> <p>Updating Student with ID: <? = $row [ \"id\" ]; ?> </p> <p> First Name <input type=\"text\" name=\"first_name\" id=\"first_name\" value=\" <? = $row [ \"first_name\" ]; ?> \" required> </p> <p> Last Name <input type=\"text\" name=\"last_name\" id=\"last_name\" value=\" <? = $row [ \"last_name\" ]; ?> \" required> </p> <p> Age <input type=\"number\" name=\"age\" id=\"age\" value=\" <? = $row [ \"age\" ]; ?> \" required> </p> <p> Email <input type=\"email\" name=\"email\" id=\"email\" value=\" <? = $row [ \"email\" ]; ?> \" required> </p> <p> Active? <input type=\"radio\" name=\"active\" value=\"1\" id=\"active-yes\" <? = ( $row [ \"active\" ] == 1 ) ? \" checked\" : \"\" ; ?> > Yes <input type=\"radio\" name=\"active\" value=\"0\" id=\"active-no\" <? = ( $row [ \"active\" ] == 0 ) ? \" checked\" : \"\" ; ?> > No </p> <p> <input type=\"submit\" value=\"Submit\"> <input type=\"reset\" value=\"Reset\"> </p> </form> <?php } else echo \"No data found.\" ; // $result->num_rows = 0 (no rows of results are retrieved) } else echo \"Error retrieving results: \" . $conn -> error ; // database selection query not successful ?> </body> </html> Notice that when you try to click on the Update button present in any one of the rows, you would be redirected to this page here with the form data prefilled. This involves SELECTing the data from the database table and then appropriately appending them as the value attributes in the corresponding input fields. This page involves the use of a GET variable (specifically named id ), which is checked first before attempting to produce the pre-filled form. The page redirects you to back to index.php otherwise. The form handler works the same way as the one used for data entry, but with a different SQL statement. update-db.php 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 <?php require \"db-connect.php\" ; // var_dump($_POST); $id = $_POST [ \"id\" ]; $first_name = $_POST [ \"first_name\" ]; $last_name = $_POST [ \"last_name\" ]; $age = $_POST [ \"age\" ]; $email = $_POST [ \"email\" ]; $active = $_POST [ \"active\" ]; if ( $age <= 0 ) { echo \"<script> alert('Invalid age, must be positive!'); window.location.href = 'update-student.php?id=\" . $id . \"'; </script>\" ; } else { $sql = \"UPDATE `Student` SET `first_name` = '\" . $first_name . \"', `last_name` = '\" . $last_name . \"', `age` = \" . $age . \", `email` = '\" . $email . \"', `active` = \" . $active . \" WHERE `id` = \" . $id ; // echo $sql; // Run the SQL statement if ( $conn -> query ( $sql )) { echo \"Updated record with ID \" . $id . \" successfully\" ; // Redirect to index.php after successful update header ( \"Location: index.php\" ); } else echo \"Error updating record \" . $id . \": \" . $conn -> error ; } Deleting Records from Table In the index.php file, the delete button in each row invokes the JavaScript function to prompt the user first before proceeding with deletion of the data. Should the user then proceed to do so, the user is redirected to the delete-student.php file with the ID as the GET value. Like update-student.php , it redirects the users back to index.php if no GET value of name id is present. delete-student.php 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 <?php if ( ! isset ( $_GET [ \"id\" ])) header ( \"Location: index.php\" ); require \"db-connect.php\" ; $id = $_GET [ \"id\" ]; $sql = \"DELETE FROM `Student` WHERE `id` = \" . $id ; // echo $sql; // Run the SQL statement if ( $conn -> query ( $sql )) { echo \"Deleted record with ID \" . $id . \" successfully\" ; // Redirect to index.php after successful update header ( \"Location: index.php\" ); } else echo \"Error deleting record \" . $id . \": \" . $conn -> error ; After deletion, the table should portray the remaining rows left in the table. Challenge? You may have noticed that in some of the displayed outputs, the IDs do not follow a proper order. This is mainly due to the fact that they are only reliant on the IDs that are set in the database as per the AUTO_INCREMENT constraint on the id column. However, this does not present well for a typical user who may not understand this mechanism. How would you edit the presented IDs to resemble the typical ascending order flow? (i.e., 1, 2, 3, 4, ...)","title":"Practical 12: Linking MySQL Database with PHP Files"},{"location":"lab12/#practical-12-linking-mysql-database-with-php-files","text":"This practical will give a rundown on how to utilize the CREATE, INSERT, UPDATE and DELETE functionalities of your MySQL database via PHP. This continues on from where we left off from Practical 11: Databases Part 1 . Throughout this practical, you may boot up PHPMyAdmin to check and see if the intended database server modifications are applied correctly. However, we are to assume that we do not have the luxury of using it when developing database(s) and its/their table(s).","title":"Practical 12: Linking MySQL Database with PHP Files"},{"location":"lab12/#creating-or-dropping-database-from-php","text":"Before we get into the meat and potatoes of the lab work, we will prepare some files that can enable creation of the database and required table(s) via PHP. In this practical, we will attempt to prepare the same database and table from the last one, namely the exercise_db database. The first thing that should be dealt with should be based on whether or not the MySQL database server can be reached. Provided if your database connection is set properly and you are able to access PHPMyAdmin, the following file should be able to tell that a connection to the database server is established. db-connect-test.php 1 2 3 4 5 6 7 8 9 10 11 12 <?php $servername = \"localhost\" ; $username = \"root\" ; $password = \"\" ; // password for you should be empty if XAMPP or MAMP is used $conn = new mysqli ( $servername , $username , $password ); // Check connection; if error occurs, display error message and force exit if ( $conn -> error ) { die ( \"Connection failed: \" . $conn -> connect_error ); } ?> The mysqli object is key here to establish a connection to the database server. It takes in the server name (that being localhost or 127.0.0.1 by default if you are working on your local machine) and your database server credentials - the username ( root by default), and your password. NOTE For those who installed each component of the LAMP stack individually including the MySQL database, ensure you remember your root user password. You will need to fill up $password with that same password or it will throw an error stating that you have incorrect credentials. Those who proceeded with XAMPP or MAMP should proceed with an empty string as the password value. With this test file, we can use it to create or drop a database from the MySQL server. For simplicity sake, we will be attaching db-connect-test.php as like a header attachment with a require statement in the next two PHP files. The first one creates the database whilst the second one drops the database. create-db.php 1 2 3 4 5 6 7 8 9 10 11 12 13 14 <?php require \"db-connect-test.php\" ; $sql = \"CREATE DATABASE IF NOT EXISTS `exercise_db`\" ; // create SQL statement to be executed by MySQL // $conn->query($sql) runs the SQL statement inside $sql, returns TRUE if successful if ( $conn -> query ( $sql )) { echo \"Database created successfully.\" ; } else { echo \"Error creating database: \" . $conn -> error ; // $conn->error retrieves the latest error message generated from the MySQL server } $conn -> close (); // closes the database connection drop-db.php 1 2 3 4 5 6 7 8 9 10 11 12 13 14 <?php require \"db-connect-test.php\" ; $sql = \"DROP DATABASE IF EXISTS `exercise_db`\" ; // create SQL statement to be executed by MySQL // $conn->query($sql) runs the SQL statement inside $sql, returns TRUE if successful if ( $conn -> query ( $sql )) { echo \"Database dropped successfully.\" ; } else { echo \"Error dropping database: \" . $conn -> error ; // $conn->error retrieves the latest error message generated from the MySQL server } $conn -> close (); // closes the database connection Here, $conn->query($sql) executes the statement in $sql in the established database server connection. Should the statement fail to run due to syntax errors, database constraints, etc., the result of this will render FALSE . The converse is not always the case, but all except the SELECT statements should render a TRUE value. CHECKPOINT: ARE YOU LOST? If any of the used SQL statements do not make sense to you, head back into Practical 11: Databases Part 1 to familiarize yourselves with the required database commands before proceeding with the rest of this practical activity.","title":"Creating or Dropping Database from PHP"},{"location":"lab12/#creating-or-dropping-table-from-php","text":"After creating the database, we can now establish a more complete connection to it. The following shows a variant of the db-connect-test.php file, but notably with changes to the creation of the mysqli object. More specifically, the mysqli object should now include the database name as a fourth parameter. db-connect.php 1 2 3 4 5 6 7 8 9 10 11 12 13 <?php $servername = \"localhost\" ; $username = \"root\" ; $password = \"\" ; // password for you should be empty $dbName = \"exercise_db\" ; // database name here, fourth value required $conn = new mysqli ( $servername , $username , $password , $dbName ); // Check connection; if error occurs, display error message and force exit if ( $conn -> error ) { die ( \"Connection failed: \" . $conn -> connect_error ); } ?> In the same fashion as before, db-connect.php will be added as a header attachment to the rest of the PHP files in this practical exercise. The next two files deal with creating and dropping the Student table. create-table.php 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 <?php /* copy PHP code from db-connect.php, or include it as follows: */ require \"db-connect.php\" ; // db-connect.php is treated like an attachment $sql = \"CREATE TABLE IF NOT EXISTS `Student` ( `id` INT NOT NULL AUTO_INCREMENT, `first_name` VARCHAR(50) NOT NULL, `last_name` VARCHAR(50) NOT NULL, `age` INT(3) NOT NULL, `email` VARCHAR(255), `active` BOOLEAN NOT NULL DEFAULT TRUE, PRIMARY KEY(`id`) );\" ; // Run the SQL statement if ( $conn -> query ( $sql )) echo \"Table `Student` created successfully\" ; else echo \"Error creating table: \" . $conn -> error ; $conn -> close (); drop-table.php 1 2 3 4 5 6 7 8 9 10 11 <?php /* copy PHP code from db-connect.php, or include it as follows: */ require \"db-connect.php\" ; // db-connect.php is treated like an attachment $sql = \"DROP TABLE IF EXISTS `Student`;\" ; // Run the SQL statement if ( $conn -> query ( $sql )) echo \"Table `Student` dropped successfully\" ; else echo \"Error dropping table: \" . $conn -> error ; $conn -> close ();","title":"Creating or Dropping Table from PHP"},{"location":"lab12/#displaying-data-from-database-table","text":"Let's start displaying some data from the Student table. In the following index file, observe the highlighted lines. index.php 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 <?php require \"db-connect.php\" ; ?> <!DOCTYPE html> <html lang=\"en\"> <head> <meta charset=\"UTF-8\"> <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"> <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"> <title>Student Records</title> <style> table { border-collapse: collapse; } th, td { border: 1px solid black; padding: 5px; } </style> <script> function confirmDelete(id) { const CONFIRM_RESULT = confirm(`Do you wish to delete record #${id}?`); if (CONFIRM_RESULT) window.location.href = `delete-student.php?id=${id}`; } </script> </head> <body> <h1>Student Records</h1> <?php $sql = \"SELECT * FROM `Student`\" ; $result = $conn -> query ( $sql ); if ( $result ) { // check to see if query was successful if ( $result -> num_rows > 0 ) { // $result->num_rows returns the number of row results ?> <table> <tr> <th>ID</th> <th>First Name</th> <th>Last Name</th> <th>Age</th> <th>Email</th> <th>Active</th> <th>Actions</th> </tr> <?php while ( $row = $result -> fetch_assoc ()) { ?> <tr> <td> <? = $row [ \"id\" ]; ?> </td> <td> <? = $row [ \"first_name\" ]; ?> </td> <td> <? = $row [ \"last_name\" ]; ?> </td> <td> <? = $row [ \"age\" ]; ?> </td> <td> <? = $row [ \"email\" ]; ?> </td> <td> <? = $row [ \"active\" ] == 1 ? \"Yes\" : \"No\" ; ?> </td> <td> <button onclick=\"window.location.href='update-student.php?id= <? = $row [ 'id' ]; ?> ';\">Update</button> <button onclick=\"confirmDelete( <? = $row [ 'id' ]; ?> )\">Delete</button> </td> </tr> <?php } ?> </table> <?php } else echo \"No data found.\" ; // $result->num_rows = 0 (no rows of results are retrieved) } else echo \"Error retrieving results: \" . $conn -> error ; // database selection query not successful ?> <p><button onclick=\"window.location.href='add-student.php'\">Add Student</button></p> </body> </html> On line 40, the result after querying the SQL statement into the MySQL server is stored in a variable named $result . In here, a successful database query does not produce the TRUE value, but rather a query result often stored as an associative array. An unsuccessful one will still produce FALSE . Here, $result is checked to see if it is not false before proceeding. Following this, we check to see if there are any selected rows by retrieving the num_rows attribute from $result . It is important to know that not all SELECT statements will produce the intended results, let alone the intended number of selected rows. No row retrieval can mean a wrong SQL statement has been used to be executed in the database server. Should this happen, do check back in PHPMyAdmin to see if there are any discrepancies in the produced SQL statement. You may need to print out $sql to retrieve the statement used in this case. In each of the aforementioned checks, appropriate error messages are produced in the browser. Once all of these checks have been successfully performed and nothing is amiss, we iterate through the array of rows retrieved using a for loop. In each iteration, we store the current row temporarily in a variable named $row using the fetch_assoc() method. From here, selecting row data can be performed. In our index page here, each iteration produces a new <tr> in the <table> element, thus automating something that would have required quite a number of duplicated HTML lines but with different data portrayal. At the end of each row, an update and delete button is produced to allow editing and/or deletion of the rows starting from the index.php page itself. We will look into those later.","title":"Displaying Data from Database Table"},{"location":"lab12/#adding-records-to-table","text":"Underneath the produced table, there is a button which should link to a PHP form page responsible for collecting information from the user. add-student.php 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" /> < meta http-equiv = \"X-UA-Compatible\" content = \"IE=edge\" /> < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" /> < title > Add Student </ title > </ head > < body > < h1 > Add Student </ h1 > < form action = \"add-to-db.php\" method = \"post\" > < p > < label for = \"first_name\" > First Name </ label > < input type = \"text\" name = \"first_name\" id = \"first_name\" required /> </ p > < p > < label for = \"last_name\" > Last Name </ label > < input type = \"text\" name = \"last_name\" id = \"last_name\" required /> </ p > < p > < label for = \"age\" > Age </ label > < input type = \"number\" name = \"age\" id = \"age\" required /> </ p > < p > < label for = \"email\" > Email </ label > < input type = \"email\" name = \"email\" id = \"email\" required /> </ p > < p > < label for = \"active\" > Active? </ label > < input type = \"radio\" name = \"active\" value = \"1\" id = \"active-yes\" checked /> Yes < input type = \"radio\" name = \"active\" value = \"0\" id = \"active-no\" /> No </ p > < p > < input type = \"submit\" value = \"Submit\" /> < input type = \"reset\" value = \"Reset\" /> </ p > </ form > </ body > </ html > A simple form can be seen, where information is sent to add-to-db.php as the appropriate form handler. add-to-db.php 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 <?php require \"db-connect.php\" ; // var_dump($_POST); $first_name = $_POST [ \"first_name\" ]; $last_name = $_POST [ \"last_name\" ]; $age = $_POST [ \"age\" ]; $email = $_POST [ \"email\" ]; $active = $_POST [ \"active\" ]; if ( $age <= 0 ) { echo \"<script> alert('Invalid age, must be positive!'); window.location.href = 'add-student.php'; </script>\" ; } else { $sql = \"INSERT INTO `Student` (`first_name`, `last_name`, `age`, `email`, `active`) VALUES ('\" . $first_name . \"', '\" . $last_name . \"', \" . $age . \", '\" . $email . \"', \" . $active . \");\" ; // echo $sql; // Run the SQL statement if ( $conn -> query ( $sql )) { echo \"Inserted new record successfully\" ; // Redirect to index.php after successful entry header ( \"Location: index.php\" ); } else echo \"Error inserting record: \" . $conn -> error ; } The retrieved data from the form (ensure that your name attributes in your form elements are present and aptly named) stored inside the $_POST superglobal variable can then be appended to the $sql statement to be executed in the database server. An added check for $age is added in order to prevent erroneous age entry into the database. If the information entry into the database table is successful, the user should be redirected back to index.php where the newly entered data should be reflected in the table. Note While it is right to prepare cautionary measures to prevent erroneous or illegal data entry into the database, the database is often not the place to consider implementing such restrictions. Very often, it falls under the role of other back-end files interacting with it (and in charge of information retrieval).","title":"Adding Records to Table"},{"location":"lab12/#updating-records-in-table","text":"update-student.php 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 <?php if ( ! isset ( $_GET [ \"id\" ])) header ( \"Location: index.php\" ); require \"db-connect.php\" ; $sql = \"SELECT * FROM `Student` WHERE `id` = \" . $_GET [ \"id\" ]; $result = $conn -> query ( $sql ); ?> <!DOCTYPE html> <html lang=\"en\"> <head> <meta charset=\"UTF-8\"> <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"> <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"> <title>Update Student</title> </head> <body> <h1>Update Student</h1> <?php if ( $result ) { if ( $result -> num_rows > 0 ) { $row = $result -> fetch_assoc (); ?> <form action=\"update-db.php\" method=\"post\"> <input type=\"hidden\" name=\"id\" value=\" <? = $row [ \"id\" ]; ?> \"> <p>Updating Student with ID: <? = $row [ \"id\" ]; ?> </p> <p> First Name <input type=\"text\" name=\"first_name\" id=\"first_name\" value=\" <? = $row [ \"first_name\" ]; ?> \" required> </p> <p> Last Name <input type=\"text\" name=\"last_name\" id=\"last_name\" value=\" <? = $row [ \"last_name\" ]; ?> \" required> </p> <p> Age <input type=\"number\" name=\"age\" id=\"age\" value=\" <? = $row [ \"age\" ]; ?> \" required> </p> <p> Email <input type=\"email\" name=\"email\" id=\"email\" value=\" <? = $row [ \"email\" ]; ?> \" required> </p> <p> Active? <input type=\"radio\" name=\"active\" value=\"1\" id=\"active-yes\" <? = ( $row [ \"active\" ] == 1 ) ? \" checked\" : \"\" ; ?> > Yes <input type=\"radio\" name=\"active\" value=\"0\" id=\"active-no\" <? = ( $row [ \"active\" ] == 0 ) ? \" checked\" : \"\" ; ?> > No </p> <p> <input type=\"submit\" value=\"Submit\"> <input type=\"reset\" value=\"Reset\"> </p> </form> <?php } else echo \"No data found.\" ; // $result->num_rows = 0 (no rows of results are retrieved) } else echo \"Error retrieving results: \" . $conn -> error ; // database selection query not successful ?> </body> </html> Notice that when you try to click on the Update button present in any one of the rows, you would be redirected to this page here with the form data prefilled. This involves SELECTing the data from the database table and then appropriately appending them as the value attributes in the corresponding input fields. This page involves the use of a GET variable (specifically named id ), which is checked first before attempting to produce the pre-filled form. The page redirects you to back to index.php otherwise. The form handler works the same way as the one used for data entry, but with a different SQL statement. update-db.php 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 <?php require \"db-connect.php\" ; // var_dump($_POST); $id = $_POST [ \"id\" ]; $first_name = $_POST [ \"first_name\" ]; $last_name = $_POST [ \"last_name\" ]; $age = $_POST [ \"age\" ]; $email = $_POST [ \"email\" ]; $active = $_POST [ \"active\" ]; if ( $age <= 0 ) { echo \"<script> alert('Invalid age, must be positive!'); window.location.href = 'update-student.php?id=\" . $id . \"'; </script>\" ; } else { $sql = \"UPDATE `Student` SET `first_name` = '\" . $first_name . \"', `last_name` = '\" . $last_name . \"', `age` = \" . $age . \", `email` = '\" . $email . \"', `active` = \" . $active . \" WHERE `id` = \" . $id ; // echo $sql; // Run the SQL statement if ( $conn -> query ( $sql )) { echo \"Updated record with ID \" . $id . \" successfully\" ; // Redirect to index.php after successful update header ( \"Location: index.php\" ); } else echo \"Error updating record \" . $id . \": \" . $conn -> error ; }","title":"Updating Records in Table"},{"location":"lab12/#deleting-records-from-table","text":"In the index.php file, the delete button in each row invokes the JavaScript function to prompt the user first before proceeding with deletion of the data. Should the user then proceed to do so, the user is redirected to the delete-student.php file with the ID as the GET value. Like update-student.php , it redirects the users back to index.php if no GET value of name id is present. delete-student.php 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 <?php if ( ! isset ( $_GET [ \"id\" ])) header ( \"Location: index.php\" ); require \"db-connect.php\" ; $id = $_GET [ \"id\" ]; $sql = \"DELETE FROM `Student` WHERE `id` = \" . $id ; // echo $sql; // Run the SQL statement if ( $conn -> query ( $sql )) { echo \"Deleted record with ID \" . $id . \" successfully\" ; // Redirect to index.php after successful update header ( \"Location: index.php\" ); } else echo \"Error deleting record \" . $id . \": \" . $conn -> error ; After deletion, the table should portray the remaining rows left in the table.","title":"Deleting Records from Table"},{"location":"lab12/#challenge","text":"You may have noticed that in some of the displayed outputs, the IDs do not follow a proper order. This is mainly due to the fact that they are only reliant on the IDs that are set in the database as per the AUTO_INCREMENT constraint on the id column. However, this does not present well for a typical user who may not understand this mechanism. How would you edit the presented IDs to resemble the typical ascending order flow? (i.e., 1, 2, 3, 4, ...)","title":"Challenge?"},{"location":"lamp_macos/","text":"Setting Up LAMP Stack in macOS (The Hard Way) So, you're a macOS user who couldn't install or use XAMPP properly... or you decided to be nuts and try things the hard way. Well, if you decided to open and follow this guide for whatever your reason may be, here's a rundown of what you'll need to do to set up the LAMP stack inside your macOS machine. Let's get started! Take Note As of writing this guide, we are using macOS Big Sur (macOS 11.0+), PHP 8.0.9, MySQL Community Server 8.0.25, and phpMyAdmin 5.1.1. This guide may get outdated rather quickly, so if you're reading this after at least a year from the publication of this guide, do due diligence and find out if any of the steps no longer apply to you. Step 1: Start the Apache Server macOS comes with the Apache Server by default. To start the built-in Apache server, open the Terminal app from your Application folder or type Terminal in the Spotlight Search (shortcut: Cmd + Space ). Type sudo apachectl start and press Enter. Open your web browser and type localhost or 127.0.0.1 in the address bar. If the Apache Server has successfully started, you should see this appear in your web browser: Step 2: Create Sites Directory Fancy, yes? The page you're looking at now is a result of a default webpage file that is in the following location: /Library/WebServer/Documents To be precise, this file you're looking at is named index.html.en . However, that's quite a hard-to-remember location if you're not well-versed with the ins and outs of your system. In addition, this folder's contents cannot be edited without changing a few permissions by default. As a workaround, we will create a Sites directory under your home folder and use that folder to contain all our PHP web files. At the end of this guide, typing in localhost or 127.0.0.1 in your web browser's address bar will source the web files from this folder for view. Heawd over to your account folder. This one should be the folder with your computer's name on it. The full location of this folder is: Macintosh HD/Users/<your_account_folder> Create a folder named Sites. Upon creating the folder, the folder icon should now have a compass image appear on top of it like as shown below: For easier access, I have it as a shortcut in the Finder window's left-hand menu (just drag this Sites folder over to the left menu). You can also drag it to the dock if you so desire. Step 3: Create username.conf File To be able to recognize the files stashed inside the Sites directory, you will require setting up a configuration file called <username>.conf (i.e., if the account username I'm using in my machine is henryheng612 , my configuration file should be called henryheng612.conf ). If you're not sure what your account username is, type whoami in the Terminal and hit Enter. This UNIX command will reveal it inside your Terminal window. Remember to note that name down, we will be using it shortly. Right now, the Terminal window is currently inside your account folder. We will need to create this configuration file in a different location. Type the following command line and press Enter. cd /etc/apache2/users Extra Note: cd is the command in UNIX to navigate out of your current directory to a new one. Type ls and press Enter again. This command displays all visible files in the current file directory (to include ones hidden by default, type ls -a instead). Check to see if there is an existing <username>.conf file (it will appear in the Terminal window if it exists). If so, make a backup copy by entering the following command: sudo cp <username>.conf <username>.conf.bak Remember to replace all instances of <username> with your own account username! Extra Note: sudo is used to request administrator access in a UNIX system. Often if you use sudo , you'll be prompted to enter your password. Don't worry, this is normal. We are now ready to create/edit our configuration file. Type sudo nano <username>.conf in the Terminal window and press Enter. If the file does not exist, you should see a blank window space. Extra Note: nano is a text editor used in UNIX command line interface (CLI) systems that functions like any regular text editor you've used before, just without mousr support and some nice-to-have features. Frequent UNIX users will find themselves using it often. Alternatives are vi and vim , and I think there's a debate among some nerds about which is best. Unless this piques your interest, you need not know the details behind it. Copy and paste the following configuration. <Directory \"Users/<username>/Sites/\"> AllowOverride All Options Indexes MultiViews FollowSymLinks Require all granted </Directory> A gentle reminder: Remember to replace all instances of <username> with your account username! Press Ctrl + O and press Enter to save the file. Press Ctrl + X and press Enter to exit the nano editor. Step 4: Configure the httpd.conf File Now there's also another configuration file we'll need to modify, namely the httpd.conf file. In your Terminal window, enter in cd /etc/apache2 Type ls and press Enter again. You should see httpd.conf being listed as one of the files inside the current directory. Type sudo cp httpd.conf httpd.conf.bak and press Enter. This will create a backup of this configuration file in case something goes awry. Type sudo nano httpd.conf and press Enter. You should see something like this appear in the nano text editor in your Terminal window. Press Ctrl + W , type in LoadModule authz_core_module and press Enter. We are using a search feature in the nano text editor to look for specific lines inside this file. Uncomment the following modules. The # you see in front of each line means that line is commented out (i.e., that specific line or module will be ignored). What we want to do is to enable these modules in our Apache server. LoadModule authn_core_module libexec/apache2/mod_authn_core.so LoadModule authz_host_module libexec/apache2/mod_authz_host.so LoadModule userdir_module libexec/apache2/mod_userdir.so LoadModule include_module libexec/apache2/mod_include.so LoadModule rewrite_module libexec/apache2/mod_rewrite.so Uncomment the following line for the User home directories. Include /private/etc/apache2/extra/httpd-userdir.conf Press Ctrl + W , search up DocumentRoot and press Enter. We want to edit the following two lines \u2013 this shows DocumentRoot configuration in httpd.conf which dictates the folder where your machine will source its web files to be used inside localhost. ... DocumentRoot \"/Library/WebServer/Documents\" <Directory \"/Library/WebServer/Documents\"> ... You may choose to replace them completely with these two lines or add them after commenting the latter. ... DocumentRoot \"/Users/<username>/Sites/\" <Directory \"/Users/<username>/Sites/\"> ... A gentle reminder: Remember to replace all instances of <username> with your account username! Press Ctrl + W , search up AllowOverride None and press Enter. Here, replace this line with AllowOVerride All . Your DocumentRoot configuration in httpd.conf should look like as follows: For extra measure, we can set the Apache Server to serve an index.php file instance first before an index.html. Press Ctrl + W , search up DirectoryIndex and press Enter. You should see the following: From the line where it says DirectoryIndex index.html Add index.php so it now says DirectoryIndex index.php index.html Press Ctrl + O and press Enter to save the file. Press Ctrl + X and press Enter to exit the nano editor. Step 5: Configure the httpd-userdir.conf File In yuor Terminal window, enter in cd /etc/apache2/extra . Type ls and press Enter again. You should see httpd-userdir.conf being listed as one of the files inside the current directory. Type sudo cp httpd-userdir.conf httpd-userdir.conf.bak and press Enter. This will create a backup of this configuration file in case something goes awry. Type sudo nano httpd-userdir.conf and press Enter. You should see something like this appear in the nano text editor in your Terminal window: Uncomment the following line. Include /private/etc/apache2/users/*.conf Press Ctrl + O and press Enter to save the file. Press Ctrl + X and press Enter to exit the nano editor. After carrying out the previous 5 steps, type in sudo apachectl restart amd press Enter. If you type in localhost or 127.0.0.1 in your web browser's address bar now, it should show a 403 Forbidden Access error akin to the following: Not to worry! It means everything's been set up properly so far. This error is caused due to the Sites folder we created not having an index.php or index.html file to display. Step 6: Enable PHP 8.0 macOS has PHP built in (at least in macOS Big Sur and earlier). The PHP shipped with Big Sur is PHP version 7.3.22, which Apple hints on removing in one of the upcoming future versions of macOS. Regardless, we will be using a fresh install of PHP 8.0 using an installation package manager called Homebrew. Head over to https://brew.sh . You will be greeted with Homebrew's home page as follows: The first section you should see is \"Install Homebrew\", where there's a Terminal command line following the title. Copy that command line and run it in a Terminal window. This will install Homebrew inside your Mac. Give it time, it will be ready for use shortly. After installing Homebrew, type in brew install php . This will install PHP as well as any other software dependencies required into your Mac (think of software dependencies as pre-requisites). Open a new tab in the Terminal (or reboot the Terminal application). If you enter in php --version , you should view the PHP version being used like as follows: NOTE ABOUT THIS TERMINAL WINDOW INTERFACE I'm currently using Oh My Zsh in my terminal, this is not required for you to follow this whole guide. If you would like to try out my not-so-custom Oh My Zsh Terminal theme, look up how to install Oh My Zsh first, then head over to the following link to download my theme. Have fun either way! My Custom Theme Here Now that PHP's been installed in your Mac, we will need Apache to use this PHP by default. To do this, we will have to return to our httpd.conf file once more to make some further changes. In your Terminal window, enter in sudo nano /etc/apache2/httpd.conf . You may have noticed that after successfully installing PHP with Homebrew. If you've missed it, you can type in brew info php and the instructions will reappear again. Refer to the part under Caveats . This part details what is required to add into your httpd.conf file. Depending on your Mac (from what I've known from M1 Mac users, the file locations may vary), you may be asked to insert the following or a variant of it: LoadModule php_module /usr/local/opt/php/lib/httpd/modules/libphp.so <FilesMatch \\.php$> SetHandler application/x-httpd-php </FilesMatch> That is all which will be needed Press Ctrl + W , search up LoadModule php and press Enter. After the last LoadModule line, paste the required lines as mentioned in Line 7. Danger Do not uncomment the following line! #LoadModule php7_module libexec/apache2/libphp7.so Uncommenting this will get Apache to run the outdated PHP that came with your Mac, we don't want this. Press Ctrl + O and press Enter to save the file. Press Ctrl + X and press Enter to exit the nano editor. Type in sudo apachectl restart and press Enter. This should enable the changes we made to have Apache run PHP 8.0 in your Mac. Is PHP working properly now? To check if PHP is working on your local Mac's web server, we will be creating a phpinfo() file to load into your browser. Go to your Sites folder and create a file called phpinfo.php . In phpinfo.php , put in the following code and save the file: phpinfo.php 1 <?php phpinfo (); ?> If you type in localhost/phpinfo.php or 127.0.0.1/phpinfo.php in your web browser's address bar, you should see something like this: Congratulations, you're now running a current version of PHP on your local web server! Step 7: Install MySQL You will also require a MySQL or mariaDB database server. This step will involve installing MySQL's Community Server inside your Mac to use \u2013 if you plan on learning more on MySQL databases, consider this a way to kill two birds with one stone! \ud83d\ude01 Like with PHP, you can install MySQL or mariaDB with Homebrew. However, the following instructions will focus more towards not interacting with the Terminal as much as possible. Head over to the following link and download the DMG Archive installer. https://dev.mysql.com/downloads/mysql/ Proceed with the installation up until you reach Configuration stage (this should be the second last part of the installation process). At the Configuration stage, you will be required to select a Password Encryption type. We will be installing one more piece of software to access our MySQL database later, but it will not work well if we choose the Strong Password Encryption option. In this case, select Use Legacy Password Encryption. Enter in your MySQL database password. OOPS! If you proceeded with the Strong Password Encryption by mistake during installation, don't worry. Head over to System Preferences, and you should see MySQL as one of the last options in the window as follows: Select the MySQL option and you will be greeted with a dashboard like as follows: Select Initialize Database and you'll be greeted with this screen. Select Use Legacy Password Encryption and enter your password again. Crisis averted!! \ud83d\ude0c Open up a NEW Terminal window and type in ls -a . Look and see if either a file called .zshrc or .bashrc exists inside your account folder. In this example, my machine has .zshrc . If you have .zshrc like in my case (this should be true for all those running macOS Cataline or later), type the following command: echo \"export PATH=${PATH}:/usr/local/mysql/bin/\" >> ~/.zshrc If you're using .bashrc instead, type the following command: echo \"export PATH=${PATH}:/usr/local/mysql/bin/\" >> ~/.bashrc Open a new Terminal window and enter in mysql --version . It should print out the version of MySQL installed in your machine. Type in mysql -u root -p . You should be prompted to enter the password you've set for MySQL. Once you've entered the correct password, you should see a CLI nterface to enter MySQL commands. We don't need to do anything here for now, so just type in exit and press Enter to exit this interface. If you like, you can also proceed to install MySQL Workbench. It is an IDE that is primarily used to create and test MySQL scripts. However, we will be using something else instead for this module.. and that is phpMyAdmin. Step 8: Install phpMyAdmin Alright, the last thing you'll need to install and/or configure.. I promise! Also like PHP, you can install phpMyAdmin using Homebrew, but we will again avoid using the Terminal like for MySQL in the following instructions. Head over to the following link to download phpMyAdmin (which is in a zip file): https://phpmyadmin.net Unzip the zip file. Rename the folder to just \"phpmyadmin\" and move it to the Sites folder. If you type in localhost/phpinfo.php or 127.0.0.1/phpinfo.php in your browser's address bar, you should be greeted with a login page like this: Type in root as your username and enter the password you set when installing MySQL earlier. You should now be greeted with a control panel like this: And... you're done! That is all you need to install and configure to prepare a LAMP stack from scratch. I hope you've gained a sense of accomplishment from going through these steps, it's a fruitful one! If you have any more questions, you know where to reach me. \ud83d\ude09 References [Tech CookBook] Setting Up Your Local Web Server on macOS Big Sur 11.0.1 (2020) | MAMP | macOS, Apache, MySQL, PHP. Link: https://tech-cookbook.com/2020/11/14/setting-up-your-local-web-server-on-macos-big-sur-11-0-1-2020-mamp-macos-apache-mysql-php/ [YouTube] How To Set Up phpMyAdmin With MySQL 8.0+ on MacOS. Link: https://youtu.be/SVNbRXUEDUg","title":"Setting Up LAMP Stack in macOS (The Hard Way)"},{"location":"lamp_macos/#setting-up-lamp-stack-in-macos-the-hard-way","text":"So, you're a macOS user who couldn't install or use XAMPP properly... or you decided to be nuts and try things the hard way. Well, if you decided to open and follow this guide for whatever your reason may be, here's a rundown of what you'll need to do to set up the LAMP stack inside your macOS machine. Let's get started! Take Note As of writing this guide, we are using macOS Big Sur (macOS 11.0+), PHP 8.0.9, MySQL Community Server 8.0.25, and phpMyAdmin 5.1.1. This guide may get outdated rather quickly, so if you're reading this after at least a year from the publication of this guide, do due diligence and find out if any of the steps no longer apply to you.","title":"Setting Up LAMP Stack in macOS (The Hard Way)"},{"location":"lamp_macos/#step-1-start-the-apache-server","text":"macOS comes with the Apache Server by default. To start the built-in Apache server, open the Terminal app from your Application folder or type Terminal in the Spotlight Search (shortcut: Cmd + Space ). Type sudo apachectl start and press Enter. Open your web browser and type localhost or 127.0.0.1 in the address bar. If the Apache Server has successfully started, you should see this appear in your web browser:","title":"Step 1: Start the Apache Server"},{"location":"lamp_macos/#step-2-create-sites-directory","text":"Fancy, yes? The page you're looking at now is a result of a default webpage file that is in the following location: /Library/WebServer/Documents To be precise, this file you're looking at is named index.html.en . However, that's quite a hard-to-remember location if you're not well-versed with the ins and outs of your system. In addition, this folder's contents cannot be edited without changing a few permissions by default. As a workaround, we will create a Sites directory under your home folder and use that folder to contain all our PHP web files. At the end of this guide, typing in localhost or 127.0.0.1 in your web browser's address bar will source the web files from this folder for view. Heawd over to your account folder. This one should be the folder with your computer's name on it. The full location of this folder is: Macintosh HD/Users/<your_account_folder> Create a folder named Sites. Upon creating the folder, the folder icon should now have a compass image appear on top of it like as shown below: For easier access, I have it as a shortcut in the Finder window's left-hand menu (just drag this Sites folder over to the left menu). You can also drag it to the dock if you so desire.","title":"Step 2: Create Sites Directory"},{"location":"lamp_macos/#step-3-create-usernameconf-file","text":"To be able to recognize the files stashed inside the Sites directory, you will require setting up a configuration file called <username>.conf (i.e., if the account username I'm using in my machine is henryheng612 , my configuration file should be called henryheng612.conf ). If you're not sure what your account username is, type whoami in the Terminal and hit Enter. This UNIX command will reveal it inside your Terminal window. Remember to note that name down, we will be using it shortly. Right now, the Terminal window is currently inside your account folder. We will need to create this configuration file in a different location. Type the following command line and press Enter. cd /etc/apache2/users Extra Note: cd is the command in UNIX to navigate out of your current directory to a new one. Type ls and press Enter again. This command displays all visible files in the current file directory (to include ones hidden by default, type ls -a instead). Check to see if there is an existing <username>.conf file (it will appear in the Terminal window if it exists). If so, make a backup copy by entering the following command: sudo cp <username>.conf <username>.conf.bak Remember to replace all instances of <username> with your own account username! Extra Note: sudo is used to request administrator access in a UNIX system. Often if you use sudo , you'll be prompted to enter your password. Don't worry, this is normal. We are now ready to create/edit our configuration file. Type sudo nano <username>.conf in the Terminal window and press Enter. If the file does not exist, you should see a blank window space. Extra Note: nano is a text editor used in UNIX command line interface (CLI) systems that functions like any regular text editor you've used before, just without mousr support and some nice-to-have features. Frequent UNIX users will find themselves using it often. Alternatives are vi and vim , and I think there's a debate among some nerds about which is best. Unless this piques your interest, you need not know the details behind it. Copy and paste the following configuration. <Directory \"Users/<username>/Sites/\"> AllowOverride All Options Indexes MultiViews FollowSymLinks Require all granted </Directory> A gentle reminder: Remember to replace all instances of <username> with your account username! Press Ctrl + O and press Enter to save the file. Press Ctrl + X and press Enter to exit the nano editor.","title":"Step 3: Create username.conf File"},{"location":"lamp_macos/#step-4-configure-the-httpdconf-file","text":"Now there's also another configuration file we'll need to modify, namely the httpd.conf file. In your Terminal window, enter in cd /etc/apache2 Type ls and press Enter again. You should see httpd.conf being listed as one of the files inside the current directory. Type sudo cp httpd.conf httpd.conf.bak and press Enter. This will create a backup of this configuration file in case something goes awry. Type sudo nano httpd.conf and press Enter. You should see something like this appear in the nano text editor in your Terminal window. Press Ctrl + W , type in LoadModule authz_core_module and press Enter. We are using a search feature in the nano text editor to look for specific lines inside this file. Uncomment the following modules. The # you see in front of each line means that line is commented out (i.e., that specific line or module will be ignored). What we want to do is to enable these modules in our Apache server. LoadModule authn_core_module libexec/apache2/mod_authn_core.so LoadModule authz_host_module libexec/apache2/mod_authz_host.so LoadModule userdir_module libexec/apache2/mod_userdir.so LoadModule include_module libexec/apache2/mod_include.so LoadModule rewrite_module libexec/apache2/mod_rewrite.so Uncomment the following line for the User home directories. Include /private/etc/apache2/extra/httpd-userdir.conf Press Ctrl + W , search up DocumentRoot and press Enter. We want to edit the following two lines \u2013 this shows DocumentRoot configuration in httpd.conf which dictates the folder where your machine will source its web files to be used inside localhost. ... DocumentRoot \"/Library/WebServer/Documents\" <Directory \"/Library/WebServer/Documents\"> ... You may choose to replace them completely with these two lines or add them after commenting the latter. ... DocumentRoot \"/Users/<username>/Sites/\" <Directory \"/Users/<username>/Sites/\"> ... A gentle reminder: Remember to replace all instances of <username> with your account username! Press Ctrl + W , search up AllowOverride None and press Enter. Here, replace this line with AllowOVerride All . Your DocumentRoot configuration in httpd.conf should look like as follows: For extra measure, we can set the Apache Server to serve an index.php file instance first before an index.html. Press Ctrl + W , search up DirectoryIndex and press Enter. You should see the following: From the line where it says DirectoryIndex index.html Add index.php so it now says DirectoryIndex index.php index.html Press Ctrl + O and press Enter to save the file. Press Ctrl + X and press Enter to exit the nano editor.","title":"Step 4: Configure the httpd.conf File"},{"location":"lamp_macos/#step-5-configure-the-httpd-userdirconf-file","text":"In yuor Terminal window, enter in cd /etc/apache2/extra . Type ls and press Enter again. You should see httpd-userdir.conf being listed as one of the files inside the current directory. Type sudo cp httpd-userdir.conf httpd-userdir.conf.bak and press Enter. This will create a backup of this configuration file in case something goes awry. Type sudo nano httpd-userdir.conf and press Enter. You should see something like this appear in the nano text editor in your Terminal window: Uncomment the following line. Include /private/etc/apache2/users/*.conf Press Ctrl + O and press Enter to save the file. Press Ctrl + X and press Enter to exit the nano editor. After carrying out the previous 5 steps, type in sudo apachectl restart amd press Enter. If you type in localhost or 127.0.0.1 in your web browser's address bar now, it should show a 403 Forbidden Access error akin to the following: Not to worry! It means everything's been set up properly so far. This error is caused due to the Sites folder we created not having an index.php or index.html file to display.","title":"Step 5: Configure the httpd-userdir.conf File"},{"location":"lamp_macos/#step-6-enable-php-80","text":"macOS has PHP built in (at least in macOS Big Sur and earlier). The PHP shipped with Big Sur is PHP version 7.3.22, which Apple hints on removing in one of the upcoming future versions of macOS. Regardless, we will be using a fresh install of PHP 8.0 using an installation package manager called Homebrew. Head over to https://brew.sh . You will be greeted with Homebrew's home page as follows: The first section you should see is \"Install Homebrew\", where there's a Terminal command line following the title. Copy that command line and run it in a Terminal window. This will install Homebrew inside your Mac. Give it time, it will be ready for use shortly. After installing Homebrew, type in brew install php . This will install PHP as well as any other software dependencies required into your Mac (think of software dependencies as pre-requisites). Open a new tab in the Terminal (or reboot the Terminal application). If you enter in php --version , you should view the PHP version being used like as follows: NOTE ABOUT THIS TERMINAL WINDOW INTERFACE I'm currently using Oh My Zsh in my terminal, this is not required for you to follow this whole guide. If you would like to try out my not-so-custom Oh My Zsh Terminal theme, look up how to install Oh My Zsh first, then head over to the following link to download my theme. Have fun either way! My Custom Theme Here Now that PHP's been installed in your Mac, we will need Apache to use this PHP by default. To do this, we will have to return to our httpd.conf file once more to make some further changes. In your Terminal window, enter in sudo nano /etc/apache2/httpd.conf . You may have noticed that after successfully installing PHP with Homebrew. If you've missed it, you can type in brew info php and the instructions will reappear again. Refer to the part under Caveats . This part details what is required to add into your httpd.conf file. Depending on your Mac (from what I've known from M1 Mac users, the file locations may vary), you may be asked to insert the following or a variant of it: LoadModule php_module /usr/local/opt/php/lib/httpd/modules/libphp.so <FilesMatch \\.php$> SetHandler application/x-httpd-php </FilesMatch> That is all which will be needed Press Ctrl + W , search up LoadModule php and press Enter. After the last LoadModule line, paste the required lines as mentioned in Line 7. Danger Do not uncomment the following line! #LoadModule php7_module libexec/apache2/libphp7.so Uncommenting this will get Apache to run the outdated PHP that came with your Mac, we don't want this. Press Ctrl + O and press Enter to save the file. Press Ctrl + X and press Enter to exit the nano editor. Type in sudo apachectl restart and press Enter. This should enable the changes we made to have Apache run PHP 8.0 in your Mac.","title":"Step 6: Enable PHP 8.0"},{"location":"lamp_macos/#is-php-working-properly-now","text":"To check if PHP is working on your local Mac's web server, we will be creating a phpinfo() file to load into your browser. Go to your Sites folder and create a file called phpinfo.php . In phpinfo.php , put in the following code and save the file: phpinfo.php 1 <?php phpinfo (); ?> If you type in localhost/phpinfo.php or 127.0.0.1/phpinfo.php in your web browser's address bar, you should see something like this: Congratulations, you're now running a current version of PHP on your local web server!","title":"Is PHP working properly now?"},{"location":"lamp_macos/#step-7-install-mysql","text":"You will also require a MySQL or mariaDB database server. This step will involve installing MySQL's Community Server inside your Mac to use \u2013 if you plan on learning more on MySQL databases, consider this a way to kill two birds with one stone! \ud83d\ude01 Like with PHP, you can install MySQL or mariaDB with Homebrew. However, the following instructions will focus more towards not interacting with the Terminal as much as possible. Head over to the following link and download the DMG Archive installer. https://dev.mysql.com/downloads/mysql/ Proceed with the installation up until you reach Configuration stage (this should be the second last part of the installation process). At the Configuration stage, you will be required to select a Password Encryption type. We will be installing one more piece of software to access our MySQL database later, but it will not work well if we choose the Strong Password Encryption option. In this case, select Use Legacy Password Encryption. Enter in your MySQL database password. OOPS! If you proceeded with the Strong Password Encryption by mistake during installation, don't worry. Head over to System Preferences, and you should see MySQL as one of the last options in the window as follows: Select the MySQL option and you will be greeted with a dashboard like as follows: Select Initialize Database and you'll be greeted with this screen. Select Use Legacy Password Encryption and enter your password again. Crisis averted!! \ud83d\ude0c Open up a NEW Terminal window and type in ls -a . Look and see if either a file called .zshrc or .bashrc exists inside your account folder. In this example, my machine has .zshrc . If you have .zshrc like in my case (this should be true for all those running macOS Cataline or later), type the following command: echo \"export PATH=${PATH}:/usr/local/mysql/bin/\" >> ~/.zshrc If you're using .bashrc instead, type the following command: echo \"export PATH=${PATH}:/usr/local/mysql/bin/\" >> ~/.bashrc Open a new Terminal window and enter in mysql --version . It should print out the version of MySQL installed in your machine. Type in mysql -u root -p . You should be prompted to enter the password you've set for MySQL. Once you've entered the correct password, you should see a CLI nterface to enter MySQL commands. We don't need to do anything here for now, so just type in exit and press Enter to exit this interface. If you like, you can also proceed to install MySQL Workbench. It is an IDE that is primarily used to create and test MySQL scripts. However, we will be using something else instead for this module.. and that is phpMyAdmin.","title":"Step 7: Install MySQL"},{"location":"lamp_macos/#step-8-install-phpmyadmin","text":"Alright, the last thing you'll need to install and/or configure.. I promise! Also like PHP, you can install phpMyAdmin using Homebrew, but we will again avoid using the Terminal like for MySQL in the following instructions. Head over to the following link to download phpMyAdmin (which is in a zip file): https://phpmyadmin.net Unzip the zip file. Rename the folder to just \"phpmyadmin\" and move it to the Sites folder. If you type in localhost/phpinfo.php or 127.0.0.1/phpinfo.php in your browser's address bar, you should be greeted with a login page like this: Type in root as your username and enter the password you set when installing MySQL earlier. You should now be greeted with a control panel like this: And... you're done! That is all you need to install and configure to prepare a LAMP stack from scratch. I hope you've gained a sense of accomplishment from going through these steps, it's a fruitful one! If you have any more questions, you know where to reach me. \ud83d\ude09","title":"Step 8: Install phpMyAdmin"},{"location":"lamp_macos/#references","text":"[Tech CookBook] Setting Up Your Local Web Server on macOS Big Sur 11.0.1 (2020) | MAMP | macOS, Apache, MySQL, PHP. Link: https://tech-cookbook.com/2020/11/14/setting-up-your-local-web-server-on-macos-big-sur-11-0-1-2020-mamp-macos-apache-mysql-php/ [YouTube] How To Set Up phpMyAdmin With MySQL 8.0+ on MacOS. Link: https://youtu.be/SVNbRXUEDUg","title":"References"},{"location":"list_202008/","text":"Name List Per Session (2020 August) Session 1 (Group 3 - Wednesday 10:00am - 12:00pm @ D7.13) # Student ID Student Name Available 1 0342302 ANG WEI JIA N 2 0343161 ARIANA NGAI SU WEI N 3 0343915 BRENDA NG ZHI YI N 4 0344251 CHEN XIAN NING N 5 0343965 CLIFF CHONG ZHENG-EU N 6 0344240 DAIYAN HAZEEQ BIN MOHAMED YAZMAN N 7 0342453 DANIEL HO KWOK PIN N 8 0342601 EDMUND GOH SEH BENG N 9 0342347 GAM CHEE XUAN N 10 0343706 GOH SHEE XUAN N 11 0343501 HARRISH SUTHARSHAN N 12 0343138 HAZEEM BIN ASMIE N 13 0343254 HENG CHLOE N 14 0342578 HO SOOK KEI N 15 0342634 JEFFREY CHEOK JUN WAH N 16 0343119 JESSLYN LAW HEW YAN N 17 0343155 KONG LI WEI N 18 0342506 LEE EE LING N 19 0342536 LIM YUK YING N 20 0343509 LOO ZEN HEI, DEXEL N 21 0343084 MUHAMMAD AMIRUL FIKRI BIN ABDUL HAFIZ N 22 0344573 MUHAMMAD ZIDAN BIN HAIROLLAH N 23 0342286 NADHILA NAJWA BINTI SHAROLNIZAM N 24 0344734 NATHANIEL TAY XIN RONG N 25 0342065 ONG SHI HOONG N 26 0342638 OOI ZONG YUAN N 27 0342821 PRAVEEN RAJENDRAN N 28 0342730 ROSHANTH S/O JEYARAJ N 29 0343074 SYED AMIEL MATEEN BIN SYED ADRIN PUTRA N 30 0342363 TAN KATHY N 31 0342508 TANG YI FONG N 32 0343089 TENG KWOK SANG N 33 0342855 WHOONG ZI WEI N 34 0342360 WONG CHEE WAI N Session 2 (Group 1 - Wednesday 2:00pm - 4:00pm @ D7.14) # Student ID Student Name Available 1 0341932 ABDUL LATIF MOHAMED IRFAN FAZLANI N 2 0342907 AMIR HAZIQ BIN OTHMAN N 3 0342674 BRYAN TAN YEE KHAI N 4 0341928 CHEAH BING XIAN N 5 0341884 CHELSEA LIAWANDY N 6 0343024 DINESH PANIKKER S/O SIVADASAN N 7 0341886 DYLAN TAN CHING ZHE N 8 0340772 HO JIE MING AARON N 9 0342776 HUMERA SALEH N 10 0340792 IMAN HAFIZ BIN KHAIRUL ANUAR N 11 0342458 JOSHUA MARK NAIR N 12 0342720 KAVIN RAJ S/O PARANTHAMAN N 13 0341754 KIM KI MIN N 14 0341952 MAHOMED AQEEL AHMED HUSSEIN N 15 0341892 MOHAMMED AHNAF TAJWAR N 16 0342738 MUHAMMAD NAFEEZ BIN NASSER N 17 0341863 MUHAMMAD RAKIBUR RAHMAN JIM N 18 0342401 NG KEN LIN N 19 0341789 NOWREEN ZAMAN BHUIYAN N 20 0340077 QUA YU HANG N 21 0342906 RYAN THIAGARAJAH N 22 0342929 TAY JIA MING N 23 0341896 TI SHIN KIR N 24 0343056 WU DONG-YIU N 25 0343022 YEO ZHEN HAW N Session 3 (Group 2 - Thursday 2:00pm - 4:00pm @ D7.14) # Student ID Student Name Available 1 0343592 AMAL DANISH AZMAN N 2 0344286 BENJAMIN JESUDEAN DANIEL N 3 0342297 BRIAN LEE KAR ONN N 4 0344399 CHAI QI QIAN N 5 0344233 CHOO ZHENG N 6 0344051 HEW PUI EE N 7 0344653 IRFAN QURESHI BIN MOHAMAD ASLAM N 8 0344474 LAU JING EN N 9 0344250 LAU YUEN SHUEN N 10 0344010 LEOW HAN BIN N 11 0343750 LIAW WEI ZHEN N 12 0344054 MALCOLM TAN YU XUEN N 13 0344209 MATTHIAS NIVEN RAJ N 14 0344486 MUHAMMAD DANIEL BIN ZAKARIAH N 15 0343966 NG BOON BIN N 16 0343975 NIVETHITHA S. LOGANATHAN N 17 0344697 NORMAN HENG CHON SHENG N 18 0344435 PONG JING XUAN N 19 0344708 RACHEL GOH WEN XUEN N 20 0344011 SIN JUN YU N 21 0342767 SIN KIRK YI N 22 0344452 SURIA KUMAR S/O KARUPPANNAN N 23 0344008 TAJESWAR S/O RAMESH N 24 0343749 TAN JIA CHUN N 25 0343977 THEVENDREN S/O KUMARAN N 26 0344752 TAN JUN QI N 27 0342856 VALENTINE CHEPKORIR LANG'AT N 28 0344292 VETRI S/O THANABALAN N 29 0343067 YAP MING XUAN N","title":"2020 August"},{"location":"list_202008/#name-list-per-session-2020-august","text":"","title":"Name List Per Session (2020 August)"},{"location":"list_202008/#session-1-group-3-wednesday-1000am-1200pm-d713","text":"# Student ID Student Name Available 1 0342302 ANG WEI JIA N 2 0343161 ARIANA NGAI SU WEI N 3 0343915 BRENDA NG ZHI YI N 4 0344251 CHEN XIAN NING N 5 0343965 CLIFF CHONG ZHENG-EU N 6 0344240 DAIYAN HAZEEQ BIN MOHAMED YAZMAN N 7 0342453 DANIEL HO KWOK PIN N 8 0342601 EDMUND GOH SEH BENG N 9 0342347 GAM CHEE XUAN N 10 0343706 GOH SHEE XUAN N 11 0343501 HARRISH SUTHARSHAN N 12 0343138 HAZEEM BIN ASMIE N 13 0343254 HENG CHLOE N 14 0342578 HO SOOK KEI N 15 0342634 JEFFREY CHEOK JUN WAH N 16 0343119 JESSLYN LAW HEW YAN N 17 0343155 KONG LI WEI N 18 0342506 LEE EE LING N 19 0342536 LIM YUK YING N 20 0343509 LOO ZEN HEI, DEXEL N 21 0343084 MUHAMMAD AMIRUL FIKRI BIN ABDUL HAFIZ N 22 0344573 MUHAMMAD ZIDAN BIN HAIROLLAH N 23 0342286 NADHILA NAJWA BINTI SHAROLNIZAM N 24 0344734 NATHANIEL TAY XIN RONG N 25 0342065 ONG SHI HOONG N 26 0342638 OOI ZONG YUAN N 27 0342821 PRAVEEN RAJENDRAN N 28 0342730 ROSHANTH S/O JEYARAJ N 29 0343074 SYED AMIEL MATEEN BIN SYED ADRIN PUTRA N 30 0342363 TAN KATHY N 31 0342508 TANG YI FONG N 32 0343089 TENG KWOK SANG N 33 0342855 WHOONG ZI WEI N 34 0342360 WONG CHEE WAI N","title":"Session 1 (Group 3 - Wednesday 10:00am - 12:00pm @ D7.13)"},{"location":"list_202008/#session-2-group-1-wednesday-200pm-400pm-d714","text":"# Student ID Student Name Available 1 0341932 ABDUL LATIF MOHAMED IRFAN FAZLANI N 2 0342907 AMIR HAZIQ BIN OTHMAN N 3 0342674 BRYAN TAN YEE KHAI N 4 0341928 CHEAH BING XIAN N 5 0341884 CHELSEA LIAWANDY N 6 0343024 DINESH PANIKKER S/O SIVADASAN N 7 0341886 DYLAN TAN CHING ZHE N 8 0340772 HO JIE MING AARON N 9 0342776 HUMERA SALEH N 10 0340792 IMAN HAFIZ BIN KHAIRUL ANUAR N 11 0342458 JOSHUA MARK NAIR N 12 0342720 KAVIN RAJ S/O PARANTHAMAN N 13 0341754 KIM KI MIN N 14 0341952 MAHOMED AQEEL AHMED HUSSEIN N 15 0341892 MOHAMMED AHNAF TAJWAR N 16 0342738 MUHAMMAD NAFEEZ BIN NASSER N 17 0341863 MUHAMMAD RAKIBUR RAHMAN JIM N 18 0342401 NG KEN LIN N 19 0341789 NOWREEN ZAMAN BHUIYAN N 20 0340077 QUA YU HANG N 21 0342906 RYAN THIAGARAJAH N 22 0342929 TAY JIA MING N 23 0341896 TI SHIN KIR N 24 0343056 WU DONG-YIU N 25 0343022 YEO ZHEN HAW N","title":"Session 2 (Group 1 - Wednesday 2:00pm - 4:00pm @ D7.14)"},{"location":"list_202008/#session-3-group-2-thursday-200pm-400pm-d714","text":"# Student ID Student Name Available 1 0343592 AMAL DANISH AZMAN N 2 0344286 BENJAMIN JESUDEAN DANIEL N 3 0342297 BRIAN LEE KAR ONN N 4 0344399 CHAI QI QIAN N 5 0344233 CHOO ZHENG N 6 0344051 HEW PUI EE N 7 0344653 IRFAN QURESHI BIN MOHAMAD ASLAM N 8 0344474 LAU JING EN N 9 0344250 LAU YUEN SHUEN N 10 0344010 LEOW HAN BIN N 11 0343750 LIAW WEI ZHEN N 12 0344054 MALCOLM TAN YU XUEN N 13 0344209 MATTHIAS NIVEN RAJ N 14 0344486 MUHAMMAD DANIEL BIN ZAKARIAH N 15 0343966 NG BOON BIN N 16 0343975 NIVETHITHA S. LOGANATHAN N 17 0344697 NORMAN HENG CHON SHENG N 18 0344435 PONG JING XUAN N 19 0344708 RACHEL GOH WEN XUEN N 20 0344011 SIN JUN YU N 21 0342767 SIN KIRK YI N 22 0344452 SURIA KUMAR S/O KARUPPANNAN N 23 0344008 TAJESWAR S/O RAMESH N 24 0343749 TAN JIA CHUN N 25 0343977 THEVENDREN S/O KUMARAN N 26 0344752 TAN JUN QI N 27 0342856 VALENTINE CHEPKORIR LANG'AT N 28 0344292 VETRI S/O THANABALAN N 29 0343067 YAP MING XUAN N","title":"Session 3 (Group 2 - Thursday 2:00pm - 4:00pm @ D7.14)"},{"location":"list_202104/","text":"Name List Per Session (2021 April) Session 1 (Group 2 - Thursday 2:00pm - 4:00pm @ D7.14) # Student ID Student Name Available 1 0346018 AISHATH JANAN AHMED N 2 0345290 ARUN S/O D. PARANTHAMAN N 3 0346131 DARSHEEN S/O SIVARAJ N 4 0345503 JARED TAN YI HOONG N 5 0338848 LIM JIA JIE N 6 0346605 LISHYEN SHISCHIR INDRAN N 7 0345403 LIVEKHA D/O GUNASEKAR N 8 0345276 NAVEESEN S/O RAVICHANDRAN N 9 0346456 ONG ZI QUAN N 10 0346299 RAPHAEL AUSTIN ADIPUTRA ONG N 11 0344981 SAMUEL POH JIA JIAN N 12 0346236 SHE YUAN N 13 0345120 SRI SHARVESH KUMAR S/O SIVA KUMAR N 14 0345681 SUKHVEER SINGH S/O MANJIT SINGH N 15 0345342 TAHRHUNRAJ S/O TEWARAJA N 16 0346379 TAN CHING CHUN N 17 0346663 TEH MING HENG N 18 0346123 TENGKU AIMAN HANAFI BIN TENGKU RASIDI N 19 0345379 VISHENDRA RAJASEGARAN N 20 0346539 WILLIAM CHAN WING HONG N 21 0345474 YUNUSNYYAZ MASHALOV N Session 2 (Group 1 - Thursday 4:00pm - 6:00pm @ D7.13) # Student ID Student Name Available 1 0346124 ARIF AZHAN BIN HAZLAN N 2 0345056 AZIEZAH BINTI SASBERI N 3 0346281 CHEN YI N 4 0345653 GARY ALBERT PARULIAN MANURUNG N 5 0345103 KHIEW HOE YEAN N 6 0344511 LAW YI KANG N 7 0345406 LIM YI MING N 8 0345483 NICHOLAS YONG WENG HONG N 9 0345628 PRABHDEEP SINGH N 10 0345732 PRIYAA KAMAL PATEL N 11 0346315 RATTANA MONPREEEYADEE N 12 0346747 TANG WAI KIN N 13 0346655 WAN YONG XIANG N 14 0346150 WANG LAI N 15 0346252 WEI LUMAN N 16 0345122 YEAP XIN WEI N 17 0345345 ZHANG RUIDUO N","title":"2021 April"},{"location":"list_202104/#name-list-per-session-2021-april","text":"","title":"Name List Per Session (2021 April)"},{"location":"list_202104/#session-1-group-2-thursday-200pm-400pm-d714","text":"# Student ID Student Name Available 1 0346018 AISHATH JANAN AHMED N 2 0345290 ARUN S/O D. PARANTHAMAN N 3 0346131 DARSHEEN S/O SIVARAJ N 4 0345503 JARED TAN YI HOONG N 5 0338848 LIM JIA JIE N 6 0346605 LISHYEN SHISCHIR INDRAN N 7 0345403 LIVEKHA D/O GUNASEKAR N 8 0345276 NAVEESEN S/O RAVICHANDRAN N 9 0346456 ONG ZI QUAN N 10 0346299 RAPHAEL AUSTIN ADIPUTRA ONG N 11 0344981 SAMUEL POH JIA JIAN N 12 0346236 SHE YUAN N 13 0345120 SRI SHARVESH KUMAR S/O SIVA KUMAR N 14 0345681 SUKHVEER SINGH S/O MANJIT SINGH N 15 0345342 TAHRHUNRAJ S/O TEWARAJA N 16 0346379 TAN CHING CHUN N 17 0346663 TEH MING HENG N 18 0346123 TENGKU AIMAN HANAFI BIN TENGKU RASIDI N 19 0345379 VISHENDRA RAJASEGARAN N 20 0346539 WILLIAM CHAN WING HONG N 21 0345474 YUNUSNYYAZ MASHALOV N","title":"Session 1 (Group 2 - Thursday 2:00pm - 4:00pm @ D7.14)"},{"location":"list_202104/#session-2-group-1-thursday-400pm-600pm-d713","text":"# Student ID Student Name Available 1 0346124 ARIF AZHAN BIN HAZLAN N 2 0345056 AZIEZAH BINTI SASBERI N 3 0346281 CHEN YI N 4 0345653 GARY ALBERT PARULIAN MANURUNG N 5 0345103 KHIEW HOE YEAN N 6 0344511 LAW YI KANG N 7 0345406 LIM YI MING N 8 0345483 NICHOLAS YONG WENG HONG N 9 0345628 PRABHDEEP SINGH N 10 0345732 PRIYAA KAMAL PATEL N 11 0346315 RATTANA MONPREEEYADEE N 12 0346747 TANG WAI KIN N 13 0346655 WAN YONG XIANG N 14 0346150 WANG LAI N 15 0346252 WEI LUMAN N 16 0345122 YEAP XIN WEI N 17 0345345 ZHANG RUIDUO N","title":"Session 2 (Group 1 - Thursday 4:00pm - 6:00pm @ D7.13)"},{"location":"list_202108/","text":"Name List Per Session (2021 August) Session 1 (Group 2 - Wednesday 10:00am - 12:00pm @ C8.01) # Student ID Student Name Available 1 0347796 ABDUL RAHMAN AWADH MASOUD N 2 0349216 ADAM ALEXEY ZILBER N 3 0347183 CHEA WEN JUN N 4 0347808 CHRISTOPHER LIUWELL N 5 0349082 DARREL FERDINAND PINGKARDI N 6 0347405 ENG EE SHEN N 7 0349239 ETHAN KOK HUAN SHING N 8 0347982 HRISHIKESHH S/O RAMARAU N 9 0347681 LEE PEI JUN N 10 0347372 MARWAN SHIHAB N 11 0348297 NG YI HUAN N 12 0347516 RAHIK IBNY AMAN N 13 0347532 SANIAT AHMED N 14 0348496 SAZID ISLAM N 15 0347254 TAN JUN LIANG N 16 0347408 TEH AIK JIN N 17 0331344 TIA'A FAANG DER N 18 0347931 TONG JIAN WEN N 19 0342077 WOO KAI SUAN N Session 2 (Group 1 - Wednesday 2:00pm - 4:00pm @ C7.07) # Student ID Student Name Available 1 0348651 AIRIEL AMSYAR BIN AHMAD BASRI N 2 0348725 AMAN MAHMUD BIN AMER MAHMUD N 3 0348360 CHEN CHIN MING N 4 0348251 DESHNI D/O ESWARAN N 5 0349138 EDRIC BOON CHIN HOW N 6 0347397 ELEASA BEH WEI SHEN N 7 0348189 ISAAC WONG KEN RHEE N 8 0348452 JOSHUA LING KOOI FENG N 9 0347204 KAVENESAN S/O CHANDRA KUMAR N 10 0347140 KAYANA RABBANI ELMAADI N 11 0348949 LIM YONG LEONG N 12 0342485 NATHANIEL ROSHAN N 13 0348828 RACHEL CHIT TZE EN N 14 0344321 RISHYAL RICHARD GOMEZ N 15 0347355 RIZKI QAMARI N 16 0348450 ROHEENDER SINGH SAHOTA N 17 0348570 SAI MUUGUNTHAN S/O RAVINDRAN N 18 0342518 SAILENDRAN NESAKUMAR N 19 0348537 WONG LI QI N 20 0347256 WONG PEI MING N 21 0348503 YONG HUI CHENG N 22 0348269 ZAIREEN ADEENA BINTI ZUHARMAN N","title":"2021 August"},{"location":"list_202108/#name-list-per-session-2021-august","text":"","title":"Name List Per Session (2021 August)"},{"location":"list_202108/#session-1-group-2-wednesday-1000am-1200pm-c801","text":"# Student ID Student Name Available 1 0347796 ABDUL RAHMAN AWADH MASOUD N 2 0349216 ADAM ALEXEY ZILBER N 3 0347183 CHEA WEN JUN N 4 0347808 CHRISTOPHER LIUWELL N 5 0349082 DARREL FERDINAND PINGKARDI N 6 0347405 ENG EE SHEN N 7 0349239 ETHAN KOK HUAN SHING N 8 0347982 HRISHIKESHH S/O RAMARAU N 9 0347681 LEE PEI JUN N 10 0347372 MARWAN SHIHAB N 11 0348297 NG YI HUAN N 12 0347516 RAHIK IBNY AMAN N 13 0347532 SANIAT AHMED N 14 0348496 SAZID ISLAM N 15 0347254 TAN JUN LIANG N 16 0347408 TEH AIK JIN N 17 0331344 TIA'A FAANG DER N 18 0347931 TONG JIAN WEN N 19 0342077 WOO KAI SUAN N","title":"Session 1 (Group 2 - Wednesday 10:00am - 12:00pm @ C8.01)"},{"location":"list_202108/#session-2-group-1-wednesday-200pm-400pm-c707","text":"# Student ID Student Name Available 1 0348651 AIRIEL AMSYAR BIN AHMAD BASRI N 2 0348725 AMAN MAHMUD BIN AMER MAHMUD N 3 0348360 CHEN CHIN MING N 4 0348251 DESHNI D/O ESWARAN N 5 0349138 EDRIC BOON CHIN HOW N 6 0347397 ELEASA BEH WEI SHEN N 7 0348189 ISAAC WONG KEN RHEE N 8 0348452 JOSHUA LING KOOI FENG N 9 0347204 KAVENESAN S/O CHANDRA KUMAR N 10 0347140 KAYANA RABBANI ELMAADI N 11 0348949 LIM YONG LEONG N 12 0342485 NATHANIEL ROSHAN N 13 0348828 RACHEL CHIT TZE EN N 14 0344321 RISHYAL RICHARD GOMEZ N 15 0347355 RIZKI QAMARI N 16 0348450 ROHEENDER SINGH SAHOTA N 17 0348570 SAI MUUGUNTHAN S/O RAVINDRAN N 18 0342518 SAILENDRAN NESAKUMAR N 19 0348537 WONG LI QI N 20 0347256 WONG PEI MING N 21 0348503 YONG HUI CHENG N 22 0348269 ZAIREEN ADEENA BINTI ZUHARMAN N","title":"Session 2 (Group 1 - Wednesday 2:00pm - 4:00pm @ C7.07)"},{"location":"list_202204/","text":"Name List Per Session (2022 April) Session 1 (Group 3 - Wednesday 2:00pm - 4:00pm @ D7.13) # Student ID Student Name Available 1 0350513 BRENDAN OOI TZE WEN N 2 0350975 EDMOND YONG TEK JIN N 3 0350641 ELIZABETH NGOH WUAN ZHIR N 4 0350599 EVAN CHOOI HENG KIN N 5 0350456 FASIHAH SHAHIRAH BINTI FARID AMINEE N 6 0350616 GARRICK KHOR REN SHERN N 7 0352369 HAARISH NAIR S/O MOHANA KRISHNAN N 8 0352057 HASSAN GOHAR N 9 0350356 HENG CLAUDIA N 10 0350325 HO JYE LUENG N 11 0350660 JEREMY LEE MING HENG N 12 0350408 JHANUSHA ISABELLE JEEVA N 13 0352074 KEE KAI BING N 14 0352118 LEE WEN JIN N 15 0352192 LEE ZHEN YING N 16 0350865 LIEW SIN KE N 17 0350508 LIM ZI JIAN N 18 0350352 LING TZY WEI N 19 0350774 LOOKESH N 20 0351099 LOW WENG QUAN N 21 0351545 MOHAMMAD DANIAL IKHWAN CHU N 22 0351501 MONTAKIM SIDDIQ N 23 0352580 MUHAMMAD SUHAIL BIN MUHAMMAD MALIK N 24 0352346 NAJIHAH BINTI SYAHRIZA N 25 0350860 NG SIN TING N 26 0350351 NICHOLAS CHAN WEI XIAN N 27 0349628 ONG SHI YUAN N 28 0350491 POOI CHEN YEE N 29 0351159 SANJIVRAJAH S/O MURALI N 30 0350836 THARSHAYAANI D/O SIVABALAN N 31 0350879 TONG HERN CHER N 32 0350505 WONG KIAN MING N 33 0351214 WONG WEI ZHE N Session 2 (Group 2 - Wednesday 4:00pm - 6:00pm @ D7.13) # Student ID Student Name Available 1 0348212 ANG JIA MIN N 2 0350436 ANOOP SINGH S/O HARMAHINDER SINGH N 3 0350736 BENJAMIN TAN WEI KEONG N 4 0352002 CHAU JIA YI N 5 0350937 CHEW YONG SHI N 6 0350336 CHOW SUET LING N 7 0350520 DARREL TAN WEI HOE N 8 0352157 GOH WAE-REN N 9 0350783 HADIF AZHAD BIN AHMAD IZAHAN N 10 0351689 HAKEEM IMRAN BIN OSMAN RAFIDI N 11 0352439 HARRY TIU SOON HWA N 12 0351544 ISKANDAR ZULQARNAIN BIN ZAHARI N 13 0352352 JASMINE MARTHA NOLIDIN N 14 0352400 JAY LIEOW YU JYE N 15 0352571 KEK HAN SHIN N 16 0350330 KUAN AI LENG N 17 0352311 LEE JIN ZHE N 18 0351664 LIM DING ZHEN N 19 0348535 LIU YUXI N 20 0350555 MUHAMMAD AFFIQ BIN MOHAMED ARIFF N 21 0352553 MUHAMMAD REZA ATALLA BIN SUHAIMY N 22 0350728 MUHAMMAD UKASYAH BIN MD YUSOF N 23 0351683 NADHRAHTUL IMAN BINTI KHAIRULMUZAMIL N 24 0352406 NG WUA JZIM N 25 0351625 SAN TZER YUEN N 26 0349834 SEE PUI SHYN N 27 0350623 SHARVHIN A/L MUNIANDY N 28 0350288 TAN JUN ROU N 29 0349848 WONG KAI LE N 30 0350934 WONG ZI QUAN N 31 0352246 YAP ZHE HIN N 32 0350444 YAP ZHEN HAO N Session 3 (Group 1 - Thursday 2:00pm - 4:00pm @ D7.14) # Student ID Student Name Available 1 0349654 BRIAN BONG NYIT CHUNG N 2 0352537 CHAN SHIN YEE N 3 0352345 CHAN ZE YAN N 4 0349671 CHEE WEI YANG N 5 0350213 CHEW XIN YAO N 6 0348176 CLEMENT YAP HENG WUI N 7 0349571 E HUI YUN N 8 0350205 EDWARD TWE TING YAU N 9 0348667 ESTHER ANN D/O PIO WILSON N 10 0349719 GAN MING FENG N 11 0351302 GAN WEI LEE N 12 0350186 HARRISHRAJ A/L RAJANDRAN N 13 0351160 HO JUN KIT N 14 0351058 INIVALAN MERIL V. KRISHNAN N 15 0350794 JASON JOHNY S/O ALAN JEFF GILBERT N 16 0343088 KENNETH YAP JING MIN N 17 0350377 KEYON KONG KHEE SUEN N 18 0352452 LEE EE THUNG N 19 0349753 LIM KUANG WENG N 20 0350581 LIM SHU SEAN N 21 0350251 MARCUS TAN CHI YAU N 22 0347372 MARWAN SHIHAB N 23 0351739 NAUFAL KHANA ALIFIAN N 24 0349679 NG ZEN YEN N 25 0349680 NICHOLAS TING XIANG ZHONG N 26 0351409 PENG WEI KEAT N 27 0350195 SARAVANAPRIYA D/O BALASUBRAMANIAM N 28 0351622 SEHRRENN S/O ARASU N 29 0348155 SHAUN LIAW SHEN YAU N 30 0352523 SIEW WEI KEN N 31 0349604 TEE YU QIE N 32 0348175 YAM KE LI N 33 0349637 YAP YI YANG N Session 4 (Group 4 - Thursday 4:00pm - 6:00pm @ D7.13) # Student ID Student Name Available 1 0351209 ADAM ROSHAN PILLAI S/O S KUMARA PILLAI N 2 0351083 AMRITA REDDY N 3 0349272 ATHIRAZULAIKA MUHAMMAD IQBAL YONG N 4 0352509 CHOI JOONSEO N 5 0350803 DEAN QHAIREL BIN SHAJARATUDDUR N 6 0350894 EE GEN SHENG N 7 0350769 LEE KAH FATT N 8 0351538 LIM CHAI SHUEN N 9 0352293 LOR JIA XIANG N 10 0351389 MATTHEW TAN WEI LOONG N 11 0352110 ROHAN THEKKETHALA SUNIL N 12 0350577 TAN JIA JIA N 13 0350855 TERRENCE LAU CHUN LAM N 14 0350634 WYNN YAP LIH ZHE N","title":"2022 April"},{"location":"list_202204/#name-list-per-session-2022-april","text":"","title":"Name List Per Session (2022 April)"},{"location":"list_202204/#session-1-group-3-wednesday-200pm-400pm-d713","text":"# Student ID Student Name Available 1 0350513 BRENDAN OOI TZE WEN N 2 0350975 EDMOND YONG TEK JIN N 3 0350641 ELIZABETH NGOH WUAN ZHIR N 4 0350599 EVAN CHOOI HENG KIN N 5 0350456 FASIHAH SHAHIRAH BINTI FARID AMINEE N 6 0350616 GARRICK KHOR REN SHERN N 7 0352369 HAARISH NAIR S/O MOHANA KRISHNAN N 8 0352057 HASSAN GOHAR N 9 0350356 HENG CLAUDIA N 10 0350325 HO JYE LUENG N 11 0350660 JEREMY LEE MING HENG N 12 0350408 JHANUSHA ISABELLE JEEVA N 13 0352074 KEE KAI BING N 14 0352118 LEE WEN JIN N 15 0352192 LEE ZHEN YING N 16 0350865 LIEW SIN KE N 17 0350508 LIM ZI JIAN N 18 0350352 LING TZY WEI N 19 0350774 LOOKESH N 20 0351099 LOW WENG QUAN N 21 0351545 MOHAMMAD DANIAL IKHWAN CHU N 22 0351501 MONTAKIM SIDDIQ N 23 0352580 MUHAMMAD SUHAIL BIN MUHAMMAD MALIK N 24 0352346 NAJIHAH BINTI SYAHRIZA N 25 0350860 NG SIN TING N 26 0350351 NICHOLAS CHAN WEI XIAN N 27 0349628 ONG SHI YUAN N 28 0350491 POOI CHEN YEE N 29 0351159 SANJIVRAJAH S/O MURALI N 30 0350836 THARSHAYAANI D/O SIVABALAN N 31 0350879 TONG HERN CHER N 32 0350505 WONG KIAN MING N 33 0351214 WONG WEI ZHE N","title":"Session 1 (Group 3 - Wednesday 2:00pm - 4:00pm @ D7.13)"},{"location":"list_202204/#session-2-group-2-wednesday-400pm-600pm-d713","text":"# Student ID Student Name Available 1 0348212 ANG JIA MIN N 2 0350436 ANOOP SINGH S/O HARMAHINDER SINGH N 3 0350736 BENJAMIN TAN WEI KEONG N 4 0352002 CHAU JIA YI N 5 0350937 CHEW YONG SHI N 6 0350336 CHOW SUET LING N 7 0350520 DARREL TAN WEI HOE N 8 0352157 GOH WAE-REN N 9 0350783 HADIF AZHAD BIN AHMAD IZAHAN N 10 0351689 HAKEEM IMRAN BIN OSMAN RAFIDI N 11 0352439 HARRY TIU SOON HWA N 12 0351544 ISKANDAR ZULQARNAIN BIN ZAHARI N 13 0352352 JASMINE MARTHA NOLIDIN N 14 0352400 JAY LIEOW YU JYE N 15 0352571 KEK HAN SHIN N 16 0350330 KUAN AI LENG N 17 0352311 LEE JIN ZHE N 18 0351664 LIM DING ZHEN N 19 0348535 LIU YUXI N 20 0350555 MUHAMMAD AFFIQ BIN MOHAMED ARIFF N 21 0352553 MUHAMMAD REZA ATALLA BIN SUHAIMY N 22 0350728 MUHAMMAD UKASYAH BIN MD YUSOF N 23 0351683 NADHRAHTUL IMAN BINTI KHAIRULMUZAMIL N 24 0352406 NG WUA JZIM N 25 0351625 SAN TZER YUEN N 26 0349834 SEE PUI SHYN N 27 0350623 SHARVHIN A/L MUNIANDY N 28 0350288 TAN JUN ROU N 29 0349848 WONG KAI LE N 30 0350934 WONG ZI QUAN N 31 0352246 YAP ZHE HIN N 32 0350444 YAP ZHEN HAO N","title":"Session 2 (Group 2 - Wednesday 4:00pm - 6:00pm @ D7.13)"},{"location":"list_202204/#session-3-group-1-thursday-200pm-400pm-d714","text":"# Student ID Student Name Available 1 0349654 BRIAN BONG NYIT CHUNG N 2 0352537 CHAN SHIN YEE N 3 0352345 CHAN ZE YAN N 4 0349671 CHEE WEI YANG N 5 0350213 CHEW XIN YAO N 6 0348176 CLEMENT YAP HENG WUI N 7 0349571 E HUI YUN N 8 0350205 EDWARD TWE TING YAU N 9 0348667 ESTHER ANN D/O PIO WILSON N 10 0349719 GAN MING FENG N 11 0351302 GAN WEI LEE N 12 0350186 HARRISHRAJ A/L RAJANDRAN N 13 0351160 HO JUN KIT N 14 0351058 INIVALAN MERIL V. KRISHNAN N 15 0350794 JASON JOHNY S/O ALAN JEFF GILBERT N 16 0343088 KENNETH YAP JING MIN N 17 0350377 KEYON KONG KHEE SUEN N 18 0352452 LEE EE THUNG N 19 0349753 LIM KUANG WENG N 20 0350581 LIM SHU SEAN N 21 0350251 MARCUS TAN CHI YAU N 22 0347372 MARWAN SHIHAB N 23 0351739 NAUFAL KHANA ALIFIAN N 24 0349679 NG ZEN YEN N 25 0349680 NICHOLAS TING XIANG ZHONG N 26 0351409 PENG WEI KEAT N 27 0350195 SARAVANAPRIYA D/O BALASUBRAMANIAM N 28 0351622 SEHRRENN S/O ARASU N 29 0348155 SHAUN LIAW SHEN YAU N 30 0352523 SIEW WEI KEN N 31 0349604 TEE YU QIE N 32 0348175 YAM KE LI N 33 0349637 YAP YI YANG N","title":"Session 3 (Group 1 - Thursday 2:00pm - 4:00pm @ D7.14)"},{"location":"list_202204/#session-4-group-4-thursday-400pm-600pm-d713","text":"# Student ID Student Name Available 1 0351209 ADAM ROSHAN PILLAI S/O S KUMARA PILLAI N 2 0351083 AMRITA REDDY N 3 0349272 ATHIRAZULAIKA MUHAMMAD IQBAL YONG N 4 0352509 CHOI JOONSEO N 5 0350803 DEAN QHAIREL BIN SHAJARATUDDUR N 6 0350894 EE GEN SHENG N 7 0350769 LEE KAH FATT N 8 0351538 LIM CHAI SHUEN N 9 0352293 LOR JIA XIANG N 10 0351389 MATTHEW TAN WEI LOONG N 11 0352110 ROHAN THEKKETHALA SUNIL N 12 0350577 TAN JIA JIA N 13 0350855 TERRENCE LAU CHUN LAM N 14 0350634 WYNN YAP LIH ZHE N","title":"Session 4 (Group 4 - Thursday 4:00pm - 6:00pm @ D7.13)"},{"location":"list_202208/","text":"Name List Per Session (2022 August) Session 1 (Group 2 - Tuesday 8:00am - 10:00am @ C7.01) # Student ID Student Name Available 1 0353941 ADRUCE BIN KHAIRUDIN N 2 0355364 AUSTIN YEE MENG JUN N 3 0354164 BRYAN ALEXANDER JINU N 4 0354280 CHEN YIK N 5 0354069 CHOW SOON WENG N 6 0354672 DANIEL LAW ZHUO BIAO N 7 0353260 DINESH S/O K DEVAENDRAN N 8 0353769 EUGENE CHONG JIE SHAN N 9 0353927 ILHAAM ARIFF BIN AKMAL BAQI N 10 0353871 JEFFREY CHIN CHERN NAM N 11 0355995 JERREN LIM HE MING N 12 0355950 KISHANVEER SINGH S/O GURDIAL SINGH N 13 0353594 LIU TANGJUN N 14 0355744 MAHDI SALAH M. AL-ALI Y 15 0355219 MARWAN ABDULATIF ABDULHAKIM AHMED N 16 0355129 MD REZWAN ISLAM RATUL N 17 0355787 MUHAMMAD HARIS FIRDAUS BIN ZAINOL MAHARIQ N 18 0354612 NIXON FONG LI SHEN N 19 0354855 PARVIN SYAM S/O MANI ARASU N 20 0353656 PHOON YE KANG N 21 0355650 RAYAT MORSHED N 22 0355808 SHIMADA RYUNOSUKE N 23 0354740 SO CHENG KAI N 24 0354924 TAN YANG YI N 25 0355546 TONG JING NING N 26 0353598 URBANA ISLAM TUBA N 27 0355688 VENESSA LEE CHIA YEE N Session 2 (Group 3 - Tuesday 10:00am - 12:00pm @ D7.14) # Student ID Student Name Available 1 0352987 ABDELRAHMAN ADEL ABDELFATTAH MOHAMED IBRAHIM N 2 0351209 ADAM ROSHAN PILLAI S/O S KUMARA PILLAI N 3 0353080 ASFA HAIKAL BIN ASRUL HAZLI N 4 0355081 AUNG KO KHANT N 5 0354872 CEDRIC CHONG DE HAO N 6 0352509 CHOI JOONSEO Y 7 0354007 ETHAN LIAM POON YI N 8 0352896 LIM KEAN YEE N 9 0355501 LOW KAI AN N 10 0355445 NAVIN SAMANTHAM N 11 0354417 NAZIFA TASNIM AL ZAHID N 12 0352928 NG JEE KIN N 13 0355962 NICOLE CHAN WEN WEI N 14 0355084 NYI MIN KHANT N 15 0354125 SEE THOO JUN LOK N 16 0353280 SHAILENDRA PARANTHAMAN Y 17 0345458 SULEIMENOV TEMIRLAN N 18 0355883 TANG YI ZUN N 19 0355083 THANT ZIN NYEIN N 20 0354236 WADTHANAK KHONGSUWAN N 21 0354213 YAP WAI HON N Session 3 (Group 1 - Wednesday 2:00pm - 4:00pm @ D7.13) # Student ID Student Name Available 1 0353976 ALMERO JOZELLE REBECCA N 2 0353900 ALVIN CHIA WEI LER N 3 0354091 DAHIYAN-UZ ZAMAN N 4 0354172 DYLAN LAI JUN HON N 5 0354662 HONG WEI SHEN N 6 0353165 ISAAC LEE JO MIN N 7 0353423 JASON CHIN YU XUAN N 8 0352882 JORJA TAN YI EN N 9 0352931 KONG XIAN WEI N 10 0353143 KUEK SEEN KEAT N 11 0353187 LAU WEN KANG N 12 0354685 LAY KAH SENG N 13 0354126 LEE KAH HIN N 14 0353745 LI WENHAO N 15 0352925 LIM CHEN FOONG N 16 0354508 LIM MAXIMUS N 17 0353292 LIM TAO MING N 18 0355791 MUHAMAD HAZIQ BIN JASNI N 19 0351315 MUHAMMAD FIRDAUS SYAHIR BIN MOHAMED FAIZAL N 20 0353942 NG QI HONG N 21 0354237 NG YU SEN N 22 0355028 OSCAR WONG YU JUN N 23 0355832 PANG RUI HENG N 24 0353560 SHYANNE CHUA SUE ERN N 25 0353411 SIN VEE YOUNG N 26 0353127 SURRYARAJ S/O POOBALAN N 27 0353116 YAP WENN XUAN N 28 0354447 YEO KHAINING N 29 0353306 YEOH WEN ZHUAN N","title":"2022 August"},{"location":"list_202208/#name-list-per-session-2022-august","text":"","title":"Name List Per Session (2022 August)"},{"location":"list_202208/#session-1-group-2-tuesday-800am-1000am-c701","text":"# Student ID Student Name Available 1 0353941 ADRUCE BIN KHAIRUDIN N 2 0355364 AUSTIN YEE MENG JUN N 3 0354164 BRYAN ALEXANDER JINU N 4 0354280 CHEN YIK N 5 0354069 CHOW SOON WENG N 6 0354672 DANIEL LAW ZHUO BIAO N 7 0353260 DINESH S/O K DEVAENDRAN N 8 0353769 EUGENE CHONG JIE SHAN N 9 0353927 ILHAAM ARIFF BIN AKMAL BAQI N 10 0353871 JEFFREY CHIN CHERN NAM N 11 0355995 JERREN LIM HE MING N 12 0355950 KISHANVEER SINGH S/O GURDIAL SINGH N 13 0353594 LIU TANGJUN N 14 0355744 MAHDI SALAH M. AL-ALI Y 15 0355219 MARWAN ABDULATIF ABDULHAKIM AHMED N 16 0355129 MD REZWAN ISLAM RATUL N 17 0355787 MUHAMMAD HARIS FIRDAUS BIN ZAINOL MAHARIQ N 18 0354612 NIXON FONG LI SHEN N 19 0354855 PARVIN SYAM S/O MANI ARASU N 20 0353656 PHOON YE KANG N 21 0355650 RAYAT MORSHED N 22 0355808 SHIMADA RYUNOSUKE N 23 0354740 SO CHENG KAI N 24 0354924 TAN YANG YI N 25 0355546 TONG JING NING N 26 0353598 URBANA ISLAM TUBA N 27 0355688 VENESSA LEE CHIA YEE N","title":"Session 1 (Group 2 - Tuesday 8:00am - 10:00am @ C7.01)"},{"location":"list_202208/#session-2-group-3-tuesday-1000am-1200pm-d714","text":"# Student ID Student Name Available 1 0352987 ABDELRAHMAN ADEL ABDELFATTAH MOHAMED IBRAHIM N 2 0351209 ADAM ROSHAN PILLAI S/O S KUMARA PILLAI N 3 0353080 ASFA HAIKAL BIN ASRUL HAZLI N 4 0355081 AUNG KO KHANT N 5 0354872 CEDRIC CHONG DE HAO N 6 0352509 CHOI JOONSEO Y 7 0354007 ETHAN LIAM POON YI N 8 0352896 LIM KEAN YEE N 9 0355501 LOW KAI AN N 10 0355445 NAVIN SAMANTHAM N 11 0354417 NAZIFA TASNIM AL ZAHID N 12 0352928 NG JEE KIN N 13 0355962 NICOLE CHAN WEN WEI N 14 0355084 NYI MIN KHANT N 15 0354125 SEE THOO JUN LOK N 16 0353280 SHAILENDRA PARANTHAMAN Y 17 0345458 SULEIMENOV TEMIRLAN N 18 0355883 TANG YI ZUN N 19 0355083 THANT ZIN NYEIN N 20 0354236 WADTHANAK KHONGSUWAN N 21 0354213 YAP WAI HON N","title":"Session 2 (Group 3 - Tuesday 10:00am - 12:00pm @ D7.14)"},{"location":"list_202208/#session-3-group-1-wednesday-200pm-400pm-d713","text":"# Student ID Student Name Available 1 0353976 ALMERO JOZELLE REBECCA N 2 0353900 ALVIN CHIA WEI LER N 3 0354091 DAHIYAN-UZ ZAMAN N 4 0354172 DYLAN LAI JUN HON N 5 0354662 HONG WEI SHEN N 6 0353165 ISAAC LEE JO MIN N 7 0353423 JASON CHIN YU XUAN N 8 0352882 JORJA TAN YI EN N 9 0352931 KONG XIAN WEI N 10 0353143 KUEK SEEN KEAT N 11 0353187 LAU WEN KANG N 12 0354685 LAY KAH SENG N 13 0354126 LEE KAH HIN N 14 0353745 LI WENHAO N 15 0352925 LIM CHEN FOONG N 16 0354508 LIM MAXIMUS N 17 0353292 LIM TAO MING N 18 0355791 MUHAMAD HAZIQ BIN JASNI N 19 0351315 MUHAMMAD FIRDAUS SYAHIR BIN MOHAMED FAIZAL N 20 0353942 NG QI HONG N 21 0354237 NG YU SEN N 22 0355028 OSCAR WONG YU JUN N 23 0355832 PANG RUI HENG N 24 0353560 SHYANNE CHUA SUE ERN N 25 0353411 SIN VEE YOUNG N 26 0353127 SURRYARAJ S/O POOBALAN N 27 0353116 YAP WENN XUAN N 28 0354447 YEO KHAINING N 29 0353306 YEOH WEN ZHUAN N","title":"Session 3 (Group 1 - Wednesday 2:00pm - 4:00pm @ D7.13)"},{"location":"archive/202008/asgn3_202008_1/","text":"Assignment 3 Groupings (August 2020 Semester) - Session 1 Groupings are for Session 1 (Wednesday 2:00pm - 4:00pm). All group listings are final. Group 1 # Student ID Member Name 1 0342458 JOSHUA MARK NAIR (Group Leader) 2 0342504 M M YASIN BIN SHAFIQ 3 0342929 TAY JIA MING 4 0343056 WU DONG-YIU Group 2 # Student ID Member Name 1 0342776 HUMERA SALEH (Group Leader) 2 0341863 MUHAMMAD RAKIBUR RAHMAN JIM 3 0341789 NOWREEN ZAMAN BHUIYAN 4 0342767 SIN KIRK YI Group 3 # Student ID Member Name 1 0341886 DYLAN TAN CHING ZHE (Group Leader) 2 0343024 DINESH PANIKKER S/O SIVADASAN 3 0342720 KAVIN RAJ S/O PARANTHAMAN Group 4 # Student ID Member Name 1 0341928 CHEAH BING XIAN (Group Leader) 2 0324674 BRYAN TAN YEE KHAI 3 0342401 NG KEN LIN 4 0342906 RYAN THIAGARAJAH Group 5 # Student ID Member Name 1 0341754 KIM KI MIN (Group Leader) 2 0340772 HO JIE MING AARON 3 0340077 QUA YU HANG 4 0343022 YEO ZHEN HAW Group 6 # Student ID Member Name 1 0341892 MOHAMMED AHNAF TAJWAR (Group Leader) 2 0341932 ABDUL LATIF MOHAMED IRFAN FAZLANI 3 0341952 MAHOMED AQEEL AHMED HUSSEIN 4 0341896 TI SHIN KIR Group 7 # Student ID Member Name 1 0341884 CHELSEA LIAWANDY (Group Leader) 2 0342907 AMIR HAZIQ B OTHMAN 3 0340792 IMAN HAFIZ B KHAIRUL ANUAR 4 0342738 MUHAMMAD NAFEEZ B NASSER","title":"Session 1"},{"location":"archive/202008/asgn3_202008_1/#assignment-3-groupings-august-2020-semester-session-1","text":"Groupings are for Session 1 (Wednesday 2:00pm - 4:00pm). All group listings are final.","title":"Assignment 3 Groupings (August 2020 Semester) - Session 1"},{"location":"archive/202008/asgn3_202008_1/#group-1","text":"# Student ID Member Name 1 0342458 JOSHUA MARK NAIR (Group Leader) 2 0342504 M M YASIN BIN SHAFIQ 3 0342929 TAY JIA MING 4 0343056 WU DONG-YIU","title":"Group 1"},{"location":"archive/202008/asgn3_202008_1/#group-2","text":"# Student ID Member Name 1 0342776 HUMERA SALEH (Group Leader) 2 0341863 MUHAMMAD RAKIBUR RAHMAN JIM 3 0341789 NOWREEN ZAMAN BHUIYAN 4 0342767 SIN KIRK YI","title":"Group 2"},{"location":"archive/202008/asgn3_202008_1/#group-3","text":"# Student ID Member Name 1 0341886 DYLAN TAN CHING ZHE (Group Leader) 2 0343024 DINESH PANIKKER S/O SIVADASAN 3 0342720 KAVIN RAJ S/O PARANTHAMAN","title":"Group 3"},{"location":"archive/202008/asgn3_202008_1/#group-4","text":"# Student ID Member Name 1 0341928 CHEAH BING XIAN (Group Leader) 2 0324674 BRYAN TAN YEE KHAI 3 0342401 NG KEN LIN 4 0342906 RYAN THIAGARAJAH","title":"Group 4"},{"location":"archive/202008/asgn3_202008_1/#group-5","text":"# Student ID Member Name 1 0341754 KIM KI MIN (Group Leader) 2 0340772 HO JIE MING AARON 3 0340077 QUA YU HANG 4 0343022 YEO ZHEN HAW","title":"Group 5"},{"location":"archive/202008/asgn3_202008_1/#group-6","text":"# Student ID Member Name 1 0341892 MOHAMMED AHNAF TAJWAR (Group Leader) 2 0341932 ABDUL LATIF MOHAMED IRFAN FAZLANI 3 0341952 MAHOMED AQEEL AHMED HUSSEIN 4 0341896 TI SHIN KIR","title":"Group 6"},{"location":"archive/202008/asgn3_202008_1/#group-7","text":"# Student ID Member Name 1 0341884 CHELSEA LIAWANDY (Group Leader) 2 0342907 AMIR HAZIQ B OTHMAN 3 0340792 IMAN HAFIZ B KHAIRUL ANUAR 4 0342738 MUHAMMAD NAFEEZ B NASSER","title":"Group 7"},{"location":"archive/202008/asgn3_202008_2/","text":"Assignment 3 Groupings (August 2020 Semester) - Session 2 Groupings are for Session 2 (Thursday 2:00pm - 4:00pm). All group listings are final. Group 1 # Student ID Member Name 1 0344010 LEOW HAN BIN (Group Leader) 2 0343592 AMAL DANISH AZMAN 3 0342297 BRIAN LEE KAR ONN 4 0344752 TAN JUN QI Group 2 # Student ID Member Name 1 0344653 IRFAN QURESHI B MOHAMAD ASLAM (Group Leader) 2 0344209 MATTHIAS NIVEN RAJ 3 0344008 TAJESWAR S/O RAMESH 4 0343977 THEVENDREN S/O KUMARAN Group 3 # Student ID Member Name 1 0344011 SIN JUN YU (Group Leader) 2 0343975 NIVETHITHA S. LOGANATHAN 3 0344697 NORMAN HENG CHON SHENG 4 0344452 SURIA KUMAR S/O KARUPPANNAN Group 4 # Student ID Member Name 1 0344233 CHOO ZHENG (Group Leader) 2 0344399 CHAI QI QIAN 3 0344250 LAU YUEN SHUEN 4 0343750 LIAW WEI ZHEN Group 5 # Student ID Member Name 1 0343749 TAN JIA CHUN (Group Leader) 2 0344486 MUHAMMAD DANIEL BIN ZAKARIAH 3 0342856 VALENTINE CHEPKORIR LANG'AT 4 0344292 VETRI S/O THANABALAN Group 6 # Student ID Member Name 1 0344474 LAU JING EN (Group Leader) 2 0344286 BENJAMIN JESUDEAN DANIEL 3 0344051 HEW PUI EE 4 0344708 RACHEL GOH WEN XUEN Group 7 # Student ID Member Name 1 0344054 MALCOLM TAN YU XUEN (Group Leader) 2 0343966 NG BOON BIN 3 0344435 PONG JING XUAN 4 0343067 YAP MING XUAN","title":"Session 2"},{"location":"archive/202008/asgn3_202008_2/#assignment-3-groupings-august-2020-semester-session-2","text":"Groupings are for Session 2 (Thursday 2:00pm - 4:00pm). All group listings are final.","title":"Assignment 3 Groupings (August 2020 Semester) - Session 2"},{"location":"archive/202008/asgn3_202008_2/#group-1","text":"# Student ID Member Name 1 0344010 LEOW HAN BIN (Group Leader) 2 0343592 AMAL DANISH AZMAN 3 0342297 BRIAN LEE KAR ONN 4 0344752 TAN JUN QI","title":"Group 1"},{"location":"archive/202008/asgn3_202008_2/#group-2","text":"# Student ID Member Name 1 0344653 IRFAN QURESHI B MOHAMAD ASLAM (Group Leader) 2 0344209 MATTHIAS NIVEN RAJ 3 0344008 TAJESWAR S/O RAMESH 4 0343977 THEVENDREN S/O KUMARAN","title":"Group 2"},{"location":"archive/202008/asgn3_202008_2/#group-3","text":"# Student ID Member Name 1 0344011 SIN JUN YU (Group Leader) 2 0343975 NIVETHITHA S. LOGANATHAN 3 0344697 NORMAN HENG CHON SHENG 4 0344452 SURIA KUMAR S/O KARUPPANNAN","title":"Group 3"},{"location":"archive/202008/asgn3_202008_2/#group-4","text":"# Student ID Member Name 1 0344233 CHOO ZHENG (Group Leader) 2 0344399 CHAI QI QIAN 3 0344250 LAU YUEN SHUEN 4 0343750 LIAW WEI ZHEN","title":"Group 4"},{"location":"archive/202008/asgn3_202008_2/#group-5","text":"# Student ID Member Name 1 0343749 TAN JIA CHUN (Group Leader) 2 0344486 MUHAMMAD DANIEL BIN ZAKARIAH 3 0342856 VALENTINE CHEPKORIR LANG'AT 4 0344292 VETRI S/O THANABALAN","title":"Group 5"},{"location":"archive/202008/asgn3_202008_2/#group-6","text":"# Student ID Member Name 1 0344474 LAU JING EN (Group Leader) 2 0344286 BENJAMIN JESUDEAN DANIEL 3 0344051 HEW PUI EE 4 0344708 RACHEL GOH WEN XUEN","title":"Group 6"},{"location":"archive/202008/asgn3_202008_2/#group-7","text":"# Student ID Member Name 1 0344054 MALCOLM TAN YU XUEN (Group Leader) 2 0343966 NG BOON BIN 3 0344435 PONG JING XUAN 4 0343067 YAP MING XUAN","title":"Group 7"},{"location":"archive/202008/asgn3_202008_3/","text":"Assignment 3 Groupings (August 2020 Semester) - Session 3 Groupings are for Session 3 (Wednesday 10:00am - 12:00pm). All group listings are final. Group 1 # Student ID Member Name 1 0343254 HENG CHLOE (Group Leader) 2 0342363 TAN KATHY 3 0342508 TANG YI FONG 4 0343089 TENG KWOK SANG 5 0342360 WONG CHEE WAI Group 2 # Student ID Member Name 1 0342536 LIM YUK YING (Group Leader) 2 0343915 BRENDA NG ZHI YI 3 0343155 KONG LI WEI 4 0342855 WHOONG ZI WEI Group 3 # Student ID Member Name 1 0343138 HAZEEM B ASMIE (Group Leader) 2 0343501 HARRISH SUTHARSHAN 3 0342634 JEFFREY CHEOK JUN WAH 4 0342638 OOI ZONG YUAN Group 4 # Student ID Member Name 1 0342065 ONG SHI HOONG (Group Leader) 2 0343965 CLIFF CHONG ZHENG-EU 3 0342453 DANIEL HO KWOK PIN 4 0343509 LOO ZEN HEI, DEXEL 5 0342821 PRAVEEN RAJENDRAN Group 5 # Student ID Member Name 1 0343119 JESSLYN LAW HEW YAN (Group Leader) 2 0343706 GOH SHEE XUAN 3 0344573 MUHAMMAD ZIDAN B HAIROLLAH 4 0343074 SYED AMIEL MATEEN B SYED ADRIN PUTRA Group 6 # Student ID Member Name 1 0342286 NADHILA NAJWA BT SHAROLNIZAM (Group Leader) 2 0342601 EDMUND GOH SEH BENG 3 0343084 MUHAMMAD AMIRUL FIKRI B ABDUL HAFIZ 4 0344734 NATHANIEL TAY XIN RONG Group 7 # Student ID Member Name 1 0342578 HO SOOK KEI (Group Leader) 2 0343161 ARIANA NGAI SU WEI 3 0344240 DAIYAN HAZEEQ B MOHAMED YAZMAN 4 0342506 LEE EE LING Group 8 # Student ID Member Name 1 0344251 CHEN XIAN NING (Group Leader) 2 0342302 ANG WEI JIA 3 0342347 GAM CHEE XUAN 4 0342730 ROSHANTH S/O JEYARAJ","title":"Session 3"},{"location":"archive/202008/asgn3_202008_3/#assignment-3-groupings-august-2020-semester-session-3","text":"Groupings are for Session 3 (Wednesday 10:00am - 12:00pm). All group listings are final.","title":"Assignment 3 Groupings (August 2020 Semester) - Session 3"},{"location":"archive/202008/asgn3_202008_3/#group-1","text":"# Student ID Member Name 1 0343254 HENG CHLOE (Group Leader) 2 0342363 TAN KATHY 3 0342508 TANG YI FONG 4 0343089 TENG KWOK SANG 5 0342360 WONG CHEE WAI","title":"Group 1"},{"location":"archive/202008/asgn3_202008_3/#group-2","text":"# Student ID Member Name 1 0342536 LIM YUK YING (Group Leader) 2 0343915 BRENDA NG ZHI YI 3 0343155 KONG LI WEI 4 0342855 WHOONG ZI WEI","title":"Group 2"},{"location":"archive/202008/asgn3_202008_3/#group-3","text":"# Student ID Member Name 1 0343138 HAZEEM B ASMIE (Group Leader) 2 0343501 HARRISH SUTHARSHAN 3 0342634 JEFFREY CHEOK JUN WAH 4 0342638 OOI ZONG YUAN","title":"Group 3"},{"location":"archive/202008/asgn3_202008_3/#group-4","text":"# Student ID Member Name 1 0342065 ONG SHI HOONG (Group Leader) 2 0343965 CLIFF CHONG ZHENG-EU 3 0342453 DANIEL HO KWOK PIN 4 0343509 LOO ZEN HEI, DEXEL 5 0342821 PRAVEEN RAJENDRAN","title":"Group 4"},{"location":"archive/202008/asgn3_202008_3/#group-5","text":"# Student ID Member Name 1 0343119 JESSLYN LAW HEW YAN (Group Leader) 2 0343706 GOH SHEE XUAN 3 0344573 MUHAMMAD ZIDAN B HAIROLLAH 4 0343074 SYED AMIEL MATEEN B SYED ADRIN PUTRA","title":"Group 5"},{"location":"archive/202008/asgn3_202008_3/#group-6","text":"# Student ID Member Name 1 0342286 NADHILA NAJWA BT SHAROLNIZAM (Group Leader) 2 0342601 EDMUND GOH SEH BENG 3 0343084 MUHAMMAD AMIRUL FIKRI B ABDUL HAFIZ 4 0344734 NATHANIEL TAY XIN RONG","title":"Group 6"},{"location":"archive/202008/asgn3_202008_3/#group-7","text":"# Student ID Member Name 1 0342578 HO SOOK KEI (Group Leader) 2 0343161 ARIANA NGAI SU WEI 3 0344240 DAIYAN HAZEEQ B MOHAMED YAZMAN 4 0342506 LEE EE LING","title":"Group 7"},{"location":"archive/202008/asgn3_202008_3/#group-8","text":"# Student ID Member Name 1 0344251 CHEN XIAN NING (Group Leader) 2 0342302 ANG WEI JIA 3 0342347 GAM CHEE XUAN 4 0342730 ROSHANTH S/O JEYARAJ","title":"Group 8"},{"location":"archive/202104/asgn3_202104/","text":"Assignment 3 Groupings (April 2021 Semester) All group listings are final. Session 1: Thursday, 4:00pm-6:00pm Session 2: Thursday, 2:00pm-4:00pm Group 1 # Student ID Member Name Session 1 0345122 YEAP XIN WEI (Group Leader) 1 2 0345483 NICHOLAS YONG WENG HONG 1 3 0346299 RAPHAEL AUSTIN ADIPUTRA ONG 2 4 0346379 TAN CHING CHUN 2 5 0346252 WEI LUMAN 1 Group 2 # Student ID Member Name Session 1 0346018 AISHATH JANAN AHMED (Group Leader) 2 2 0344511 LAW YI KANG 1 3 0346605 LISHYEN SHISCHIR INDRAN 2 4 0346315 RATTANA MONPREEYADEE 1 5 0345345 ZHANG RUIDUO 1 Group 3 # Student ID Member Name Session 1 0338848 LIM JIA JIE (Group Leader) 2 2 0345107 KHIEW HOE YEAN 1 3 0344981 SAMUEL POH JIA JIAN 2 4 0346539 WILLIAM CHAN WING HONG 2 Group 4 # Student ID Member Name Session 1 0346281 CHEN YI (Group Leader) 1 2 0346236 SHE YUAN 2 3 0346747 TANG WAI KIN 1 4 0346150 WANG LAI 1 Group 5 # Student ID Member Name Session 1 0345503 JARED TAN YI HOONG (Group Leader) 2 2 0345406 LIM YI MING 1 3 0345403 LIVEKHA D/O GUNASEKAR 2 4 0346663 TEH MING HENG 2 Group 6 # Student ID Member Name Session 1 0346124 ARIF AZHAN B HAZLAN (Group Leader) 1 2 0346131 DARSHEEN S/O SIVARAJ 2 3 0346456 ONG ZI QUAN 2 4 0346123 TENGKU AIMAN HANAFI B TENGKU RASIDI 2 Group 7 # Student ID Member Name Session 1 0345653 GARY ALBERT PAUL MANURUNG (Group Leader) 1 2 0345681 SUKHVEER SINGH S/O MANJIT SINGH 2 3 0345342 TAHRHUNRAJ S/O TEWARAJA 2 4 0345474 YUNUSNYYAZ MASHALOV 2 Group 8 # Student ID Member Name Session 1 0345120 SRI SHARVESH S/O SIVA KUMAR (Group Leader) 2 2 0345290 ARUN S/O D. PARANTHAMAN 2 3 0345276 NAVEESEN S/O RAVICHANDRAN 2 4 0345379 VISHENDRAA RAJASEGARAN 2 Group 9 # Student ID Member Name Session 1 0345056 AZIEZAH BT SASBERI (Group Leader) 1 2 0345628 PRABHDEEP SINGH 1 3 0345372 PRIYAA KAMAL PATEL 1 4 0346655 WAN YONG XIANG 1","title":"Assignment 3 Groups [04/2021]"},{"location":"archive/202104/asgn3_202104/#assignment-3-groupings-april-2021-semester","text":"All group listings are final. Session 1: Thursday, 4:00pm-6:00pm Session 2: Thursday, 2:00pm-4:00pm","title":"Assignment 3 Groupings (April 2021 Semester)"},{"location":"archive/202104/asgn3_202104/#group-1","text":"# Student ID Member Name Session 1 0345122 YEAP XIN WEI (Group Leader) 1 2 0345483 NICHOLAS YONG WENG HONG 1 3 0346299 RAPHAEL AUSTIN ADIPUTRA ONG 2 4 0346379 TAN CHING CHUN 2 5 0346252 WEI LUMAN 1","title":"Group 1"},{"location":"archive/202104/asgn3_202104/#group-2","text":"# Student ID Member Name Session 1 0346018 AISHATH JANAN AHMED (Group Leader) 2 2 0344511 LAW YI KANG 1 3 0346605 LISHYEN SHISCHIR INDRAN 2 4 0346315 RATTANA MONPREEYADEE 1 5 0345345 ZHANG RUIDUO 1","title":"Group 2"},{"location":"archive/202104/asgn3_202104/#group-3","text":"# Student ID Member Name Session 1 0338848 LIM JIA JIE (Group Leader) 2 2 0345107 KHIEW HOE YEAN 1 3 0344981 SAMUEL POH JIA JIAN 2 4 0346539 WILLIAM CHAN WING HONG 2","title":"Group 3"},{"location":"archive/202104/asgn3_202104/#group-4","text":"# Student ID Member Name Session 1 0346281 CHEN YI (Group Leader) 1 2 0346236 SHE YUAN 2 3 0346747 TANG WAI KIN 1 4 0346150 WANG LAI 1","title":"Group 4"},{"location":"archive/202104/asgn3_202104/#group-5","text":"# Student ID Member Name Session 1 0345503 JARED TAN YI HOONG (Group Leader) 2 2 0345406 LIM YI MING 1 3 0345403 LIVEKHA D/O GUNASEKAR 2 4 0346663 TEH MING HENG 2","title":"Group 5"},{"location":"archive/202104/asgn3_202104/#group-6","text":"# Student ID Member Name Session 1 0346124 ARIF AZHAN B HAZLAN (Group Leader) 1 2 0346131 DARSHEEN S/O SIVARAJ 2 3 0346456 ONG ZI QUAN 2 4 0346123 TENGKU AIMAN HANAFI B TENGKU RASIDI 2","title":"Group 6"},{"location":"archive/202104/asgn3_202104/#group-7","text":"# Student ID Member Name Session 1 0345653 GARY ALBERT PAUL MANURUNG (Group Leader) 1 2 0345681 SUKHVEER SINGH S/O MANJIT SINGH 2 3 0345342 TAHRHUNRAJ S/O TEWARAJA 2 4 0345474 YUNUSNYYAZ MASHALOV 2","title":"Group 7"},{"location":"archive/202104/asgn3_202104/#group-8","text":"# Student ID Member Name Session 1 0345120 SRI SHARVESH S/O SIVA KUMAR (Group Leader) 2 2 0345290 ARUN S/O D. PARANTHAMAN 2 3 0345276 NAVEESEN S/O RAVICHANDRAN 2 4 0345379 VISHENDRAA RAJASEGARAN 2","title":"Group 8"},{"location":"archive/202104/asgn3_202104/#group-9","text":"# Student ID Member Name Session 1 0345056 AZIEZAH BT SASBERI (Group Leader) 1 2 0345628 PRABHDEEP SINGH 1 3 0345372 PRIYAA KAMAL PATEL 1 4 0346655 WAN YONG XIANG 1","title":"Group 9"},{"location":"archive/202108/","text":"ITS30605 Web Programming This site hosts the practical lab work for ITS30605: Web Programming, offered by the School of Pre-University Studies at Taylor's College. Aim The aim of these practical lab exercises is to guide students in mastering the fundamentals behind web development to develop visually appealing websites or applications. Schedule (August 2021 Semester) The schedule is subject to change. Week Lecture Practical Lab 1 23 Aug - 27 Aug Introduction to Web Programming Practical Preparation 2 30 Aug - 3 Sept HTML Part 1 Practical 1 3 6 Sept - 10 Sept HTML Part 2 Practical 2 4 13 Sept - 17 Sept HTML Part 3 Practical 3 5 20 Sept - 24 Sept JavaScript Part 1 Practical 4 6 27 Sept - 1 Oct JavaScript Part 2 Practical 5 7 4 Oct - 8 Oct JavaScript Part 3 Practical 6 8 11 Oct - 15 Oct Introduction to PHP and LAMP PHP Part 1 Practical Test 1 Practical 7 Practical 8 9 18 Oct - 22 Oct PHP Part 2 Practical 9 10 25 Oct - 29 Oct Databases Part 1 Practical Test 2 Practical 10 11 1 Nov - 5 Nov Independent Learning Week Databases Part 2 Code-Along Series (Part 1) 12 8 Nov - 12 Nov Code-Along Series (Part 2) Code-Along Series (Part 3) 13 15 Nov - 19 Nov Practical Test 3 14 22 Nov - 26 Nov Wrap-up Lecture Note The practical work is arranged such that it complements the respective weeks' lectures. It is encouraged that you ensure that you're familiar with the lecture content before attempting the practical work.","title":"Home"},{"location":"archive/202108/#aim","text":"The aim of these practical lab exercises is to guide students in mastering the fundamentals behind web development to develop visually appealing websites or applications.","title":"Aim"},{"location":"archive/202108/#schedule-august-2021-semester","text":"The schedule is subject to change. Week Lecture Practical Lab 1 23 Aug - 27 Aug Introduction to Web Programming Practical Preparation 2 30 Aug - 3 Sept HTML Part 1 Practical 1 3 6 Sept - 10 Sept HTML Part 2 Practical 2 4 13 Sept - 17 Sept HTML Part 3 Practical 3 5 20 Sept - 24 Sept JavaScript Part 1 Practical 4 6 27 Sept - 1 Oct JavaScript Part 2 Practical 5 7 4 Oct - 8 Oct JavaScript Part 3 Practical 6 8 11 Oct - 15 Oct Introduction to PHP and LAMP PHP Part 1 Practical Test 1 Practical 7 Practical 8 9 18 Oct - 22 Oct PHP Part 2 Practical 9 10 25 Oct - 29 Oct Databases Part 1 Practical Test 2 Practical 10 11 1 Nov - 5 Nov Independent Learning Week Databases Part 2 Code-Along Series (Part 1) 12 8 Nov - 12 Nov Code-Along Series (Part 2) Code-Along Series (Part 3) 13 15 Nov - 19 Nov Practical Test 3 14 22 Nov - 26 Nov Wrap-up Lecture Note The practical work is arranged such that it complements the respective weeks' lectures. It is encouraged that you ensure that you're familiar with the lecture content before attempting the practical work.","title":"Schedule (August 2021 Semester)"},{"location":"archive/202108/lab00/","text":"Practical Preparation Code Editor Going forward, I will be using Visual Studio Code as my code editor of choice during demos. However, this is not the only choice available - some good alternatives include Atom, Sublime Text, and Notepad++ (for Windows users only). Of course, you are not forbidden to use a different code editor you're already familiar with, as long as you are able to make web scripts with it. Visual Studio Code Extensions Visual Studio Code has plenty of extensions which can either make your code editor appear more visually appealing, or help ease your workflow with some useful fixes. The ones I will be using prevalently are as follows: Highlight Matching Tag by vincaslt ( vincaslt.highlight-matching-tag ) - This is helpful especially for checking if your tag pairs are correctly placed or omitted by mistake. Live Server by Ritwich Dey ( ritwickdey.liveserver ) - Up until we learn PHP, this will be the quick way to view our web pages without digging into our file directory to display our web pages in our web browser. Prettier - Code formatter by Prettier ( esbenp.prettier-vscode ) - This will be our code formatter in order to have our web files properly indented and formatted (hence the name). Also, do take note that I also have this extension installed in my instance of Visual Studio Code: IntelliJ IDEA Keybindings by Keisuke Kato ( k--kato.intellij-idea-keybindings ) This extension makes it such that some of my shortcut keys are different from what is initially set by Microsoft themselves. You may choose not to install this extension, this one should do absolutely nothing to your workflow especially if you're not the type to use complex shortcut keys aside from your Ctrl-X/Ctrl-C and Ctrl-V combo. However, if I mention any keyboard shortcut that does not translate on your end, you may want to do due diligence and find out what the original keybindings are. You will be able to install your extensions by clicking on the Extensions tab on the left hand side (the shortcut is \u21e7\u2318X on macOS or Ctrl+Shift+X on Windows). You can find out more about what these extensions do when you select and find them from there. ::: warning NOTE Do note that you are not required to download these extensions in order for you to carry on with the class. These extensions are only meant to help with easing your web scripting/programming experiences with Visual Studio Code. ::: Testing Visual Studio Code Out To open a project directory, you can click on Open.. from the Getting Started page or from the top menu bar and locate it that way. Alternatively, you can click and drag your project folder from your File Explorer/Finder window and into the Visual Studio Code interface - this is a pretty quick way to get started and should be applicable in most code editors. Create a web page file named index.html your project directory. After that, copy and paste the following into your web page: <!DOCTYPE html> < html > < head > < title > Testing HTML </ title > </ head > < body > < h1 > It works! </ h1 > </ body > </ html > If you downloaded the Live Server extension, you should be able to view a link that says \"Go Live\". Click that link and it will open up your web page in a small web server with the IP address 127:.0.0.1:5500 . The port 5500 may not apply depending on what is currently running inside your machine. The output should be as follows: Any change you make to your web page right after upon saving will immediately refresh what is shown on the web browser automatically - this means you won't need to instinctively refresh your browser each time you make a change. Click the link again to stop the Live Server from refreshing. Alternatively, in the Explorer side bar, you can right click on the HTML file you're working on and select \"Open with Live Server\".","title":"Practical Preparation"},{"location":"archive/202108/lab00/#practical-preparation","text":"","title":"Practical Preparation"},{"location":"archive/202108/lab00/#code-editor","text":"Going forward, I will be using Visual Studio Code as my code editor of choice during demos. However, this is not the only choice available - some good alternatives include Atom, Sublime Text, and Notepad++ (for Windows users only). Of course, you are not forbidden to use a different code editor you're already familiar with, as long as you are able to make web scripts with it.","title":"Code Editor"},{"location":"archive/202108/lab00/#visual-studio-code-extensions","text":"Visual Studio Code has plenty of extensions which can either make your code editor appear more visually appealing, or help ease your workflow with some useful fixes. The ones I will be using prevalently are as follows: Highlight Matching Tag by vincaslt ( vincaslt.highlight-matching-tag ) - This is helpful especially for checking if your tag pairs are correctly placed or omitted by mistake. Live Server by Ritwich Dey ( ritwickdey.liveserver ) - Up until we learn PHP, this will be the quick way to view our web pages without digging into our file directory to display our web pages in our web browser. Prettier - Code formatter by Prettier ( esbenp.prettier-vscode ) - This will be our code formatter in order to have our web files properly indented and formatted (hence the name). Also, do take note that I also have this extension installed in my instance of Visual Studio Code: IntelliJ IDEA Keybindings by Keisuke Kato ( k--kato.intellij-idea-keybindings ) This extension makes it such that some of my shortcut keys are different from what is initially set by Microsoft themselves. You may choose not to install this extension, this one should do absolutely nothing to your workflow especially if you're not the type to use complex shortcut keys aside from your Ctrl-X/Ctrl-C and Ctrl-V combo. However, if I mention any keyboard shortcut that does not translate on your end, you may want to do due diligence and find out what the original keybindings are. You will be able to install your extensions by clicking on the Extensions tab on the left hand side (the shortcut is \u21e7\u2318X on macOS or Ctrl+Shift+X on Windows). You can find out more about what these extensions do when you select and find them from there. ::: warning NOTE Do note that you are not required to download these extensions in order for you to carry on with the class. These extensions are only meant to help with easing your web scripting/programming experiences with Visual Studio Code. :::","title":"Visual Studio Code Extensions"},{"location":"archive/202108/lab00/#testing-visual-studio-code-out","text":"To open a project directory, you can click on Open.. from the Getting Started page or from the top menu bar and locate it that way. Alternatively, you can click and drag your project folder from your File Explorer/Finder window and into the Visual Studio Code interface - this is a pretty quick way to get started and should be applicable in most code editors. Create a web page file named index.html your project directory. After that, copy and paste the following into your web page: <!DOCTYPE html> < html > < head > < title > Testing HTML </ title > </ head > < body > < h1 > It works! </ h1 > </ body > </ html > If you downloaded the Live Server extension, you should be able to view a link that says \"Go Live\". Click that link and it will open up your web page in a small web server with the IP address 127:.0.0.1:5500 . The port 5500 may not apply depending on what is currently running inside your machine. The output should be as follows: Any change you make to your web page right after upon saving will immediately refresh what is shown on the web browser automatically - this means you won't need to instinctively refresh your browser each time you make a change. Click the link again to stop the Live Server from refreshing. Alternatively, in the Explorer side bar, you can right click on the HTML file you're working on and select \"Open with Live Server\".","title":"Testing Visual Studio Code Out"},{"location":"archive/202108/lab01/","text":"Practical 01: Getting Started with HTML This practical will serve as a starting point to learning how to create web pages. You may have come across some of the tags used here in previous encounters, but be aware of deprecated tags! See Getting Started for more information. Task Develop a web page that contains a self-introduction of yourself. Your web page should contain at least the following content: a picture of yourself (or your online avatar or a goat, whatever rocks your boat) a short paragraph of yourself (use paragraph element) hobbies and interests (unordered list) favorite subjects in school (or college, you decide) (ordered list) At the bottom of the webpage, include a table element that replicates the following in terms of row and column span: What else would you put into a introduction page? Extra Publish your web page on GitHub Pages. There are numerous sources that can help you to get a head start with GitHub Pages, and it's all free! The simplest method is to use GitHub Desktop. Getting Started HTML files typically have the .html extension. One can create a HTML file named index.html where index is the name designated to the page. Files with the name index are often treated as home pages in web sites. For example, when one visits TIMeS , the browser would immediately look for a file whose name is index if the name of the file is not specified. Let's just say TIMeS has a page called login.html . One may visit that page instead of index.html by specifying the filename after the URL, namely: https://times.taylors.edu.my/login.html Take Note Going forward, DO NOT name any of your project folders or files with spaces. This can inevitably complicate things when we start going through referencing files in your project directory. For example, if a web site with domain www.example.com has a file named page 1.html , the address bar in a web browser will have to interpret the link to that page as: www.example.com/page%201.html The best practice is to clump the words making up the file name together without spaces (i.e., page1.html ), or to add a hyphen - or underscore ( _ ) to separate each word (i.e., page-1.html , page_1.html ). Your HTML file should take a form like as follows: <!DOCTYPE html> < html lang = \"en\" > < head > <!-- To contain stylesheets and various web page information (i.e., Tab Name) --> </ head > < body > <!-- Browser viewable content should be placed here --> </ body > </ html > Avoid Deprecated Tags! Web developers are now expected to follow the HTML 5 standard when developing web pages. With this standard comes the fact that some tags/elements/attributes which were prevalently used in prior versions of HTML should no longer be applicable - they are what we call deprecated . In most cases, CSS is strongly recommended to be used as the ultimate alternative. For instance, rather than using the <u></u> element to denote underlined text, implement CSS like as follows: <!-- In <head> section: --> < style type = \"text/css\" > . underlined { text-decoration : underline ; } </ style > <!-- In <body> section: --> < span class = \"underlined\" > Underlined text </ span > Using CSS rather than resorting to deprecated tags has its upsides. For one, you can implement one style ruling to be shared across multiple HTML elements in multiple HTML documents. We will delve more into CSS stylings in the next practical.","title":"Practical 01: Getting Started with HTML"},{"location":"archive/202108/lab01/#practical-01-getting-started-with-html","text":"This practical will serve as a starting point to learning how to create web pages. You may have come across some of the tags used here in previous encounters, but be aware of deprecated tags! See Getting Started for more information.","title":"Practical 01: Getting Started with HTML"},{"location":"archive/202108/lab01/#task","text":"Develop a web page that contains a self-introduction of yourself. Your web page should contain at least the following content: a picture of yourself (or your online avatar or a goat, whatever rocks your boat) a short paragraph of yourself (use paragraph element) hobbies and interests (unordered list) favorite subjects in school (or college, you decide) (ordered list) At the bottom of the webpage, include a table element that replicates the following in terms of row and column span: What else would you put into a introduction page? Extra Publish your web page on GitHub Pages. There are numerous sources that can help you to get a head start with GitHub Pages, and it's all free! The simplest method is to use GitHub Desktop.","title":"Task"},{"location":"archive/202108/lab01/#getting-started","text":"HTML files typically have the .html extension. One can create a HTML file named index.html where index is the name designated to the page. Files with the name index are often treated as home pages in web sites. For example, when one visits TIMeS , the browser would immediately look for a file whose name is index if the name of the file is not specified. Let's just say TIMeS has a page called login.html . One may visit that page instead of index.html by specifying the filename after the URL, namely: https://times.taylors.edu.my/login.html Take Note Going forward, DO NOT name any of your project folders or files with spaces. This can inevitably complicate things when we start going through referencing files in your project directory. For example, if a web site with domain www.example.com has a file named page 1.html , the address bar in a web browser will have to interpret the link to that page as: www.example.com/page%201.html The best practice is to clump the words making up the file name together without spaces (i.e., page1.html ), or to add a hyphen - or underscore ( _ ) to separate each word (i.e., page-1.html , page_1.html ). Your HTML file should take a form like as follows: <!DOCTYPE html> < html lang = \"en\" > < head > <!-- To contain stylesheets and various web page information (i.e., Tab Name) --> </ head > < body > <!-- Browser viewable content should be placed here --> </ body > </ html >","title":"Getting Started"},{"location":"archive/202108/lab01/#avoid-deprecated-tags","text":"Web developers are now expected to follow the HTML 5 standard when developing web pages. With this standard comes the fact that some tags/elements/attributes which were prevalently used in prior versions of HTML should no longer be applicable - they are what we call deprecated . In most cases, CSS is strongly recommended to be used as the ultimate alternative. For instance, rather than using the <u></u> element to denote underlined text, implement CSS like as follows: <!-- In <head> section: --> < style type = \"text/css\" > . underlined { text-decoration : underline ; } </ style > <!-- In <body> section: --> < span class = \"underlined\" > Underlined text </ span > Using CSS rather than resorting to deprecated tags has its upsides. For one, you can implement one style ruling to be shared across multiple HTML elements in multiple HTML documents. We will delve more into CSS stylings in the next practical.","title":"Avoid Deprecated Tags!"},{"location":"archive/202108/lab02/","text":"Practical 02: Applying CSS This practical is an extension of Practical 01 - you will now attempt to implement visual styles to the content prepared in HTML. Task In both web pages you created, apply the various CSS styles you've learnt in lecture (e.g., background color, fonts, image positioning, etc.). When applying CSS to your web pages, look up some good aesthetic principles web designers or developers take when designing their web sites. Try to apply those principles in your web pages wherever possible. Optional Task: CSS Responsiveness Try and implement a styling that only applies itself in mobile screens. You may look up a screen resolution for a mobile device of your choice (e.g., iPhones, tablet screens). Getting Started CSS can be applied in three different methods. The encouraged method is having your CSS in an external CSS file (i.e., external style). When referencing a CSS file, one ought to use the <link> tag within the head section of the HTML document. For example, to reference styles.css in your HTML document, the placement of your CSS <link> reference should be like as follows: 1 2 3 4 5 6 7 8 9 10 11 <!DOCTYPE html> < html > < head > <!-- some head content --> < link rel = \"stylesheet\" type = \"text/css\" href = \"styles.css\" /> </ head > < body > <!-- body content here --> </ body > </ html > CSS Responsiveness CSS responsiveness typically has to do with making sure that web sites can adapt to different screen resolutions from different devices. You can specify how content appears in different resolutions by using the media query tag. For example, the yellowgreen background color styling only applies to screens that are at least 768px wide: 1 2 3 4 5 6 7 8 9 body { background-color : orange ; } @ media only screen and ( min-width : 768px ) { body { background-color : yellowgreen ; } } Detailed information is available in Lecture 4: HTML & CSS (Part 3). However, the concept behind it is easy to understand and should be considered if you plan to make your web page accessible on mobile screens.","title":"Practical 02: Applying CSS"},{"location":"archive/202108/lab02/#practical-02-applying-css","text":"This practical is an extension of Practical 01 - you will now attempt to implement visual styles to the content prepared in HTML.","title":"Practical 02: Applying CSS"},{"location":"archive/202108/lab02/#task","text":"In both web pages you created, apply the various CSS styles you've learnt in lecture (e.g., background color, fonts, image positioning, etc.). When applying CSS to your web pages, look up some good aesthetic principles web designers or developers take when designing their web sites. Try to apply those principles in your web pages wherever possible.","title":"Task"},{"location":"archive/202108/lab02/#optional-task-css-responsiveness","text":"Try and implement a styling that only applies itself in mobile screens. You may look up a screen resolution for a mobile device of your choice (e.g., iPhones, tablet screens).","title":"Optional Task: CSS Responsiveness"},{"location":"archive/202108/lab02/#getting-started","text":"CSS can be applied in three different methods. The encouraged method is having your CSS in an external CSS file (i.e., external style). When referencing a CSS file, one ought to use the <link> tag within the head section of the HTML document. For example, to reference styles.css in your HTML document, the placement of your CSS <link> reference should be like as follows: 1 2 3 4 5 6 7 8 9 10 11 <!DOCTYPE html> < html > < head > <!-- some head content --> < link rel = \"stylesheet\" type = \"text/css\" href = \"styles.css\" /> </ head > < body > <!-- body content here --> </ body > </ html >","title":"Getting Started"},{"location":"archive/202108/lab02/#css-responsiveness","text":"CSS responsiveness typically has to do with making sure that web sites can adapt to different screen resolutions from different devices. You can specify how content appears in different resolutions by using the media query tag. For example, the yellowgreen background color styling only applies to screens that are at least 768px wide: 1 2 3 4 5 6 7 8 9 body { background-color : orange ; } @ media only screen and ( min-width : 768px ) { body { background-color : yellowgreen ; } } Detailed information is available in Lecture 4: HTML & CSS (Part 3). However, the concept behind it is easy to understand and should be considered if you plan to make your web page accessible on mobile screens.","title":"CSS Responsiveness"},{"location":"archive/202108/lab03/","text":"Practical 03: HTML Forms This week's practical activity explores some more features including those in HTML forms and intermediate CSS. Optional Activity Create a form as close as the image given below: Image assets are given below: Lab 03 Activity Assets Tasks Task 1 Recall the application process when you first enrolled into college. During then, you are asked to fill up a form for information including (but not limited to) your name, residence address, phone number, e-mail, date of birth, and emergency contact. Create a web form that requires users to input the mentioned information required. Feel free to add some more pieces of required information into your form. Use as many form elements as necessary; include at least one instance of every type of form element mentioned during lecture. Task 2 Beautify your web form using CSS. Include the use of borders, margins and paddings. Extra Task Consider someone who may open your form on a mobile device such as a smartphone or tablet. Web developers or designers make use of the following meta tag in the <head> section: < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" /> This will set the viewport of the web page, which will give the browser instructions on how to control the page's dimensions and scaling. Apart from that, media queries were used to cater for different screen sizes. Look up media queries online and try to incorporate it into your web form. You may use your browser's inspector tool to simulate viewing the web page from a mobile device of your own choosing.","title":"Practical 03: HTML Forms"},{"location":"archive/202108/lab03/#practical-03-html-forms","text":"This week's practical activity explores some more features including those in HTML forms and intermediate CSS.","title":"Practical 03: HTML Forms"},{"location":"archive/202108/lab03/#optional-activity","text":"Create a form as close as the image given below: Image assets are given below: Lab 03 Activity Assets","title":"Optional Activity"},{"location":"archive/202108/lab03/#tasks","text":"","title":"Tasks"},{"location":"archive/202108/lab03/#task-1","text":"Recall the application process when you first enrolled into college. During then, you are asked to fill up a form for information including (but not limited to) your name, residence address, phone number, e-mail, date of birth, and emergency contact. Create a web form that requires users to input the mentioned information required. Feel free to add some more pieces of required information into your form. Use as many form elements as necessary; include at least one instance of every type of form element mentioned during lecture.","title":"Task 1"},{"location":"archive/202108/lab03/#task-2","text":"Beautify your web form using CSS. Include the use of borders, margins and paddings.","title":"Task 2"},{"location":"archive/202108/lab03/#extra-task","text":"Consider someone who may open your form on a mobile device such as a smartphone or tablet. Web developers or designers make use of the following meta tag in the <head> section: < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" /> This will set the viewport of the web page, which will give the browser instructions on how to control the page's dimensions and scaling. Apart from that, media queries were used to cater for different screen sizes. Look up media queries online and try to incorporate it into your web form. You may use your browser's inspector tool to simulate viewing the web page from a mobile device of your own choosing.","title":"Extra Task"},{"location":"archive/202108/lab04/","text":"Practical 04: Introduction to JavaScript In this practical, you will begin to use JavaScript in making your web pages more dynamic. JavaScript enables users to interact with the web page's elements (and may also consequently modify the appearance of web pages through a set of action(s)). Tasks Task 1 Create a HTML webpage with an empty paragraph element and a button with the text \"Click Me!\". When the button is clicked, the paragraph element should then contain the text \"You clicked the button!\". Create JavaScript code within <script> tags inside the webpage to enable this functionality. Additional Sub-task Modify the code such that it prints \"You clicked the button!\" in a new line in the browser window after each time after the button has been clicked on. Task 2 Create a HTML webpage that displays a confirm box asking users: \"Select OK to proceed or Cancel to return.\". If the OK button is selected, display an alert box that contains the message \"You may proceed.\". If the Cancel button is selected, display an alert box that contains the message \"You have chosen to cancel.\". After either alert box is dismissed, display a message on the HTML page. Create JavaScript code within <script> tags inside the webpage to enable this functionality. Task 3 Create a HTML webpage that displays a prompt box that requests users to enter their name. Once entered, an alert box should follow up with a greeting that contains the entered name. Use a separate JavaScript file to contain the JavaScript code for this functionality. Task 4 Create an empty HTML file containing the following in the <body> section: 1 2 3 4 5 6 7 8 9 10 11 < script > let a = \"red\" ; let b = \"blue\" ; /* ---- INSERT CODE HERE ---- */ /* ---- END INSERT CODE ---- */ console . log ( a ); console . log ( b ); </ script > You should now be able to view from the values of a and b being printed in the console. Within the given boundaries as stated in the above code snippet, write some extra JavaScript code that will swap the values of variables a and b. You may check your variable answers using your browser's console or insert additional lines of code to automatically print out their values. Hint Use another variable to temporarily hold one of their values during the swap process. Getting Started There are two methods of implementing JavaScript into your HTML file: embedded style 1 2 3 4 5 6 7 8 9 10 11 12 13 < html > < head > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" /> < title > JavaScript Example </ title > </ head > < body > <!-- Body content --> < script > // JavaScript code here </ script > </ body > </ html > external style 1 2 3 4 5 6 7 8 9 10 11 < html > < head > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" /> < title > JavaScript Example </ title > </ head > < body > <!-- Body content --> < script src = \"script_name_here.js\" ></ script > </ body > </ html > To implement JavaScript using embedded style, the <script></script> element should be used. Location of <script> Tags Unlike CSS, you may use them in either the <head> or <body> section, or both if necessary. The only times when order is necessary is when you require a set of script commands to run first before another set of scripts.","title":"Practical 04: Introduction to JavaScript"},{"location":"archive/202108/lab04/#practical-04-introduction-to-javascript","text":"In this practical, you will begin to use JavaScript in making your web pages more dynamic. JavaScript enables users to interact with the web page's elements (and may also consequently modify the appearance of web pages through a set of action(s)).","title":"Practical 04: Introduction to JavaScript"},{"location":"archive/202108/lab04/#tasks","text":"","title":"Tasks"},{"location":"archive/202108/lab04/#task-1","text":"Create a HTML webpage with an empty paragraph element and a button with the text \"Click Me!\". When the button is clicked, the paragraph element should then contain the text \"You clicked the button!\". Create JavaScript code within <script> tags inside the webpage to enable this functionality.","title":"Task 1"},{"location":"archive/202108/lab04/#additional-sub-task","text":"Modify the code such that it prints \"You clicked the button!\" in a new line in the browser window after each time after the button has been clicked on.","title":"Additional Sub-task"},{"location":"archive/202108/lab04/#task-2","text":"Create a HTML webpage that displays a confirm box asking users: \"Select OK to proceed or Cancel to return.\". If the OK button is selected, display an alert box that contains the message \"You may proceed.\". If the Cancel button is selected, display an alert box that contains the message \"You have chosen to cancel.\". After either alert box is dismissed, display a message on the HTML page. Create JavaScript code within <script> tags inside the webpage to enable this functionality.","title":"Task 2"},{"location":"archive/202108/lab04/#task-3","text":"Create a HTML webpage that displays a prompt box that requests users to enter their name. Once entered, an alert box should follow up with a greeting that contains the entered name. Use a separate JavaScript file to contain the JavaScript code for this functionality.","title":"Task 3"},{"location":"archive/202108/lab04/#task-4","text":"Create an empty HTML file containing the following in the <body> section: 1 2 3 4 5 6 7 8 9 10 11 < script > let a = \"red\" ; let b = \"blue\" ; /* ---- INSERT CODE HERE ---- */ /* ---- END INSERT CODE ---- */ console . log ( a ); console . log ( b ); </ script > You should now be able to view from the values of a and b being printed in the console. Within the given boundaries as stated in the above code snippet, write some extra JavaScript code that will swap the values of variables a and b. You may check your variable answers using your browser's console or insert additional lines of code to automatically print out their values. Hint Use another variable to temporarily hold one of their values during the swap process.","title":"Task 4"},{"location":"archive/202108/lab04/#getting-started","text":"There are two methods of implementing JavaScript into your HTML file: embedded style 1 2 3 4 5 6 7 8 9 10 11 12 13 < html > < head > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" /> < title > JavaScript Example </ title > </ head > < body > <!-- Body content --> < script > // JavaScript code here </ script > </ body > </ html > external style 1 2 3 4 5 6 7 8 9 10 11 < html > < head > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" /> < title > JavaScript Example </ title > </ head > < body > <!-- Body content --> < script src = \"script_name_here.js\" ></ script > </ body > </ html > To implement JavaScript using embedded style, the <script></script> element should be used.","title":"Getting Started"},{"location":"archive/202108/lab04/#location-of-script-tags","text":"Unlike CSS, you may use them in either the <head> or <body> section, or both if necessary. The only times when order is necessary is when you require a set of script commands to run first before another set of scripts.","title":"Location of &lt;script&gt; Tags"},{"location":"archive/202108/lab05/","text":"Practical 05: JavaScript Program Control Structure & Arrays This practical activity explores program control structures that can be used to implement logic into web sites. Getting Started JavaScript Program Control Structure Syntax The syntax used is applicable to many other languages, but that is not of our concern at the moment. if-else Statement Syntax (Example): if ( condition1 ) { // actions #1 } else if ( condition2 ) { // actions #2 } else { // actions otherwise } switch Statement Syntax (Example): switch ( variable ) { case 1 : // do something break ; case 2 : // do something case 3 : // do something (will carry on from Case 2 since no break statement exists) break ; default : // do something } for Loop Syntax: for ( init ; condition ; update ) { /* do something here */ } for-of Loop Syntax: for ( let iter of arr ) { /* do something here */ } while Loop Syntax: init ; while ( condition ) { /* do something here */ update ; } do-while Loop Syntax: init ; do { /* do something here */ update ; } while ( condition ); JavaScript Arrays Presently, there are two ways to declare arrays: using the array() function to contain variables using square brackets [] (I very much prefer this method) Tasks Task 1 Create a HTML file that uses embedded JavaScript to carry out the following. Part 1: Display the numbers between 5 to 22 (inclusive of both) in ascending order using a for loop in the browser's console. Part 2: In the same HTML file, display the numbers between -14 and 7 (exclusive of both) in descending order using a for loop in the browser's console. Part 3: In the same HTML file, display the even numbers between 208 and 251 (inclusive of both) in descending order using a for loop in the browser's console. Task 2 Create a HTML file that uses embedded JavaScript to carry out the following. Part 1: Display the numbers between -45 to -23 (inclusive of both) in descending order using a while loop in the browser's console. Part 2: In the same HTML file, display the numbers between 18 and 36 (exclusive of both) in ascending order using a while loop in the browser's console. Part 3: In the same HTML file, display the odd numbers between 208 and 251 (inclusive of both) in ascending order using a while loop in the browser's console. Task 3 Create an empty HTML file containing the following in the <body> section: < script > let num = 16 ; console . log ( \"while looping..\" ); while ( num < 15 ) { console . log ( num ); num ++ ; } console . log ( \"do-while looping..\" ); </ script > After the last line given, utilize a do-while loop to carry out the same purpose as with the given while loop (i.e., use a do-while loop to print the value of num as it increases after each loop). What is the difference between these two loops in terms of their functions? Task 4 Create a HTML file that uses embedded JavaScript to carry out the following. Prompt users to enter a year using a prompt box. Set the default value to the current year. After entering the year, the browser window should display the Chinese zodiac animal that corresponds with the given remainder after dividing by 12: Remainder Chinese Zodiac Animal Remainder Chinese Zodiac Animal 0 Monkey 6 Tiger 1 Rooster 7 Rabbit 2 Dog 8 Dragon 3 Pig 9 Snake 4 Rat 10 Horse 5 Ox 11 Sheep Task 5 The Body Mass Index (BMI) is a measure of health on weight. A person's BMI is calculated by taking the person's weight (in kilograms) divided by the person's height squared (height in meters). Create a BMI script that takes in both a person's weight and height as values to interpret the person's BMI. The respective BMI interpretations are as follows: BMI Interpretation BMI < 18.5 Underweight 18.5 \u2264 BMI < 25.0 Normal 25.0 \u2264 BMI < 30.0 Overweight BMI \u2265 30.0 Obese Implement the written script in a separate JavaScript file separate from your HTML file. You may choose to output the result from the console or via visual elements on your webpage (i.e., print the result in the browser window as a paragraph or regular text). Task 6 Create a HTML file that uses external JavaScript to carry out the following. Create an external JavaScript file that contains an array named students which contains the following values: 'Anthony', 'Barry', 'Desmond', 'Grenda'. Print the students array in the console. Utilize a for-of loop to display the array elements in the console. Pop the last element in the students array (i.e., Grenda). Hint Use the pop() function. Append the values 'Marie' and 'Zacchaeus' to the end of the students array. Print the array again; you do not need any loop structure this time. Hint Use the push() function. Remove the first value from the students array (i.e., Anthony), and replace it with a new element 'Charlie'. Print the array again; just like last time, you do not need any loop structure here. Hint There exists a shift() function that can do one of the given requirements here. Perhaps there's also an unshift function which does the opposite as well? Activity: Bubble Sort Bubble sort is one of many types of sorting algorithms taught in data structures and algorithms courses. Watch the following video to understand the concept behind bubble sort (0:48 to 2:40). In this activity, we will be using an external JavaScript file to contain our logic and the browser's inspector console to view our outputs. Our HTML page should be as follows: 1 2 3 4 5 6 7 8 9 10 < html > < head > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" /> < title > JavaScript Bubble Sort </ title > </ head > < body > <!-- I'm assuming the JavaScript file is named as follows and is in the same file directory as this HTML file. --> < script src = \"bubbleSort.js\" ></ script > </ body > </ html > Let's start our JavaScript file as follows: const array = [ 10 , - 3 , 55 , - 10 , - 24 , 54 , 0 , - 21 , 8 ]; console . log ( `Unsorted array:` , array ); Line 2 should print out the array with its elements in the original order. Let's use bubble sort to reorder the elements in this array in ascending order. Below the given JavaScript code snippet, declare a variable called is_sorted . This variable will serve as a flag variable that will determine whether to continue running through another iteration of the bubble sort algorithm. Our implementation of the bubble sort algorithm will be encapsulated within a do-while loop like as follows: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 const array = [ 10 , - 3 , 55 , - 10 , - 24 , 54 , 0 , - 21 , 8 ]; console . log ( `Unsorted array:` , array ); let is_sorted ; /** * the bubble sort algorithm will continue running * as long as is_sorted is true AFTER each iteration */ do { // we start every iteration of the algorithm by making is_sorted true is_sorted = true ; } while ( is_sorted ); console . log ( `Sorted array:` , array ); Using a do-while loop makes it such that we won't require is_sorted to be initialized with a value just yet. Upon completing all the necessary rounds with the bubble sort algorithm, we will print out the sorted array. An alternative to using the do-while loop in this case is a for/of loop. Within the do-while loop, we will implement another loop structure - this time, we will be using a for loop. const array = [ 10 , - 3 , 55 , - 10 , - 24 , 54 , 0 , - 21 , 8 ]; console . log ( `Unsorted array:` , array ); let is_sorted ; /** * the bubble sort algorithm will continue running * as long as is_sorted is true AFTER each iteration */ do { // we start every iteration of the algorithm by making is_sorted true is_sorted = true ; for ( let j = 0 ; j < array . length ; ++ j ) { // we start comparing elements in here } } while ( is_sorted ); console . log ( `Sorted array:` , array ); The mechanism behind how the bubble sort algorithm works revolves around comparing each element against its neighboring element in the array. In this implementation, we compare to check if each element is smaller than the left neighbor. At the end of each iteration, the largest element \"bubbles\" up to the end of the unsorted portion of the array (hence, why it's called bubble sort). const array = [ 10 , - 3 , 55 , - 10 , - 24 , 54 , 0 , - 21 , 8 ]; console . log ( `Unsorted array:` , array ); let is_sorted ; /** * the bubble sort algorithm will continue running * as long as is_sorted is true AFTER each iteration */ do { // we start every iteration of the algorithm by making is_sorted true is_sorted = true ; for ( let j = 0 ; j < array . length ; ++ j ) { /** * checks if element (i.e., array[j]) * is smaller than the left neighbor (i.e., array[j - 1]) * * if so, flag is_sorted as false * and swap the element with its neighbor */ if ( array [ j ] < array [ j - 1 ]) { is_sorted = false ; const temp = array [ j ]; array [ j ] = array [ j - 1 ]; array [ j - 1 ] = temp ; } } } while ( is_sorted ); console . log ( `Sorted array:` , array ); And voila, we basically created a simple implementation of the bubble sort algorithm. We can make a few changes to make this algorithm perform more efficiently though (in data structures and algorithms courses, the idea is to produce efficient algorithms or structures that utilize as little computer resources and/or time as possible). Modifications for Efficiency Here the do-while loop makes it such that the whole algorithm keeps iterating over the whole array to see if it is sorted. However, we have established that after each iteration, every last element in the unsorted portion of the array is considered as sorted. Therefore, we do not need each iteration to loop through to check against the sorted portion of the array. We can do this by replacing the do-while loop with another for loop with another iterator variable. After that, we can deduct the value of that iterator variable from array.length in the inner for loop (i.e., array_length - i ). In this implementation, the first iteration checks the whole array since array_length - 0 . In each subsequent iteration, i is incremented by 1, and the range checked in the inner for loop shrinks by size 1 (i.e., array_length - 1 in iteration #2, array_length - 2 in iteration #3, and so on). const array = [ 10 , - 3 , 55 , - 10 , - 24 , 54 , 0 , - 21 , 8 ]; console . log ( `Unsorted array:` , array ); let is_sorted ; /** * the bubble sort algorithm will continue running * as long as is_sorted is true AFTER each iteration */ for ( let i = 0 ; i < array . length ; ++ i ) { // we start every iteration of the algorithm by making is_sorted true is_sorted = true ; for ( let j = 0 ; j < array . length - i ; ++ j ) { /** * checks if element (i.e., array[j]) * is smaller than the left neighbor (i.e., array[j - 1]) * * if so, flag is_sorted as false * and swap the element with its neighbor */ if ( array [ j ] < array [ j - 1 ]) { is_sorted = false ; const temp = array [ j ]; array [ j ] = array [ j - 1 ]; array [ j - 1 ] = temp ; } } } console . log ( `Sorted array:` , array ); We can also make the algorithm work such that it only proceeds if there was a swap during that iteration (i.e., is_sorted has turned false). If is_sorted remains true after that iteration, it should indicate that there is nothing else to sort in the array and it is safe to leave the array be. We do this by adding an if statement at the end of the outer for loop which breaks through that loop if is_sorted has remained true. const array = [ 10 , - 3 , 55 , - 10 , - 24 , 54 , 0 , - 21 , 8 ]; console . log ( `Unsorted array:` , array ); let is_sorted ; /** * the bubble sort algorithm will continue running * as long as is_sorted is true AFTER each iteration */ for ( let i = 0 ; i < array . length ; ++ i ) { // we start every iteration of the algorithm by making is_sorted true is_sorted = true ; for ( let j = 0 ; j < array . length - i ; ++ j ) { /** * checks if element (i.e., array[j]) * is smaller than the left neighbor (i.e., array[j - 1]) * * if so, flag is_sorted as false * and swap the element with its neighbor */ if ( array [ j ] < array [ j - 1 ]) { is_sorted = false ; const temp = array [ j ]; array [ j ] = array [ j - 1 ]; array [ j - 1 ] = temp ; } } if ( is_sorted ) { break ; } } console . log ( `Sorted array:` , array ); Randomized Array So far, we've only tested this algorithm on one type of array. We can test this using different arrays to see if it works. Here, we will implement an array of 10 randomized integers between -100 and 100. We start with an empty array and we utilize a for loop to iterate over a set number of times (i.e., ARRAY_SIZE ) to push integers of the aforementioned range. If you would like to try with a larger array size, simply modify the value of ARRAY_SIZE , but be sure to only place in positive integers or this will not work. const ARRAY_SIZE = 10 ; const array = []; for ( let i = 0 ; i < ARRAY_SIZE ; ++ i ) { array . push ( Math . floor ( Math . random () * 201 - 100 )); } console . log ( `Unsorted array:` , array ); let is_sorted ; /** * the bubble sort algorithm will continue running * as long as is_sorted is true AFTER each iteration */ for ( let i = 0 ; i < array . length ; ++ i ) { // we start every iteration of the algorithm by making is_sorted true is_sorted = true ; for ( let j = 0 ; j < array . length - i ; ++ j ) { /** * checks if element (i.e., array[j]) * is smaller than the left neighbor (i.e., array[j - 1]) * * if so, flag is_sorted as false * and swap the element with its neighbor */ if ( array [ j ] < array [ j - 1 ]) { is_sorted = false ; const temp = array [ j ]; array [ j ] = array [ j - 1 ]; array [ j - 1 ] = temp ; } } if ( is_sorted ) { break ; } } console . log ( `Sorted array:` , array ); Math.random() produces a decimal value between 0 (inclusive) and 1 (not inclusive). We need to expand this range to cater for all values between -100 and 100 (both inclusive), which totals up to 201 (100 -(-100) + 1). Therefore, we multiply Math.random() by 201, i.e., Math.random() * 201 . This, however, produces numbers between 0 (inclusive) and 201 (exclusive). To shift the range to be between -100 (inclusive) and 101 (exclusive), we deduct that product by 100 (i.e., Math.random() * 201 - 100 ). Still, do note that Math.random() produces decimal values, and Math.random() * 201 - 100 will give any decimal value between -100 and 100 (both inclusive). We use the Math.floor() function to take the floor boundary of the generated value in order to produce that integer. Note that we do not take the ceiling boundary of the generated value (i.e., Math.ceiling() ), as this will give values between -99 and 101 (both inclusive) instead. We also do not use regular rounding off of those decimal values (i.e., Math.round() ), as this gives values between -100 and 101 (both inclusive).","title":"Practical 05: JavaScript Program Control Structure & Arrays"},{"location":"archive/202108/lab05/#practical-05-javascript-program-control-structure-arrays","text":"This practical activity explores program control structures that can be used to implement logic into web sites.","title":"Practical 05: JavaScript Program Control Structure &amp; Arrays"},{"location":"archive/202108/lab05/#getting-started","text":"","title":"Getting Started"},{"location":"archive/202108/lab05/#javascript-program-control-structure-syntax","text":"The syntax used is applicable to many other languages, but that is not of our concern at the moment. if-else Statement Syntax (Example): if ( condition1 ) { // actions #1 } else if ( condition2 ) { // actions #2 } else { // actions otherwise } switch Statement Syntax (Example): switch ( variable ) { case 1 : // do something break ; case 2 : // do something case 3 : // do something (will carry on from Case 2 since no break statement exists) break ; default : // do something } for Loop Syntax: for ( init ; condition ; update ) { /* do something here */ } for-of Loop Syntax: for ( let iter of arr ) { /* do something here */ } while Loop Syntax: init ; while ( condition ) { /* do something here */ update ; } do-while Loop Syntax: init ; do { /* do something here */ update ; } while ( condition );","title":"JavaScript Program Control Structure Syntax"},{"location":"archive/202108/lab05/#javascript-arrays","text":"Presently, there are two ways to declare arrays: using the array() function to contain variables using square brackets [] (I very much prefer this method)","title":"JavaScript Arrays"},{"location":"archive/202108/lab05/#tasks","text":"","title":"Tasks"},{"location":"archive/202108/lab05/#task-1","text":"Create a HTML file that uses embedded JavaScript to carry out the following. Part 1: Display the numbers between 5 to 22 (inclusive of both) in ascending order using a for loop in the browser's console. Part 2: In the same HTML file, display the numbers between -14 and 7 (exclusive of both) in descending order using a for loop in the browser's console. Part 3: In the same HTML file, display the even numbers between 208 and 251 (inclusive of both) in descending order using a for loop in the browser's console.","title":"Task 1"},{"location":"archive/202108/lab05/#task-2","text":"Create a HTML file that uses embedded JavaScript to carry out the following. Part 1: Display the numbers between -45 to -23 (inclusive of both) in descending order using a while loop in the browser's console. Part 2: In the same HTML file, display the numbers between 18 and 36 (exclusive of both) in ascending order using a while loop in the browser's console. Part 3: In the same HTML file, display the odd numbers between 208 and 251 (inclusive of both) in ascending order using a while loop in the browser's console.","title":"Task 2"},{"location":"archive/202108/lab05/#task-3","text":"Create an empty HTML file containing the following in the <body> section: < script > let num = 16 ; console . log ( \"while looping..\" ); while ( num < 15 ) { console . log ( num ); num ++ ; } console . log ( \"do-while looping..\" ); </ script > After the last line given, utilize a do-while loop to carry out the same purpose as with the given while loop (i.e., use a do-while loop to print the value of num as it increases after each loop). What is the difference between these two loops in terms of their functions?","title":"Task 3"},{"location":"archive/202108/lab05/#task-4","text":"Create a HTML file that uses embedded JavaScript to carry out the following. Prompt users to enter a year using a prompt box. Set the default value to the current year. After entering the year, the browser window should display the Chinese zodiac animal that corresponds with the given remainder after dividing by 12: Remainder Chinese Zodiac Animal Remainder Chinese Zodiac Animal 0 Monkey 6 Tiger 1 Rooster 7 Rabbit 2 Dog 8 Dragon 3 Pig 9 Snake 4 Rat 10 Horse 5 Ox 11 Sheep","title":"Task 4"},{"location":"archive/202108/lab05/#task-5","text":"The Body Mass Index (BMI) is a measure of health on weight. A person's BMI is calculated by taking the person's weight (in kilograms) divided by the person's height squared (height in meters). Create a BMI script that takes in both a person's weight and height as values to interpret the person's BMI. The respective BMI interpretations are as follows: BMI Interpretation BMI < 18.5 Underweight 18.5 \u2264 BMI < 25.0 Normal 25.0 \u2264 BMI < 30.0 Overweight BMI \u2265 30.0 Obese Implement the written script in a separate JavaScript file separate from your HTML file. You may choose to output the result from the console or via visual elements on your webpage (i.e., print the result in the browser window as a paragraph or regular text).","title":"Task 5"},{"location":"archive/202108/lab05/#task-6","text":"Create a HTML file that uses external JavaScript to carry out the following. Create an external JavaScript file that contains an array named students which contains the following values: 'Anthony', 'Barry', 'Desmond', 'Grenda'. Print the students array in the console. Utilize a for-of loop to display the array elements in the console. Pop the last element in the students array (i.e., Grenda). Hint Use the pop() function. Append the values 'Marie' and 'Zacchaeus' to the end of the students array. Print the array again; you do not need any loop structure this time. Hint Use the push() function. Remove the first value from the students array (i.e., Anthony), and replace it with a new element 'Charlie'. Print the array again; just like last time, you do not need any loop structure here. Hint There exists a shift() function that can do one of the given requirements here. Perhaps there's also an unshift function which does the opposite as well?","title":"Task 6"},{"location":"archive/202108/lab05/#activity-bubble-sort","text":"Bubble sort is one of many types of sorting algorithms taught in data structures and algorithms courses. Watch the following video to understand the concept behind bubble sort (0:48 to 2:40). In this activity, we will be using an external JavaScript file to contain our logic and the browser's inspector console to view our outputs. Our HTML page should be as follows: 1 2 3 4 5 6 7 8 9 10 < html > < head > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" /> < title > JavaScript Bubble Sort </ title > </ head > < body > <!-- I'm assuming the JavaScript file is named as follows and is in the same file directory as this HTML file. --> < script src = \"bubbleSort.js\" ></ script > </ body > </ html > Let's start our JavaScript file as follows: const array = [ 10 , - 3 , 55 , - 10 , - 24 , 54 , 0 , - 21 , 8 ]; console . log ( `Unsorted array:` , array ); Line 2 should print out the array with its elements in the original order. Let's use bubble sort to reorder the elements in this array in ascending order. Below the given JavaScript code snippet, declare a variable called is_sorted . This variable will serve as a flag variable that will determine whether to continue running through another iteration of the bubble sort algorithm. Our implementation of the bubble sort algorithm will be encapsulated within a do-while loop like as follows: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 const array = [ 10 , - 3 , 55 , - 10 , - 24 , 54 , 0 , - 21 , 8 ]; console . log ( `Unsorted array:` , array ); let is_sorted ; /** * the bubble sort algorithm will continue running * as long as is_sorted is true AFTER each iteration */ do { // we start every iteration of the algorithm by making is_sorted true is_sorted = true ; } while ( is_sorted ); console . log ( `Sorted array:` , array ); Using a do-while loop makes it such that we won't require is_sorted to be initialized with a value just yet. Upon completing all the necessary rounds with the bubble sort algorithm, we will print out the sorted array. An alternative to using the do-while loop in this case is a for/of loop. Within the do-while loop, we will implement another loop structure - this time, we will be using a for loop. const array = [ 10 , - 3 , 55 , - 10 , - 24 , 54 , 0 , - 21 , 8 ]; console . log ( `Unsorted array:` , array ); let is_sorted ; /** * the bubble sort algorithm will continue running * as long as is_sorted is true AFTER each iteration */ do { // we start every iteration of the algorithm by making is_sorted true is_sorted = true ; for ( let j = 0 ; j < array . length ; ++ j ) { // we start comparing elements in here } } while ( is_sorted ); console . log ( `Sorted array:` , array ); The mechanism behind how the bubble sort algorithm works revolves around comparing each element against its neighboring element in the array. In this implementation, we compare to check if each element is smaller than the left neighbor. At the end of each iteration, the largest element \"bubbles\" up to the end of the unsorted portion of the array (hence, why it's called bubble sort). const array = [ 10 , - 3 , 55 , - 10 , - 24 , 54 , 0 , - 21 , 8 ]; console . log ( `Unsorted array:` , array ); let is_sorted ; /** * the bubble sort algorithm will continue running * as long as is_sorted is true AFTER each iteration */ do { // we start every iteration of the algorithm by making is_sorted true is_sorted = true ; for ( let j = 0 ; j < array . length ; ++ j ) { /** * checks if element (i.e., array[j]) * is smaller than the left neighbor (i.e., array[j - 1]) * * if so, flag is_sorted as false * and swap the element with its neighbor */ if ( array [ j ] < array [ j - 1 ]) { is_sorted = false ; const temp = array [ j ]; array [ j ] = array [ j - 1 ]; array [ j - 1 ] = temp ; } } } while ( is_sorted ); console . log ( `Sorted array:` , array ); And voila, we basically created a simple implementation of the bubble sort algorithm. We can make a few changes to make this algorithm perform more efficiently though (in data structures and algorithms courses, the idea is to produce efficient algorithms or structures that utilize as little computer resources and/or time as possible).","title":"Activity: Bubble Sort"},{"location":"archive/202108/lab05/#modifications-for-efficiency","text":"Here the do-while loop makes it such that the whole algorithm keeps iterating over the whole array to see if it is sorted. However, we have established that after each iteration, every last element in the unsorted portion of the array is considered as sorted. Therefore, we do not need each iteration to loop through to check against the sorted portion of the array. We can do this by replacing the do-while loop with another for loop with another iterator variable. After that, we can deduct the value of that iterator variable from array.length in the inner for loop (i.e., array_length - i ). In this implementation, the first iteration checks the whole array since array_length - 0 . In each subsequent iteration, i is incremented by 1, and the range checked in the inner for loop shrinks by size 1 (i.e., array_length - 1 in iteration #2, array_length - 2 in iteration #3, and so on). const array = [ 10 , - 3 , 55 , - 10 , - 24 , 54 , 0 , - 21 , 8 ]; console . log ( `Unsorted array:` , array ); let is_sorted ; /** * the bubble sort algorithm will continue running * as long as is_sorted is true AFTER each iteration */ for ( let i = 0 ; i < array . length ; ++ i ) { // we start every iteration of the algorithm by making is_sorted true is_sorted = true ; for ( let j = 0 ; j < array . length - i ; ++ j ) { /** * checks if element (i.e., array[j]) * is smaller than the left neighbor (i.e., array[j - 1]) * * if so, flag is_sorted as false * and swap the element with its neighbor */ if ( array [ j ] < array [ j - 1 ]) { is_sorted = false ; const temp = array [ j ]; array [ j ] = array [ j - 1 ]; array [ j - 1 ] = temp ; } } } console . log ( `Sorted array:` , array ); We can also make the algorithm work such that it only proceeds if there was a swap during that iteration (i.e., is_sorted has turned false). If is_sorted remains true after that iteration, it should indicate that there is nothing else to sort in the array and it is safe to leave the array be. We do this by adding an if statement at the end of the outer for loop which breaks through that loop if is_sorted has remained true. const array = [ 10 , - 3 , 55 , - 10 , - 24 , 54 , 0 , - 21 , 8 ]; console . log ( `Unsorted array:` , array ); let is_sorted ; /** * the bubble sort algorithm will continue running * as long as is_sorted is true AFTER each iteration */ for ( let i = 0 ; i < array . length ; ++ i ) { // we start every iteration of the algorithm by making is_sorted true is_sorted = true ; for ( let j = 0 ; j < array . length - i ; ++ j ) { /** * checks if element (i.e., array[j]) * is smaller than the left neighbor (i.e., array[j - 1]) * * if so, flag is_sorted as false * and swap the element with its neighbor */ if ( array [ j ] < array [ j - 1 ]) { is_sorted = false ; const temp = array [ j ]; array [ j ] = array [ j - 1 ]; array [ j - 1 ] = temp ; } } if ( is_sorted ) { break ; } } console . log ( `Sorted array:` , array );","title":"Modifications for Efficiency"},{"location":"archive/202108/lab05/#randomized-array","text":"So far, we've only tested this algorithm on one type of array. We can test this using different arrays to see if it works. Here, we will implement an array of 10 randomized integers between -100 and 100. We start with an empty array and we utilize a for loop to iterate over a set number of times (i.e., ARRAY_SIZE ) to push integers of the aforementioned range. If you would like to try with a larger array size, simply modify the value of ARRAY_SIZE , but be sure to only place in positive integers or this will not work. const ARRAY_SIZE = 10 ; const array = []; for ( let i = 0 ; i < ARRAY_SIZE ; ++ i ) { array . push ( Math . floor ( Math . random () * 201 - 100 )); } console . log ( `Unsorted array:` , array ); let is_sorted ; /** * the bubble sort algorithm will continue running * as long as is_sorted is true AFTER each iteration */ for ( let i = 0 ; i < array . length ; ++ i ) { // we start every iteration of the algorithm by making is_sorted true is_sorted = true ; for ( let j = 0 ; j < array . length - i ; ++ j ) { /** * checks if element (i.e., array[j]) * is smaller than the left neighbor (i.e., array[j - 1]) * * if so, flag is_sorted as false * and swap the element with its neighbor */ if ( array [ j ] < array [ j - 1 ]) { is_sorted = false ; const temp = array [ j ]; array [ j ] = array [ j - 1 ]; array [ j - 1 ] = temp ; } } if ( is_sorted ) { break ; } } console . log ( `Sorted array:` , array ); Math.random() produces a decimal value between 0 (inclusive) and 1 (not inclusive). We need to expand this range to cater for all values between -100 and 100 (both inclusive), which totals up to 201 (100 -(-100) + 1). Therefore, we multiply Math.random() by 201, i.e., Math.random() * 201 . This, however, produces numbers between 0 (inclusive) and 201 (exclusive). To shift the range to be between -100 (inclusive) and 101 (exclusive), we deduct that product by 100 (i.e., Math.random() * 201 - 100 ). Still, do note that Math.random() produces decimal values, and Math.random() * 201 - 100 will give any decimal value between -100 and 100 (both inclusive). We use the Math.floor() function to take the floor boundary of the generated value in order to produce that integer. Note that we do not take the ceiling boundary of the generated value (i.e., Math.ceiling() ), as this will give values between -99 and 101 (both inclusive) instead. We also do not use regular rounding off of those decimal values (i.e., Math.round() ), as this gives values between -100 and 101 (both inclusive).","title":"Randomized Array"},{"location":"archive/202108/lab06/","text":"Practical 06: JavaScript Functions & HTML DOM Manipulation This rather challenging practical activity exposes how functions can be used within JavaScript, and how it can interact with web elements in the HTML Document Object Model (DOM). Should you require more guidance, there are plenty of online tutorials detailing multiple solutions - it's best if you can explore and test them out to the best of your ability. Tasks Task 1 Drivers who are 16 years of age and older can apply for driving a license online. The government webpage code requires applicants to enter their age and then checks if they are old enough to apply. The following code captures the applicant\u2019s age. When the applicant clicks the 'Check now' button the age is first checked to ensure that it is numeric. The age is then checked to see if the applicant is old enough. Suitable messages are displayed as a result of the checks. Part 1: Create an empty webpage with the following HTML scripts inside the <body> section. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 < p > You can apply for a license to drive when you are 16 years old. </ p > < p > To check if you are old enough to drive, input your age and click the button: </ p > < input type = \"text\" id = \"ageNow\" /> < button onclick = \"checkAgeFunction()\" > Check now </ button > < p id = \"ageCheck\" ></ p > < script type = \"text/javascript\" > function checkAgeFunction () { /* ---- INSERT CODE HERE ---- */ /* ---- END INSERT CODE ---- */ document . getElementById ( \"ageCheck\" ). innerHTML = CanApply ; } </ script > Part 2: Complete the code for checkAgeFunction() that checks the age entered by the applicant and displays an appropriate response. Task 2 Create a HTML file that uses embedded JavaScript to carry out the following. Part 1: Create a <script> element located in the <head> section containing the following code snippet: 1 2 3 4 5 6 function showPrimes ( limit ) { for ( let number = 2 ; number <= limit ; ++ number ) { let isPrime = true ; /* ---- CONTINUE CODE FROM HERE ---- */ } } The given code snippet depicts a function named showPrimes which takes in a parameter value called limit . Part 2: In the <body> section, create another <script> element containing the following line: showPrimes ( 20 ); Task 3 Create a HTML file that uses embedded JavaScript to carry out the following. Create a function called arrayFromRange() which creates an array of integers between and including the two numbers that are passed into the function. Example: arrayFromRange ( 5 , 10 ); // this should return [5, 6, 7, 8, 9, 10] arrayFromRange ( - 10 , - 4 ); // this should return [-10, -9, -8, -7, -6, -5, -4]; After creating the function, add another line of JavaScript code at the very end of the <script> element to invoke the created function. Task 4 Create a HTML file that uses embedded JavaScript to carry out the following. You are required to only use the browser's inspector console to generate outputs. Part 1: Create a function that takes two numbers and returns the maximum of the two. ( NOTE: If the two numbers are the same, the function should return the same number.) Part 2: Create a function that takes in a circle's radius value and returns the area of the circle with that radius. Task 5 Create a HTML file that uses external JavaScript to carry out the following. Part 1: In the <body> section, create a single paragraph <p> element with an id value \"result\" containing the text: \"The FizzBuzz Test\". Part 2: Add a <script> tag referencing a JavaScript file called fizzbuzz.js . Part 3: Create the fizzbuzz.js JavaScript file. It should contain the following code snippet: function fizzBuzz ( input ) { /* ---- CONTINUE CODE FROM HERE ---- */ } const number = 15 ; // edit this constant value to test fizzBuzz() document . getElementById ( \"result\" ). innerHTML = fizzBuzz ( number ); The last line makes it such that the value obtained from the fizzBuzz() function is appended into the <p> element with id \"result\" . Part 4: Complete the fizzBuzz() function such that it return \"Fizz\" if the number is divisible by 3, and \"Buzz\" if it is divisible by 5. If the number is divisible by both 3 and 5, fizzBuzz() should return \"FizzBuzz\". If the number is not divisible by 3 or 5, fizzBuzz() should return the value stored in the used input parameter. // Examples fizzBuzz ( 3 ); // it should return \"Fizz\" fizzBuzz ( 10 ); // it should return \"Buzz\" fizzBuzz ( 30 ); // it should return \"FizzBuzz\" fizzBuzz ( 31 ); // it should return 31 Note Do NOT use document.write() or console.log() in the function. You are required to use the return statement instead. Part 5: Implement a check to see if input is a number or not. If the input is not a number (e.g. string, Boolean), it should print \"Not a number\". This needs to be checked first before determining its divisibility. // these should return \"Not a number\" fizzBuzz ( \"3\" ); fizzBuzz ( false ); Hint Use the typeof operator to check the variable's type. Task 6 Create a HTML file that uses external JavaScript to carry out the following. You are required to only use the browser's inspector console to generate outputs. Part 1: Create an object named movie which contains the following attributes: title: \"Big Hero 6\" releaseYear: 2014 rating: 7.8 director_1: \"Don Hall\" director_2: \"Chris Williams\" Part 2: Use the for-in loop to iterate through the movie object's attributes, printing them each time. Part 3: In the same for/in loop, implement a check such that only the attributes containing string values are printed in the console.","title":"Practical 06: JavaScript Functions & HTML DOM Manipulation"},{"location":"archive/202108/lab06/#practical-06-javascript-functions-html-dom-manipulation","text":"This rather challenging practical activity exposes how functions can be used within JavaScript, and how it can interact with web elements in the HTML Document Object Model (DOM). Should you require more guidance, there are plenty of online tutorials detailing multiple solutions - it's best if you can explore and test them out to the best of your ability.","title":"Practical 06: JavaScript Functions &amp; HTML DOM Manipulation"},{"location":"archive/202108/lab06/#tasks","text":"","title":"Tasks"},{"location":"archive/202108/lab06/#task-1","text":"Drivers who are 16 years of age and older can apply for driving a license online. The government webpage code requires applicants to enter their age and then checks if they are old enough to apply. The following code captures the applicant\u2019s age. When the applicant clicks the 'Check now' button the age is first checked to ensure that it is numeric. The age is then checked to see if the applicant is old enough. Suitable messages are displayed as a result of the checks. Part 1: Create an empty webpage with the following HTML scripts inside the <body> section. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 < p > You can apply for a license to drive when you are 16 years old. </ p > < p > To check if you are old enough to drive, input your age and click the button: </ p > < input type = \"text\" id = \"ageNow\" /> < button onclick = \"checkAgeFunction()\" > Check now </ button > < p id = \"ageCheck\" ></ p > < script type = \"text/javascript\" > function checkAgeFunction () { /* ---- INSERT CODE HERE ---- */ /* ---- END INSERT CODE ---- */ document . getElementById ( \"ageCheck\" ). innerHTML = CanApply ; } </ script > Part 2: Complete the code for checkAgeFunction() that checks the age entered by the applicant and displays an appropriate response.","title":"Task 1"},{"location":"archive/202108/lab06/#task-2","text":"Create a HTML file that uses embedded JavaScript to carry out the following. Part 1: Create a <script> element located in the <head> section containing the following code snippet: 1 2 3 4 5 6 function showPrimes ( limit ) { for ( let number = 2 ; number <= limit ; ++ number ) { let isPrime = true ; /* ---- CONTINUE CODE FROM HERE ---- */ } } The given code snippet depicts a function named showPrimes which takes in a parameter value called limit . Part 2: In the <body> section, create another <script> element containing the following line: showPrimes ( 20 );","title":"Task 2"},{"location":"archive/202108/lab06/#task-3","text":"Create a HTML file that uses embedded JavaScript to carry out the following. Create a function called arrayFromRange() which creates an array of integers between and including the two numbers that are passed into the function. Example: arrayFromRange ( 5 , 10 ); // this should return [5, 6, 7, 8, 9, 10] arrayFromRange ( - 10 , - 4 ); // this should return [-10, -9, -8, -7, -6, -5, -4]; After creating the function, add another line of JavaScript code at the very end of the <script> element to invoke the created function.","title":"Task 3"},{"location":"archive/202108/lab06/#task-4","text":"Create a HTML file that uses embedded JavaScript to carry out the following. You are required to only use the browser's inspector console to generate outputs. Part 1: Create a function that takes two numbers and returns the maximum of the two. ( NOTE: If the two numbers are the same, the function should return the same number.) Part 2: Create a function that takes in a circle's radius value and returns the area of the circle with that radius.","title":"Task 4"},{"location":"archive/202108/lab06/#task-5","text":"Create a HTML file that uses external JavaScript to carry out the following. Part 1: In the <body> section, create a single paragraph <p> element with an id value \"result\" containing the text: \"The FizzBuzz Test\". Part 2: Add a <script> tag referencing a JavaScript file called fizzbuzz.js . Part 3: Create the fizzbuzz.js JavaScript file. It should contain the following code snippet: function fizzBuzz ( input ) { /* ---- CONTINUE CODE FROM HERE ---- */ } const number = 15 ; // edit this constant value to test fizzBuzz() document . getElementById ( \"result\" ). innerHTML = fizzBuzz ( number ); The last line makes it such that the value obtained from the fizzBuzz() function is appended into the <p> element with id \"result\" . Part 4: Complete the fizzBuzz() function such that it return \"Fizz\" if the number is divisible by 3, and \"Buzz\" if it is divisible by 5. If the number is divisible by both 3 and 5, fizzBuzz() should return \"FizzBuzz\". If the number is not divisible by 3 or 5, fizzBuzz() should return the value stored in the used input parameter. // Examples fizzBuzz ( 3 ); // it should return \"Fizz\" fizzBuzz ( 10 ); // it should return \"Buzz\" fizzBuzz ( 30 ); // it should return \"FizzBuzz\" fizzBuzz ( 31 ); // it should return 31 Note Do NOT use document.write() or console.log() in the function. You are required to use the return statement instead. Part 5: Implement a check to see if input is a number or not. If the input is not a number (e.g. string, Boolean), it should print \"Not a number\". This needs to be checked first before determining its divisibility. // these should return \"Not a number\" fizzBuzz ( \"3\" ); fizzBuzz ( false ); Hint Use the typeof operator to check the variable's type.","title":"Task 5"},{"location":"archive/202108/lab06/#task-6","text":"Create a HTML file that uses external JavaScript to carry out the following. You are required to only use the browser's inspector console to generate outputs. Part 1: Create an object named movie which contains the following attributes: title: \"Big Hero 6\" releaseYear: 2014 rating: 7.8 director_1: \"Don Hall\" director_2: \"Chris Williams\" Part 2: Use the for-in loop to iterate through the movie object's attributes, printing them each time. Part 3: In the same for/in loop, implement a check such that only the attributes containing string values are printed in the console.","title":"Task 6"},{"location":"archive/202108/lab07/","text":"Practical 07: Introduction to PHP and LAMP Web Server Unlike JavaScript, PHP is a back-end scripting language that involves interacting with a server for information exchange. One of the useful applications of using PHP in web development includes form data collection and processing. Getting Started To carry on with programming in PHP, you will require an Apache server installed in your local machine. Not only that, this server will also need to contain PHP and a few database software. In short, you will need what is often referred as a LAMP stack. Fortunately, one may find the LAMP stack already bundled in various packages like XAMPP. XAMPP is available across multiple platforms, including Windows, macOS and Linux. Head here to obtain the XAMPP installer: XAMPP Installer Installing LAMP Stack from Scratch (for macOS Users only) If you're feeling adventurous or if all the LAMP stack packages are giving you problems during installation, head over to my guide on how to install each component separately on your machine here: Setting Up LAMP Stack in macOS (The Hard Way) :::warning NOTE Should you choose this route for installing your LAMP stack, don't follow the rest of this practical's guide. The separate guide will detail different steps to testing everything you install. ::: XAMPP Control Panel The XAMPP Control Panel should look something like this: The only two items that you need turned on is Apache and MySQL . The rest are not necessary. IMPORTANT: Location of Project Files for PHP Development Upon installation, the location of the XAMPP web server files in Windows is in C:\\xampp by default. On macOS, XAMPP acts like an external volume that has to be mounted each time you need to use it. Pay close attention to where a folder called htdocs is. Unlike previously when you can basically open your HTML files from just about anywhere in your local machine, PHP files will only work within the server file directory. In particular, you will need to stash your project files inside a folder named htdocs from now on. First PHP Script Ensure that both the Apache server and the MySQL are running as according to the contol panel. Inside the htdocs folder, create a PHP file named test.php . In this file, enter the following script: <?php echo \"<h1>It works!</h1>\" ; If you type in localhost/test.php into the browser's address bar, you should see the following: In order to access pages from the htdocs folder from your web browser, you will need to start with localhost before the filename. The method of accessing files in subfolders still apply (to get into index.php in a subfolder called test in htdocs , type localhost/test/index.php ).","title":"Practical 07: Introduction to PHP and LAMP Web Server"},{"location":"archive/202108/lab07/#practical-07-introduction-to-php-and-lamp-web-server","text":"Unlike JavaScript, PHP is a back-end scripting language that involves interacting with a server for information exchange. One of the useful applications of using PHP in web development includes form data collection and processing.","title":"Practical 07: Introduction to PHP and LAMP Web Server"},{"location":"archive/202108/lab07/#getting-started","text":"To carry on with programming in PHP, you will require an Apache server installed in your local machine. Not only that, this server will also need to contain PHP and a few database software. In short, you will need what is often referred as a LAMP stack. Fortunately, one may find the LAMP stack already bundled in various packages like XAMPP. XAMPP is available across multiple platforms, including Windows, macOS and Linux. Head here to obtain the XAMPP installer: XAMPP Installer","title":"Getting Started"},{"location":"archive/202108/lab07/#installing-lamp-stack-from-scratch-for-macos-users-only","text":"If you're feeling adventurous or if all the LAMP stack packages are giving you problems during installation, head over to my guide on how to install each component separately on your machine here: Setting Up LAMP Stack in macOS (The Hard Way) :::warning NOTE Should you choose this route for installing your LAMP stack, don't follow the rest of this practical's guide. The separate guide will detail different steps to testing everything you install. :::","title":"Installing LAMP Stack from Scratch (for macOS Users only)"},{"location":"archive/202108/lab07/#xampp-control-panel","text":"The XAMPP Control Panel should look something like this: The only two items that you need turned on is Apache and MySQL . The rest are not necessary.","title":"XAMPP Control Panel"},{"location":"archive/202108/lab07/#important-location-of-project-files-for-php-development","text":"Upon installation, the location of the XAMPP web server files in Windows is in C:\\xampp by default. On macOS, XAMPP acts like an external volume that has to be mounted each time you need to use it. Pay close attention to where a folder called htdocs is. Unlike previously when you can basically open your HTML files from just about anywhere in your local machine, PHP files will only work within the server file directory. In particular, you will need to stash your project files inside a folder named htdocs from now on.","title":"IMPORTANT: Location of Project Files for PHP Development"},{"location":"archive/202108/lab07/#first-php-script","text":"Ensure that both the Apache server and the MySQL are running as according to the contol panel. Inside the htdocs folder, create a PHP file named test.php . In this file, enter the following script: <?php echo \"<h1>It works!</h1>\" ; If you type in localhost/test.php into the browser's address bar, you should see the following: In order to access pages from the htdocs folder from your web browser, you will need to start with localhost before the filename. The method of accessing files in subfolders still apply (to get into index.php in a subfolder called test in htdocs , type localhost/test/index.php ).","title":"First PHP Script"},{"location":"archive/202108/lab08/","text":"Practical 08: Introducing PHP into Forms In this practical activity, we will be implementing an order form for Wendy's Bakery, a fictional bakery company. Right now, Wendy's HTML programmer has gotten as far as setting up an order for for the cakes Wendy sells. The order form is shown as in the figure below. This is a relatively simple order form, similar to many which you hve probably seen while surfing. The first thing Wendy would like to be able to do is to know what her customer ordered, work out the total of the customer's order, and how much sales tax is payable on the order. Part of the HTML for this is shown in Listing 1. In the form, we have set the form's action to be the name of the PHP script that will process the customer's order and also the name of the form fields. Listing 1 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 < form action = \"process-order.php\" method = \"post\" > < table > < tr > < th > Item </ th > < th > Quantity </ th > </ tr > < tr > < td > Cupcakes </ td > < td > < input type = \"text\" name = \"cupcakeqty\" size = \"3\" maxlength = \"3\" /> </ td > </ tr > < tr > < td > Puffs </ td > < td > < input type = \"text\" name = \"puffqty\" size = \"3\" maxlength = \"3\" /> </ td > </ tr > < tr > < td > Muffins </ td > < td > < input type = \"text\" name = \"muffinqty\" size = \"3\" maxlength = \"3\" /> </ td > </ tr > < tr > < td colspan = \"2\" > < input type = \"submit\" value = \"Submit Order\" /> </ td > </ tr > </ table > </ form > We'll proceed to create our PHP file surrounding this form element. Task 1: Embedding PHP in HTML To process the form, we'll need to create the script mentioned in the action attribute of the <form> tag called process-order.php . Prepare process-order.php starting off with the following HTML code: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 <!DOCTYPE html> < html > < head > < meta charset = \"UTF-8\" /> < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" /> < title > Wendy's Bakery - Order Form </ title > < style > . font-bold { font-weight : bold ; } thead tr { /* table tr:first-of-type { */ background-color : #cccccc ; } th , td { padding : 0.5 rem 1.5 rem ; } form td { text-align : center ; } # freight-table tbody td { text-align : right ; } # order-details { margin-bottom : 1 rem ; } </ style > </ head > < body > < h1 > Wendy's Bakery </ h1 > < h2 > Order Results </ h2 > <!-- Listing 1 goes here --> </ body > </ html > Task 2: Conditional Display of Information Modify process-order.php such that it displays the following when the order form is filled and the Submit button is clicked on. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 <?php if ( $_SERVER [ 'REQUEST_METHOD' ] == 'POST' ) { // If a form with POST superglobal variable is sent, display this message echo \"<p>Order processed</p>\" ; } else { /** * NOTE: * You can break through to HTML in the middle of a PHP block, * especially if you have a lot of HTML elements to display under * set conditions. */ ?> <!-- Listing 1 goes here --> <?php } ?> Task 3: Adding Dynamic Content Modify process-order.php to display the date and time when the form was submitted. 1 2 3 4 5 6 7 8 9 10 <?php if ( $_SERVER [ 'REQUEST_METHOD' ] == 'POST' ) { // If a form with POST superglobal variable is sent, display this message echo \"<p>Order processed on \" . <?= date ( \"F jS Y, l, H:i:s\" ); ?> . \"</p>\"; } else { ?> <!-- Listing 1 goes here --> <?php } ?> DateTime in PHP Read more here: PHP DateTime Task 4: Accessing Variables Within the same PHP script, add some lines to display the customer's order list. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 <?php if ( $_SERVER [ 'REQUEST_METHOD' ] == 'POST' ) { // If a form with POST superglobal variable is sent, display this message echo \"<p>Order processed on \" . date ( \"F jS Y, l, H:i:s\" ); . \"</p>\" ; ?> <p class=\"font-bold\">Your order is as follows:</p> <p> 20 cupcakes<br> 10 puffs<br> 15 muffins </p> <?php } else { ?> <!-- Listing 1 goes here --> <?php } ?> Task 5: Assigning Values to Variables On Wendy's site, we want to work out the total number of items ordered and the total amount payable. Assume the prices of each item are as follows: Cupcake = $2.50 Puff = $3.00 Muffin = $4.00 Sales Tax = 6% of the total amount Within the same script, add some lines to display the following additional output: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 <?php if ( $_SERVER [ 'REQUEST_METHOD' ] == 'POST' ) { // If a form with POST superglobal variable is sent, display this message echo \"<p>Order processed on \" . <?= date ( \"F jS Y, l, H:i:s\" ); ?> . \"</p>\"; ?> <p class=\"font-bold\">Your order is as follows:</p> <p> 20 cupcakes<br> 10 puffs<br> 15 muffins </p> <p> Items Ordered: 3<br> Subtotal: $140.00<br> Total including tax: $148.40<br> </p> <?php } else { ?> <!-- Listing 1 goes here --> <?php } ?> Task 6: Making Decisions with Conditionals Modify the script such that it alerts if the customer has not ordered anything from Wendy. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 <?php if ( $_SERVER [ 'REQUEST_METHOD' ] == 'POST' ) { // If a form with POST superglobal variable is sent, display this message echo \"<p>Order processed on \" . date ( \"F jS Y, l, H:i:s\" ) . \"</p>\" ; if ( $_POST [ \"cupcakeqty\" ] === \"\" && $_POST [ \"puffqty\" ] === \"\" && $_POST [ \"muffinqty\" ] === \"\" ) : // Display message if nothing has been ordered ?> <p>You did not order anything from the previous page!</p> <?php else : ?> <p class=\"font-bold\">Your order is as follows:</p> <p> 20 cupcakes<br> 10 puffs<br> 15 muffins </p> <p> Items Ordered: 3<br> Subtotal: $140.00<br> Total including tax: $148.40<br> </p> <?php endif ; } else { ?> <!-- Listing 1 goes here --> <?php } ?> Otherwise, the script should display the items the customer ordered from Wendy. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 <?php if ( $_SERVER [ 'REQUEST_METHOD' ] == 'POST' ) { // If a form with POST superglobal variable is sent, display this message echo \"<p>Order processed on \" . date ( \"F jS Y, l, H:i:s\" ) . \"</p>\" ; if ( $_POST [ \"cupcakeqty\" ] === \"\" && $_POST [ \"puffqty\" ] === \"\" && $_POST [ \"muffinqty\" ] === \"\" ) : // Display message if nothing has been ordered ?> <p>You did not order anything from the previous page!</p> <?php else : $qty = array (); if ( $_POST [ \"cupcakeqty\" ] !== \"\" ) $qty [ \"cupcake\" ] = ( int )( $_POST [ \"cupcakeqty\" ]); // cupcake quantity if ( $_POST [ \"puffqty\" ] !== \"\" ) $qty [ \"puff\" ] = ( int )( $_POST [ \"puffqty\" ]); // puff quantity if ( $_POST [ \"muffinqty\" ] !== \"\" ) $qty [ \"muffin\" ] = ( int )( $_POST [ \"muffinqty\" ]); // muffin quantity ?> <p class=\"font-bold\">Your order is as follows:</p> <p> <? = $qty [ \"cupcake\" ]; ?> cupcakes<br> <? = $qty [ \"puff\" ]; ?> puffs<br> <? = $qty [ \"muffin\" ]; ?> muffins </p> <p> Items Ordered: <? = sizeof ( $qty ); ?> <?php $price = [ \"cupcake\" => 2.50 , \"puff\" => 3 , \"muffin\" => 4 ]; $subtotal = $qty [ \"cupcake\" ] * $price [ \"cupcake\" ] + $qty [ \"puff\" ] * $price [ \"puff\" ] + $qty [ \"muffin\" ] * $price [ \"muffin\" ]; $total = $subtotal * 1.06 ; ?> Subtotal: $ <? = number_format ( $subtotal , 2 ); ?> <br> Total including tax: $ <? = number_format ( $total , 2 ); ?> <br> </p> <?php endif ; } else { ?> <!-- Listing 1 goes here --> <?php } ?> Note You may have noticed that there are some errors when you only fill up the form partially (to make it such that you only want some of the items, not all). Try to find a way to circumvent this issue (i.e., by placing an if statement, modifying the form input element, etc.). See if you can find any loopholes in the web application at this point and look to see if you can fix them as much as possible. Task 7: elseif Statements Wendy provides discounts for large orders of cupcakes. Less than 10 cupcakes: no discount 10-49 cupcakes: 5% discount 50-99 cupcakes: 10% discount \u2265100 cupcakes: 20% discount Modify process-order.php such that it calculates the discount using conditions and if-else and elseif statements. Task 8: switch Statements Wendy wants to know what forms of advertising are working for her. Insert a <select> element to the form to retrieve that information. < tr > < td colspan = \"2\" > < p >< label for = \"find\" > How did you find Wendy's? </ label ></ p > < select name = \"find\" id = \"find\" > < option disabled selected > Select option </ option > < option value = \"a\" > I am a regular customer. </ option > < option value = \"b\" > TV Advertising </ option > < option value = \"c\" > Phone Directory </ option > < option value = \"d\" > Word of Mouth </ option > </ select > </ td > </ tr > Use the appropriate selection statements to handle the variables and display the information in process-order.php . Task 9: Iteration and Repeating Actions Wendy wants a table displaying the freight cost that is to be added to the customer's order. With the courier Wendy's uses, the cost of freight depends on the distance the parcel is being shipped. We want our freight table to resemble the following: Generate the same freight table using loop structures. <table id=\"freight-table\"> <thead> <tr> <th>Distance</th> <th>Cost</th> </tr> </thead> <tbody> <?php $freight = [ [ \"distance\" => 50 , \"cost\" => 5 ], [ \"distance\" => 100 , \"cost\" => 10 ], [ \"distance\" => 150 , \"cost\" => 15 ], [ \"distance\" => 200 , \"cost\" => 20 ], [ \"distance\" => 250 , \"cost\" => 25 ], ]; // var_dump($freight); foreach ( $freight as $f ) { ?> <tr> <td> <? = $f [ \"distance\" ]; ?> </td> <td> <? = $f [ \"cost\" ]; ?> </td> </tr> <?php } ?> </tbody> </table>","title":"Practical 08: Introducing PHP into Forms"},{"location":"archive/202108/lab08/#practical-08-introducing-php-into-forms","text":"In this practical activity, we will be implementing an order form for Wendy's Bakery, a fictional bakery company. Right now, Wendy's HTML programmer has gotten as far as setting up an order for for the cakes Wendy sells. The order form is shown as in the figure below. This is a relatively simple order form, similar to many which you hve probably seen while surfing. The first thing Wendy would like to be able to do is to know what her customer ordered, work out the total of the customer's order, and how much sales tax is payable on the order. Part of the HTML for this is shown in Listing 1. In the form, we have set the form's action to be the name of the PHP script that will process the customer's order and also the name of the form fields.","title":"Practical 08: Introducing PHP into Forms"},{"location":"archive/202108/lab08/#listing-1","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 < form action = \"process-order.php\" method = \"post\" > < table > < tr > < th > Item </ th > < th > Quantity </ th > </ tr > < tr > < td > Cupcakes </ td > < td > < input type = \"text\" name = \"cupcakeqty\" size = \"3\" maxlength = \"3\" /> </ td > </ tr > < tr > < td > Puffs </ td > < td > < input type = \"text\" name = \"puffqty\" size = \"3\" maxlength = \"3\" /> </ td > </ tr > < tr > < td > Muffins </ td > < td > < input type = \"text\" name = \"muffinqty\" size = \"3\" maxlength = \"3\" /> </ td > </ tr > < tr > < td colspan = \"2\" > < input type = \"submit\" value = \"Submit Order\" /> </ td > </ tr > </ table > </ form > We'll proceed to create our PHP file surrounding this form element.","title":"Listing 1"},{"location":"archive/202108/lab08/#task-1-embedding-php-in-html","text":"To process the form, we'll need to create the script mentioned in the action attribute of the <form> tag called process-order.php . Prepare process-order.php starting off with the following HTML code: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 <!DOCTYPE html> < html > < head > < meta charset = \"UTF-8\" /> < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" /> < title > Wendy's Bakery - Order Form </ title > < style > . font-bold { font-weight : bold ; } thead tr { /* table tr:first-of-type { */ background-color : #cccccc ; } th , td { padding : 0.5 rem 1.5 rem ; } form td { text-align : center ; } # freight-table tbody td { text-align : right ; } # order-details { margin-bottom : 1 rem ; } </ style > </ head > < body > < h1 > Wendy's Bakery </ h1 > < h2 > Order Results </ h2 > <!-- Listing 1 goes here --> </ body > </ html >","title":"Task 1: Embedding PHP in HTML"},{"location":"archive/202108/lab08/#task-2-conditional-display-of-information","text":"Modify process-order.php such that it displays the following when the order form is filled and the Submit button is clicked on. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 <?php if ( $_SERVER [ 'REQUEST_METHOD' ] == 'POST' ) { // If a form with POST superglobal variable is sent, display this message echo \"<p>Order processed</p>\" ; } else { /** * NOTE: * You can break through to HTML in the middle of a PHP block, * especially if you have a lot of HTML elements to display under * set conditions. */ ?> <!-- Listing 1 goes here --> <?php } ?>","title":"Task 2: Conditional Display of Information"},{"location":"archive/202108/lab08/#task-3-adding-dynamic-content","text":"Modify process-order.php to display the date and time when the form was submitted. 1 2 3 4 5 6 7 8 9 10 <?php if ( $_SERVER [ 'REQUEST_METHOD' ] == 'POST' ) { // If a form with POST superglobal variable is sent, display this message echo \"<p>Order processed on \" . <?= date ( \"F jS Y, l, H:i:s\" ); ?> . \"</p>\"; } else { ?> <!-- Listing 1 goes here --> <?php } ?> DateTime in PHP Read more here: PHP DateTime","title":"Task 3: Adding Dynamic Content"},{"location":"archive/202108/lab08/#task-4-accessing-variables","text":"Within the same PHP script, add some lines to display the customer's order list. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 <?php if ( $_SERVER [ 'REQUEST_METHOD' ] == 'POST' ) { // If a form with POST superglobal variable is sent, display this message echo \"<p>Order processed on \" . date ( \"F jS Y, l, H:i:s\" ); . \"</p>\" ; ?> <p class=\"font-bold\">Your order is as follows:</p> <p> 20 cupcakes<br> 10 puffs<br> 15 muffins </p> <?php } else { ?> <!-- Listing 1 goes here --> <?php } ?>","title":"Task 4: Accessing Variables"},{"location":"archive/202108/lab08/#task-5-assigning-values-to-variables","text":"On Wendy's site, we want to work out the total number of items ordered and the total amount payable. Assume the prices of each item are as follows: Cupcake = $2.50 Puff = $3.00 Muffin = $4.00 Sales Tax = 6% of the total amount Within the same script, add some lines to display the following additional output: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 <?php if ( $_SERVER [ 'REQUEST_METHOD' ] == 'POST' ) { // If a form with POST superglobal variable is sent, display this message echo \"<p>Order processed on \" . <?= date ( \"F jS Y, l, H:i:s\" ); ?> . \"</p>\"; ?> <p class=\"font-bold\">Your order is as follows:</p> <p> 20 cupcakes<br> 10 puffs<br> 15 muffins </p> <p> Items Ordered: 3<br> Subtotal: $140.00<br> Total including tax: $148.40<br> </p> <?php } else { ?> <!-- Listing 1 goes here --> <?php } ?>","title":"Task 5: Assigning Values to Variables"},{"location":"archive/202108/lab08/#task-6-making-decisions-with-conditionals","text":"Modify the script such that it alerts if the customer has not ordered anything from Wendy. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 <?php if ( $_SERVER [ 'REQUEST_METHOD' ] == 'POST' ) { // If a form with POST superglobal variable is sent, display this message echo \"<p>Order processed on \" . date ( \"F jS Y, l, H:i:s\" ) . \"</p>\" ; if ( $_POST [ \"cupcakeqty\" ] === \"\" && $_POST [ \"puffqty\" ] === \"\" && $_POST [ \"muffinqty\" ] === \"\" ) : // Display message if nothing has been ordered ?> <p>You did not order anything from the previous page!</p> <?php else : ?> <p class=\"font-bold\">Your order is as follows:</p> <p> 20 cupcakes<br> 10 puffs<br> 15 muffins </p> <p> Items Ordered: 3<br> Subtotal: $140.00<br> Total including tax: $148.40<br> </p> <?php endif ; } else { ?> <!-- Listing 1 goes here --> <?php } ?> Otherwise, the script should display the items the customer ordered from Wendy. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 <?php if ( $_SERVER [ 'REQUEST_METHOD' ] == 'POST' ) { // If a form with POST superglobal variable is sent, display this message echo \"<p>Order processed on \" . date ( \"F jS Y, l, H:i:s\" ) . \"</p>\" ; if ( $_POST [ \"cupcakeqty\" ] === \"\" && $_POST [ \"puffqty\" ] === \"\" && $_POST [ \"muffinqty\" ] === \"\" ) : // Display message if nothing has been ordered ?> <p>You did not order anything from the previous page!</p> <?php else : $qty = array (); if ( $_POST [ \"cupcakeqty\" ] !== \"\" ) $qty [ \"cupcake\" ] = ( int )( $_POST [ \"cupcakeqty\" ]); // cupcake quantity if ( $_POST [ \"puffqty\" ] !== \"\" ) $qty [ \"puff\" ] = ( int )( $_POST [ \"puffqty\" ]); // puff quantity if ( $_POST [ \"muffinqty\" ] !== \"\" ) $qty [ \"muffin\" ] = ( int )( $_POST [ \"muffinqty\" ]); // muffin quantity ?> <p class=\"font-bold\">Your order is as follows:</p> <p> <? = $qty [ \"cupcake\" ]; ?> cupcakes<br> <? = $qty [ \"puff\" ]; ?> puffs<br> <? = $qty [ \"muffin\" ]; ?> muffins </p> <p> Items Ordered: <? = sizeof ( $qty ); ?> <?php $price = [ \"cupcake\" => 2.50 , \"puff\" => 3 , \"muffin\" => 4 ]; $subtotal = $qty [ \"cupcake\" ] * $price [ \"cupcake\" ] + $qty [ \"puff\" ] * $price [ \"puff\" ] + $qty [ \"muffin\" ] * $price [ \"muffin\" ]; $total = $subtotal * 1.06 ; ?> Subtotal: $ <? = number_format ( $subtotal , 2 ); ?> <br> Total including tax: $ <? = number_format ( $total , 2 ); ?> <br> </p> <?php endif ; } else { ?> <!-- Listing 1 goes here --> <?php } ?> Note You may have noticed that there are some errors when you only fill up the form partially (to make it such that you only want some of the items, not all). Try to find a way to circumvent this issue (i.e., by placing an if statement, modifying the form input element, etc.). See if you can find any loopholes in the web application at this point and look to see if you can fix them as much as possible.","title":"Task 6: Making Decisions with Conditionals"},{"location":"archive/202108/lab08/#task-7-elseif-statements","text":"Wendy provides discounts for large orders of cupcakes. Less than 10 cupcakes: no discount 10-49 cupcakes: 5% discount 50-99 cupcakes: 10% discount \u2265100 cupcakes: 20% discount Modify process-order.php such that it calculates the discount using conditions and if-else and elseif statements.","title":"Task 7: elseif Statements"},{"location":"archive/202108/lab08/#task-8-switch-statements","text":"Wendy wants to know what forms of advertising are working for her. Insert a <select> element to the form to retrieve that information. < tr > < td colspan = \"2\" > < p >< label for = \"find\" > How did you find Wendy's? </ label ></ p > < select name = \"find\" id = \"find\" > < option disabled selected > Select option </ option > < option value = \"a\" > I am a regular customer. </ option > < option value = \"b\" > TV Advertising </ option > < option value = \"c\" > Phone Directory </ option > < option value = \"d\" > Word of Mouth </ option > </ select > </ td > </ tr > Use the appropriate selection statements to handle the variables and display the information in process-order.php .","title":"Task 8: switch Statements"},{"location":"archive/202108/lab08/#task-9-iteration-and-repeating-actions","text":"Wendy wants a table displaying the freight cost that is to be added to the customer's order. With the courier Wendy's uses, the cost of freight depends on the distance the parcel is being shipped. We want our freight table to resemble the following: Generate the same freight table using loop structures. <table id=\"freight-table\"> <thead> <tr> <th>Distance</th> <th>Cost</th> </tr> </thead> <tbody> <?php $freight = [ [ \"distance\" => 50 , \"cost\" => 5 ], [ \"distance\" => 100 , \"cost\" => 10 ], [ \"distance\" => 150 , \"cost\" => 15 ], [ \"distance\" => 200 , \"cost\" => 20 ], [ \"distance\" => 250 , \"cost\" => 25 ], ]; // var_dump($freight); foreach ( $freight as $f ) { ?> <tr> <td> <? = $f [ \"distance\" ]; ?> </td> <td> <? = $f [ \"cost\" ]; ?> </td> </tr> <?php } ?> </tbody> </table>","title":"Task 9: Iteration and Repeating Actions"},{"location":"archive/202108/lab09/","text":"Practical 09: PHP Forms and Sessions In this practical activity, we will be creating a dummy login system that utilizes sessions. This will not utilize database connectivity just yet, but you should be able to piece them together once the lessons on those start next week. Preparation CSS and JS files are to be kept in their own separate subfolders. css/style.css 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 @ import url ( \"https://fonts.googleapis.com/css2?family=Open+Sans:ital,wght@0,300;0,400;0,500;0,600;0,700;0,800;1,300;1,400;1,500;1,600;1,700;1,800&display=swap\" ) ; : root { --form-size : 400 px ; --normal-text-size : 20 px ; } * { font-family : \"Open Sans\" , sans-serif ; } body { background-color : beige ; } button , input { border : none ; font-size : var ( --normal-text-size ); margin : 1 rem 0 ; } # container { background-color : bisque ; border : 2 px dashed orangered ; border-radius : 2 rem ; margin : 10 rem auto 0 ; max-width : 750 px ; min-width : var ( --form-size ); padding : 2 rem ; text-align : center ; } p # error { color : red ; font-size : var ( --normal-text-size ); } input # username , input [ type = \"password\" ] { border-radius : 0.5 rem ; max-width : 100 % ; min-width : var ( --form-size ); padding : 0.5 rem ; text-align : center ; width : 75 % ; } button # logout , input [ type = \"submit\" ], input [ type = \"reset\" ] { border-radius : 2 rem ; padding : 0.5 rem 1 rem ; } input # username : hover , input [ type = \"password\" ] : hover { box-shadow : 0 0 1 rem orange , 0 0 2 rem lightsalmon ; } input # username : focus , input [ type = \"password\" ] : focus , input [ type = \"button\" ] : hover , input [ type = \"submit\" ] : hover , input [ type = \"reset\" ] : hover { box-shadow : 0 0 1 rem orange , 0 0 2 rem lightsalmon , 0 0 4 rem darkorange ; } button # logout : hover { background-color : rgba ( 220 , 20 , 60 , 0.75 ); box-shadow : 0 0 1 rem red , 0 0 2 rem lightcoral , 0 0 4 rem maroon ; color : white ; font-weight : bold ; } js/script.js if ( document . querySelector ( \"#logout\" )) { document . querySelector ( \"#logout\" ). addEventListener ( \"click\" , () => { const response = confirm ( \"Confirm logout?\" ); if ( response ) window . location . href = \"logout.php\" ; }); } credentials.php <?php $username = \"root\" ; $pw = \"Welovepasswords123\" ; ?> index.php 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" /> < meta http-equiv = \"X-UA-Compatible\" content = \"IE=edge\" /> < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" /> < title > Login Example </ title > < link rel = \"stylesheet\" href = \"css/style.css\" /> </ head > < body > < section id = \"container\" > < h1 > Login Page </ h1 > < form action = \".\" method = \"post\" > < p id = \"error\" ></ p > < input type = \"text\" name = \"username\" id = \"username\" placeholder = \"Username\" />< br /> < input type = \"password\" name = \"password\" id = \"password\" placeholder = \"Password\" />< br /> < input type = \"submit\" value = \"Log In\" /> < input type = \"reset\" value = \"Reset\" /> </ form > </ section > < script src = \"js/index.js\" ></ script > </ body > </ html > Task 1: Checking Credentials Our credentials are kept in a separate file named credentials.php . We can append it to index.php by introducing the following on top: <?php require_once \"credentials.php\" ; ?> require_once is a command that appends contents of a HTML or PHP file to wherever it is called. In this case, credentials.php is appended at the beginning of the webpage. There are other variants of this command: include_once is the same as require_once , but it does not halt the other webpage items from being loaded if the file doesn't exist. include and require are different from include_once and require_once respectively in the sense of how many times they are allowed to be appended to the page. Now that we have our credentials appended at the top, we can now proceed to carry out form validation. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 <?php session_start (); require_once \"credentials.php\" ; // flag to indicate whether credentials match (i.e., false) or not (i.e., TRUE) $invalid_login = false ; if ( $_SERVER [ \"REQUEST_METHOD\" ] == \"POST\" ) { // check credentials first if ( $_POST [ \"username\" ] === $username && $_POST [ \"password\" ] === $pw ) { $_SESSION [ \"username\" ] = $_POST [ \"username\" ]; } else $invalid_login = true ; } // var_dump($_SESSION); ?> var_dump is useful if you would like to test if your credential checking is working as intended or not based on your $_POST superglobal variables. Uncomment the var_dump line if you would like to carry out this checking, but its output should not be visible in the end result. We are adding the sessions_start() line on top to introduce session variables if the credentials match. This will be worked on more in the next task, but what's important now is that we create a new session variable called $_SESSION[\"username\"] which will contain the username value entered into the form. As for when the credentials do not match, we have a flag variable named $invalid_login which indicates if the credentials match or not. We will utilize this to display a message in our p#error element in the form to alert users if the credentials do not match. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 <form action=\".\" method=\"post\"> <p id=\"error\"> <?php if ( $invalid_login ) : ?> Invalid credentials! <?php endif ; ?> </p> <input type=\"text\" name=\"username\" id=\"username\" placeholder=\"Username\" /><br /> <input type=\"password\" name=\"password\" id=\"password\" placeholder=\"Password\" /><br /> <input type=\"submit\" value=\"Log In\" /> <input type=\"reset\" value=\"Reset\" /> </form> The if statement syntax used here is different from that of most languages, but it works especially if you plan on printing large and/or complex lines of HTML. Your page should now display a paragraph containing the alert message like as follows: Now, let's replace the contents inside section#container to display something else if the credentials are correct (and consequently giving the illusion that you're logged in). We will carry this out through utilizing an if-else statement. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 <section id=\"container\"> <?php if ( isset ( $_SESSION [ \"username\" ])) : ?> <h1>Hello, <? = $_SESSION [ \"username\" ]; ?> !</h1> <p id=\"time\"></p> <button id=\"logout\">Log Out</button> <?php else : ?> <h1>Login Page</h1> <form action=\".\" method=\"post\"> <p id=\"error\"> <?php if ( $invalid_login ) : ?> Invalid credentials! <?php endif ; ?> </p> <input type=\"text\" name=\"username\" id=\"username\" placeholder=\"Username\"><br> <input type=\"password\" name=\"password\" id=\"password\" placeholder=\"Password\"><br> <input type=\"submit\" value=\"Log In\"> <input type=\"reset\" value=\"Reset\"> </form> <?php endif ; ?> </section> Depending on whether $_SESSION[\"username\"] has been defined or not, either the form or the following gets displayed: Here, when the user is \"logged in\", we now have a greeting on display with the entered username. At the bottom of that greeting line, we also have a log out button. Task 2: Implementing Logout Feature Session variables get carried across multiple webpages, so long as they have the line session_start() on top of the page - this is compulsory. In the end, however, all good things have to come to an end - this also includes logged-in sessions. The logout button included has an onclick attribute which redirects the browser to another page called logout.php . logout.php will contain a simple script to log a user out. The contents of this script are as follows: <?php session_start (); session_unset (); session_destroy (); header ( \"Location: .\" ); ?> The simple logout process works in 3 steps: Start the session with session_start() . Unset all session variables with session_unset() . Destroy the session using session_destroy() . One main reason why session_destroy() does not settle everything without session_unset() is that it only destroys the session, but any session data is still kept around. Think of it as a job not completely done properly in such case. The fourth line (i.e., header(\"Location: .\"); ) redirects the user immediately back to index.php . This can also be achieved if you were to type in header(\"Location: index.php\"); . Using a period punctuation here points to the current directory, and browsers will automatically search for any file named index.php or index.html by default. With this, you will find that you will immediately be sent back to index.php without viewing anything in logout.php .. not that it contains any visual content to be displayed in the browser to begin with. Extra Task: Timeout Modify the web application such that it will log you out upon refreshing the page after 5 minutes of inactivity.","title":"Practical 09: PHP Forms and Sessions"},{"location":"archive/202108/lab09/#practical-09-php-forms-and-sessions","text":"In this practical activity, we will be creating a dummy login system that utilizes sessions. This will not utilize database connectivity just yet, but you should be able to piece them together once the lessons on those start next week.","title":"Practical 09: PHP Forms and Sessions"},{"location":"archive/202108/lab09/#preparation","text":"CSS and JS files are to be kept in their own separate subfolders. css/style.css 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 @ import url ( \"https://fonts.googleapis.com/css2?family=Open+Sans:ital,wght@0,300;0,400;0,500;0,600;0,700;0,800;1,300;1,400;1,500;1,600;1,700;1,800&display=swap\" ) ; : root { --form-size : 400 px ; --normal-text-size : 20 px ; } * { font-family : \"Open Sans\" , sans-serif ; } body { background-color : beige ; } button , input { border : none ; font-size : var ( --normal-text-size ); margin : 1 rem 0 ; } # container { background-color : bisque ; border : 2 px dashed orangered ; border-radius : 2 rem ; margin : 10 rem auto 0 ; max-width : 750 px ; min-width : var ( --form-size ); padding : 2 rem ; text-align : center ; } p # error { color : red ; font-size : var ( --normal-text-size ); } input # username , input [ type = \"password\" ] { border-radius : 0.5 rem ; max-width : 100 % ; min-width : var ( --form-size ); padding : 0.5 rem ; text-align : center ; width : 75 % ; } button # logout , input [ type = \"submit\" ], input [ type = \"reset\" ] { border-radius : 2 rem ; padding : 0.5 rem 1 rem ; } input # username : hover , input [ type = \"password\" ] : hover { box-shadow : 0 0 1 rem orange , 0 0 2 rem lightsalmon ; } input # username : focus , input [ type = \"password\" ] : focus , input [ type = \"button\" ] : hover , input [ type = \"submit\" ] : hover , input [ type = \"reset\" ] : hover { box-shadow : 0 0 1 rem orange , 0 0 2 rem lightsalmon , 0 0 4 rem darkorange ; } button # logout : hover { background-color : rgba ( 220 , 20 , 60 , 0.75 ); box-shadow : 0 0 1 rem red , 0 0 2 rem lightcoral , 0 0 4 rem maroon ; color : white ; font-weight : bold ; } js/script.js if ( document . querySelector ( \"#logout\" )) { document . querySelector ( \"#logout\" ). addEventListener ( \"click\" , () => { const response = confirm ( \"Confirm logout?\" ); if ( response ) window . location . href = \"logout.php\" ; }); } credentials.php <?php $username = \"root\" ; $pw = \"Welovepasswords123\" ; ?> index.php 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" /> < meta http-equiv = \"X-UA-Compatible\" content = \"IE=edge\" /> < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" /> < title > Login Example </ title > < link rel = \"stylesheet\" href = \"css/style.css\" /> </ head > < body > < section id = \"container\" > < h1 > Login Page </ h1 > < form action = \".\" method = \"post\" > < p id = \"error\" ></ p > < input type = \"text\" name = \"username\" id = \"username\" placeholder = \"Username\" />< br /> < input type = \"password\" name = \"password\" id = \"password\" placeholder = \"Password\" />< br /> < input type = \"submit\" value = \"Log In\" /> < input type = \"reset\" value = \"Reset\" /> </ form > </ section > < script src = \"js/index.js\" ></ script > </ body > </ html >","title":"Preparation"},{"location":"archive/202108/lab09/#task-1-checking-credentials","text":"Our credentials are kept in a separate file named credentials.php . We can append it to index.php by introducing the following on top: <?php require_once \"credentials.php\" ; ?> require_once is a command that appends contents of a HTML or PHP file to wherever it is called. In this case, credentials.php is appended at the beginning of the webpage. There are other variants of this command: include_once is the same as require_once , but it does not halt the other webpage items from being loaded if the file doesn't exist. include and require are different from include_once and require_once respectively in the sense of how many times they are allowed to be appended to the page. Now that we have our credentials appended at the top, we can now proceed to carry out form validation. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 <?php session_start (); require_once \"credentials.php\" ; // flag to indicate whether credentials match (i.e., false) or not (i.e., TRUE) $invalid_login = false ; if ( $_SERVER [ \"REQUEST_METHOD\" ] == \"POST\" ) { // check credentials first if ( $_POST [ \"username\" ] === $username && $_POST [ \"password\" ] === $pw ) { $_SESSION [ \"username\" ] = $_POST [ \"username\" ]; } else $invalid_login = true ; } // var_dump($_SESSION); ?> var_dump is useful if you would like to test if your credential checking is working as intended or not based on your $_POST superglobal variables. Uncomment the var_dump line if you would like to carry out this checking, but its output should not be visible in the end result. We are adding the sessions_start() line on top to introduce session variables if the credentials match. This will be worked on more in the next task, but what's important now is that we create a new session variable called $_SESSION[\"username\"] which will contain the username value entered into the form. As for when the credentials do not match, we have a flag variable named $invalid_login which indicates if the credentials match or not. We will utilize this to display a message in our p#error element in the form to alert users if the credentials do not match. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 <form action=\".\" method=\"post\"> <p id=\"error\"> <?php if ( $invalid_login ) : ?> Invalid credentials! <?php endif ; ?> </p> <input type=\"text\" name=\"username\" id=\"username\" placeholder=\"Username\" /><br /> <input type=\"password\" name=\"password\" id=\"password\" placeholder=\"Password\" /><br /> <input type=\"submit\" value=\"Log In\" /> <input type=\"reset\" value=\"Reset\" /> </form> The if statement syntax used here is different from that of most languages, but it works especially if you plan on printing large and/or complex lines of HTML. Your page should now display a paragraph containing the alert message like as follows: Now, let's replace the contents inside section#container to display something else if the credentials are correct (and consequently giving the illusion that you're logged in). We will carry this out through utilizing an if-else statement. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 <section id=\"container\"> <?php if ( isset ( $_SESSION [ \"username\" ])) : ?> <h1>Hello, <? = $_SESSION [ \"username\" ]; ?> !</h1> <p id=\"time\"></p> <button id=\"logout\">Log Out</button> <?php else : ?> <h1>Login Page</h1> <form action=\".\" method=\"post\"> <p id=\"error\"> <?php if ( $invalid_login ) : ?> Invalid credentials! <?php endif ; ?> </p> <input type=\"text\" name=\"username\" id=\"username\" placeholder=\"Username\"><br> <input type=\"password\" name=\"password\" id=\"password\" placeholder=\"Password\"><br> <input type=\"submit\" value=\"Log In\"> <input type=\"reset\" value=\"Reset\"> </form> <?php endif ; ?> </section> Depending on whether $_SESSION[\"username\"] has been defined or not, either the form or the following gets displayed: Here, when the user is \"logged in\", we now have a greeting on display with the entered username. At the bottom of that greeting line, we also have a log out button.","title":"Task 1: Checking Credentials"},{"location":"archive/202108/lab09/#task-2-implementing-logout-feature","text":"Session variables get carried across multiple webpages, so long as they have the line session_start() on top of the page - this is compulsory. In the end, however, all good things have to come to an end - this also includes logged-in sessions. The logout button included has an onclick attribute which redirects the browser to another page called logout.php . logout.php will contain a simple script to log a user out. The contents of this script are as follows: <?php session_start (); session_unset (); session_destroy (); header ( \"Location: .\" ); ?> The simple logout process works in 3 steps: Start the session with session_start() . Unset all session variables with session_unset() . Destroy the session using session_destroy() . One main reason why session_destroy() does not settle everything without session_unset() is that it only destroys the session, but any session data is still kept around. Think of it as a job not completely done properly in such case. The fourth line (i.e., header(\"Location: .\"); ) redirects the user immediately back to index.php . This can also be achieved if you were to type in header(\"Location: index.php\"); . Using a period punctuation here points to the current directory, and browsers will automatically search for any file named index.php or index.html by default. With this, you will find that you will immediately be sent back to index.php without viewing anything in logout.php .. not that it contains any visual content to be displayed in the browser to begin with.","title":"Task 2: Implementing Logout Feature"},{"location":"archive/202108/lab09/#extra-task-timeout","text":"Modify the web application such that it will log you out upon refreshing the page after 5 minutes of inactivity.","title":"Extra Task: Timeout"},{"location":"archive/202108/lab10/","text":"Practical 10: Understanding MySQL Commands We will go through a small series of exercises to create tables in a MySQL/MariaDB database. For the purpose of this exercise, we will carry out everything in phpMyAdmin, but the SQL scripts can be run on a typical MySQL console. To access phpMyAdmin, type in localhost/phpmyadmin in your web browser's address bar. NOTE For those who installed each component of the LAMP stack individually including the MySQL database, ensure you remember your root user password. Starting Out in phpMyAdmin On the top menu bar, select \"SQL\". You should see an interface like as follows: This will be where we will be typing in our SQL scripts for today's practical exercise. Creating a New Database The basic syntax to create a new database is as follows: CREATE DATABASE < database_name > ; Let's create a database named exercise_db . We will create the database by entering the following script: CREATE DATABASE IF NOT EXISTS ` exercise_db ` ; Note that throughout my demo, I will be using backticks (`) to surround any names given to the database, tables and columns. This is completely optional. Upon running this command, you can only run it once as you can only create a database with a stated name if it already does not exist. The IF NOT EXISTS clause will make it such that the statement can be run multiple times instead of spititng out an error each time, but it also does nothing as a result. Select the \"Go\" button to execute the SQL statement, and a message from the database server should be displayed like as shown below: By now, the database should now be available to use - the database name should appear on the left hand side of the window. DROP DATABASES The opposite act of creating a database is referred as dropping a database. If you wish to drop the database, you have to use the following command script: DROP DATABASE IF EXISTS ` exercise_db ` ; The IF EXISTS clause works the same way as how the IF NOT EXISTS clause works for the CREATE TABLE statement - you can only drop a database if it actually exists in the database server. The general syntax for dropping a database is as follows: DROP DATABASE < database_name > ; Create a Table Right now, the database does not have any tables inside of it. Let's create a new table called Student that has the following columns: id: INT, AUTO_INCREMENT, NOT NULL, Primary Key first_name: VARCHAR(50), NOT NULL last_name: VARCHAR(50), NOT NULL age: INT(3), NOT NULL email: VARCHAR(255) active: BOOL, NOT NULL, DEFAULT is TRUE(1) Note: INT : integer value (default size 7); VARCHAR(50) : max 50 alphanumeric characters, BOOLEAN : boolean value We set id as our PRIMARY KEY of the table - this is a unique column which distinguishes each record/row from each other. AUTO_INCREMENT is often used with primary key columns so that they need not be defined when entering records. NOT NULL constraint makes a column unable to be empty in any record. The script to create this table is as follows. CREATE TABLE IF NOT EXISTS ` Student ` ( ` id ` INT NOT NULL AUTO_INCREMENT , ` first_name ` VARCHAR ( 50 ) NOT NULL , ` last_name ` VARCHAR ( 50 ) NOT NULL , ` age ` INT ( 3 ) NOT NULL , ` email ` VARCHAR ( 255 ), ` active ` BOOLEAN NOT NULL DEFAULT TRUE , PRIMARY KEY ( ` id ` ) ); You can view the database table contents by selecting the table name from the left-hand side menu in the browser window. Multiple Tables in Databases Yes, you are allowed to have multiple tables in your database (unless it's a SQLite database). In fact, there are mechanisms to simplify tables so that they don't require so many columns (i.e., normalization) and/or so that tables are linked together with foreign keys . We will not cover them in this module, but feel free to look up on how they work if you are curious! Dropping Tables Just like dropping databases, you can also drop a table if you want to recreate the table from scratch. DROP TABLE IF EXISTS ` Student ` ; Populating the Database Table Let's populate the table with some data. The following command script adds in one record of data in the database. INSERT INTO ` Student ` ( ` first_name ` , ` last_name ` , ` age ` , ` email ` , ` active ` ) VALUES ( \"Adam\" , \"Burns\" , 18 , \"adam_burns@gmail.com\" , 1 ); After running the given command, you should see the table being populated like as follows: Take note that with id being set to AUTO_INCREMENT , there's no need to specify the id value when adding new records (it will automatically start from 1 by default). However, you are still allowed to put in a custom id value if you so desire. Also, note that the active value is set to TRUE or 1 by default. In this case, you can shorten your SQL command to be like as follows and it should give the same result: INSERT INTO ` Student ` ( ` first_name ` , ` last_name ` , ` age ` , ` email ` ) VALUES ( \"Adam\" , \"Burns\" , 18 , \"adam_burns@gmail.com\" ); Task Populate the table with more records: id first_name last_name age email active 2 Karen Allen 19 karen_allen@outlook.com 1 3 Mark Weiss 24 hello@mweiss.com 0 4 Tyson Russell 16 ask@tyson.com 1 Updating Records in a Table Let's update Mark's record to say that he is now no longer inactive (i.e., active = 1). UPDATE ` Student ` SET ` active ` = 1 WHERE ` id ` = 3 ; Mark's record is indicated with id 3. As mentioned prior, we can make utilize this column to uniquely identify one record from the others. However, this is not restricted to just primary keys or unique columns like id . When feasible, one may also utilize other columns that are not unique to easily modify multiple records at once. Also, you can also have multiple conditions in your SQL script to further specify those columns to consider as well. The table contents should now look like the following: Task Run SQL commands to make the following changes: Adam has recently changed his e-mail to adam@burnings.com . Tyson is no longer an active student. Karen's age is to be updated to 20 instead of 19. Selecting Records from a Table By now, you should see the given SQL command script appear upon selecting the table in phpMyAdmin: SELECT * FROM ` Student ` ; * is representative of \"ALL\". The above syntax simply means to select all available records in Student . You can specify which records/rows to select by adding conditions. The following example will select the row(s) where the id value is equal to 2: SELECT * FROM ` Student ` WHERE ` id ` = 2 ; You can also make comparison conditions too when selecting columns. The following example will select only the first and last names of the row(s) where the age is greater than 21: SELECT ` first_name ` , ` last_name ` FROM ` Student ` WHERE ` age ` > 21 ; Task Populate the Student table with 4 more records. Select all students whose age is not greater than 20. Select all active students, displaying only the first_name , last_name , and email . Deleting Records from a Table Deleting records works the same as updating and selecting records - you can utilize IDs as indicators of which record(s) to delete. For example, if we want to delete Tyson's record, we can use the following command script: DELETE FROM ` Student ` WHERE ` id ` = 4 ; # Tyson ' s record id value is 4 The same rules for selecting which type of records based on what column(s) to update also apply to what column(s) to delete. Note about id Progression Now that we've deleted Tyson's record, if you are to add another record after, the id will not reassume as 4, but will continue after the number of the last record instead. Previously occupied id values that were used and deleted will not be used under AUTO_INCREMENT , but can be added manually if not occupied.","title":"Practical 10: Understanding MySQL Commands"},{"location":"archive/202108/lab10/#practical-10-understanding-mysql-commands","text":"We will go through a small series of exercises to create tables in a MySQL/MariaDB database. For the purpose of this exercise, we will carry out everything in phpMyAdmin, but the SQL scripts can be run on a typical MySQL console. To access phpMyAdmin, type in localhost/phpmyadmin in your web browser's address bar. NOTE For those who installed each component of the LAMP stack individually including the MySQL database, ensure you remember your root user password.","title":"Practical 10: Understanding MySQL Commands"},{"location":"archive/202108/lab10/#starting-out-in-phpmyadmin","text":"On the top menu bar, select \"SQL\". You should see an interface like as follows: This will be where we will be typing in our SQL scripts for today's practical exercise.","title":"Starting Out in phpMyAdmin"},{"location":"archive/202108/lab10/#creating-a-new-database","text":"The basic syntax to create a new database is as follows: CREATE DATABASE < database_name > ; Let's create a database named exercise_db . We will create the database by entering the following script: CREATE DATABASE IF NOT EXISTS ` exercise_db ` ; Note that throughout my demo, I will be using backticks (`) to surround any names given to the database, tables and columns. This is completely optional. Upon running this command, you can only run it once as you can only create a database with a stated name if it already does not exist. The IF NOT EXISTS clause will make it such that the statement can be run multiple times instead of spititng out an error each time, but it also does nothing as a result. Select the \"Go\" button to execute the SQL statement, and a message from the database server should be displayed like as shown below: By now, the database should now be available to use - the database name should appear on the left hand side of the window. DROP DATABASES The opposite act of creating a database is referred as dropping a database. If you wish to drop the database, you have to use the following command script: DROP DATABASE IF EXISTS ` exercise_db ` ; The IF EXISTS clause works the same way as how the IF NOT EXISTS clause works for the CREATE TABLE statement - you can only drop a database if it actually exists in the database server. The general syntax for dropping a database is as follows: DROP DATABASE < database_name > ;","title":"Creating a New Database"},{"location":"archive/202108/lab10/#create-a-table","text":"Right now, the database does not have any tables inside of it. Let's create a new table called Student that has the following columns: id: INT, AUTO_INCREMENT, NOT NULL, Primary Key first_name: VARCHAR(50), NOT NULL last_name: VARCHAR(50), NOT NULL age: INT(3), NOT NULL email: VARCHAR(255) active: BOOL, NOT NULL, DEFAULT is TRUE(1) Note: INT : integer value (default size 7); VARCHAR(50) : max 50 alphanumeric characters, BOOLEAN : boolean value We set id as our PRIMARY KEY of the table - this is a unique column which distinguishes each record/row from each other. AUTO_INCREMENT is often used with primary key columns so that they need not be defined when entering records. NOT NULL constraint makes a column unable to be empty in any record. The script to create this table is as follows. CREATE TABLE IF NOT EXISTS ` Student ` ( ` id ` INT NOT NULL AUTO_INCREMENT , ` first_name ` VARCHAR ( 50 ) NOT NULL , ` last_name ` VARCHAR ( 50 ) NOT NULL , ` age ` INT ( 3 ) NOT NULL , ` email ` VARCHAR ( 255 ), ` active ` BOOLEAN NOT NULL DEFAULT TRUE , PRIMARY KEY ( ` id ` ) ); You can view the database table contents by selecting the table name from the left-hand side menu in the browser window. Multiple Tables in Databases Yes, you are allowed to have multiple tables in your database (unless it's a SQLite database). In fact, there are mechanisms to simplify tables so that they don't require so many columns (i.e., normalization) and/or so that tables are linked together with foreign keys . We will not cover them in this module, but feel free to look up on how they work if you are curious! Dropping Tables Just like dropping databases, you can also drop a table if you want to recreate the table from scratch. DROP TABLE IF EXISTS ` Student ` ;","title":"Create a Table"},{"location":"archive/202108/lab10/#populating-the-database-table","text":"Let's populate the table with some data. The following command script adds in one record of data in the database. INSERT INTO ` Student ` ( ` first_name ` , ` last_name ` , ` age ` , ` email ` , ` active ` ) VALUES ( \"Adam\" , \"Burns\" , 18 , \"adam_burns@gmail.com\" , 1 ); After running the given command, you should see the table being populated like as follows: Take note that with id being set to AUTO_INCREMENT , there's no need to specify the id value when adding new records (it will automatically start from 1 by default). However, you are still allowed to put in a custom id value if you so desire. Also, note that the active value is set to TRUE or 1 by default. In this case, you can shorten your SQL command to be like as follows and it should give the same result: INSERT INTO ` Student ` ( ` first_name ` , ` last_name ` , ` age ` , ` email ` ) VALUES ( \"Adam\" , \"Burns\" , 18 , \"adam_burns@gmail.com\" );","title":"Populating the Database Table"},{"location":"archive/202108/lab10/#task","text":"Populate the table with more records: id first_name last_name age email active 2 Karen Allen 19 karen_allen@outlook.com 1 3 Mark Weiss 24 hello@mweiss.com 0 4 Tyson Russell 16 ask@tyson.com 1","title":"Task"},{"location":"archive/202108/lab10/#updating-records-in-a-table","text":"Let's update Mark's record to say that he is now no longer inactive (i.e., active = 1). UPDATE ` Student ` SET ` active ` = 1 WHERE ` id ` = 3 ; Mark's record is indicated with id 3. As mentioned prior, we can make utilize this column to uniquely identify one record from the others. However, this is not restricted to just primary keys or unique columns like id . When feasible, one may also utilize other columns that are not unique to easily modify multiple records at once. Also, you can also have multiple conditions in your SQL script to further specify those columns to consider as well. The table contents should now look like the following:","title":"Updating Records in a Table"},{"location":"archive/202108/lab10/#task_1","text":"Run SQL commands to make the following changes: Adam has recently changed his e-mail to adam@burnings.com . Tyson is no longer an active student. Karen's age is to be updated to 20 instead of 19.","title":"Task"},{"location":"archive/202108/lab10/#selecting-records-from-a-table","text":"By now, you should see the given SQL command script appear upon selecting the table in phpMyAdmin: SELECT * FROM ` Student ` ; * is representative of \"ALL\". The above syntax simply means to select all available records in Student . You can specify which records/rows to select by adding conditions. The following example will select the row(s) where the id value is equal to 2: SELECT * FROM ` Student ` WHERE ` id ` = 2 ; You can also make comparison conditions too when selecting columns. The following example will select only the first and last names of the row(s) where the age is greater than 21: SELECT ` first_name ` , ` last_name ` FROM ` Student ` WHERE ` age ` > 21 ;","title":"Selecting Records from a Table"},{"location":"archive/202108/lab10/#task_2","text":"Populate the Student table with 4 more records. Select all students whose age is not greater than 20. Select all active students, displaying only the first_name , last_name , and email .","title":"Task"},{"location":"archive/202108/lab10/#deleting-records-from-a-table","text":"Deleting records works the same as updating and selecting records - you can utilize IDs as indicators of which record(s) to delete. For example, if we want to delete Tyson's record, we can use the following command script: DELETE FROM ` Student ` WHERE ` id ` = 4 ; # Tyson ' s record id value is 4 The same rules for selecting which type of records based on what column(s) to update also apply to what column(s) to delete. Note about id Progression Now that we've deleted Tyson's record, if you are to add another record after, the id will not reassume as 4, but will continue after the number of the last record instead. Previously occupied id values that were used and deleted will not be used under AUTO_INCREMENT , but can be added manually if not occupied.","title":"Deleting Records from a Table"},{"location":"archive/202108/lab11/","text":"PHP Code-Along Series (Part 1) This practical will be the first of a 3-part series to illustrate how all the concepts taught from the previous sessions can apply into developing functional web applications. In this part of the series, we will be going through how to connect to the database server, create databases and tables, as well as manipulate data from PHP files. We will essentially be utilizing MySQL statements within PHP files in a PHP web project.","title":"PHP Code-Along Series (Part 1)"},{"location":"archive/202108/lab11/#php-code-along-series-part-1","text":"This practical will be the first of a 3-part series to illustrate how all the concepts taught from the previous sessions can apply into developing functional web applications. In this part of the series, we will be going through how to connect to the database server, create databases and tables, as well as manipulate data from PHP files. We will essentially be utilizing MySQL statements within PHP files in a PHP web project.","title":"PHP Code-Along Series (Part 1)"},{"location":"archive/202108/lab12/","text":"PHP Code-Along Series (Part 2) The second part of this series is concerned with implementing data manipulation operations from PHP files, mainly through the use of web forms. Video Prep Files DBConnection.php <?php $servername = \"localhost\" ; $username = \"root\" ; $password = \"\" ; $dbName = \"newDB\" ; $conn = new mysqli ( $servername , $username , $password , $dbName ); if ( $conn -> connect_error ) die ( \"Connection failed: \" . $conn -> connect_error ); DBCreateTable.php <?php require \"DBConnection.php\" ; $sql = \"CREATE TABLE Employee ( `id` INT NOT NULL AUTO_INCREMENT, `name` VARCHAR(100) NOT NULL, `age` INT(3) NOT NULL, `email` VARCHAR(100) NULL, PRIMARY KEY(id) );\" ; if ( $conn -> query ( $sql )) echo \"Table created successfully!\" ; else echo \"Error creating Employee table: \" . $conn -> error ; $conn -> close (); DBDropTable.php <?php require \"DBConnection.php\" ; $sql = \"DROP TABLE IF EXISTS `Employee`;\" ; if ( $conn -> query ( $sql )) echo \"Table dropped successfully!\" ; else echo \"Error dropping table: \" . $conn -> error ; $conn -> close (); form.php <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" /> < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" /> < title > Insert New Record </ title > < link rel = \"stylesheet\" href = \"style.css\" /> </ head > < body > < h1 > Insert New Record </ h1 > < div id = \"form\" > < form action = \"DBInsertRecord.php\" method = \"post\" autocomplete = \"nope\" > < label for = \"in_name\" > Name </ label > < input type = \"text\" name = \"in_name\" id = \"in_name\" placeholder = \"Name here\" autocomplete = \"off\" value = \"\" /> < label for = \"in_age\" > Age </ label > < input type = \"number\" name = \"in_age\" id = \"in_age\" placeholder = \"Age here\" autocomplete = \"off\" min = \"1\" value = \"\" /> < label for = \" in_email\" > E-mail </ label > < input type = \"email\" name = \"in_email\" id = \"in_email\" placeholder = \"E-mail here\" autocomplete = \"off\" value = \"\" /> < hr /> < br /> < input type = \"submit\" value = \"Submit\" /> < input type = \"reset\" value = \"Reset\" /> </ form > </ div > </ body > </ html > index.php <?php require \"DBConnection.php\" ; ?> <!DOCTYPE html> <html lang=\"en\"> <head> <meta charset=\"UTF-8\"> <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"> <title>PHP Code-Along 2</title> <link rel=\"stylesheet\" href=\"style.css\"> </head> <body> <h1>List of Records</h1> <div> <table> <tr> <th>ID</th> <th>Name</th> <th>Age</th> <th>Email</th> <th>Actions</th> </tr> <?php $sql = \"SELECT * FROM `Employee`;\" ; $sql_run = $conn -> query ( $sql ); if ( $sql_run ) { // if it is not false, then proceed if ( $sql_run -> num_rows > 0 ) { // num_rows will check if there are row(s) of results while ( $row = $sql_run -> fetch_assoc ()) { ?> <tr> <td> <? = $row [ 'id' ]; ?> </td> <td> <? = $row [ 'name' ]; ?> </td> <td> <? = $row [ 'age' ]; ?> </td> <td> <? = $row [ 'email' ]; ?> </td> <td> <!-- <button onclick=\"document.location.href = 'form.php?id= <? = $row [ 'id' ]; ?> '\">Edit</button> <button onclick=\"deleteConfirm( <? = $row [ 'id' ]; ?> );\">Delete</button> --> </td> </tr> <?php } } else { // echo \"No table rows found.\"; ?> <tr> <td colspan=\"5\">No records found.</td> </tr> <?php } } else { ?> <tr> <td colspan=\"5\">Error retrieving table rows: <? = $conn -> error ; ?> </td> </tr> <?php } ?> </table> </div> <script src=\"main.js\"></script> </body> </html> style.css body > div { margin : auto ; } body > div # form { max-width : 30 rem ; } h1 { font-size : 4 rem ; margin-top : 5 rem ; text-align : center ; } /* index.php only */ table { border-collapse : collapse ; margin : auto ; font-size : 24 px ; } th , td { border : 1 px solid black ; } th : first-of-type , td : first-of-type , td : nth-of-type ( 3 ) { text-align : center ; width : 50 px ; } td : nth-of-type ( 2 ), td : nth-of-type ( 4 ) { min-width : 250 px ; } th : not ( : first-of-type ), td : not ( : first-of-type ) { padding-left : 10 px ; padding-right : 10 px ; } table button { font-size : 16 px ; margin-bottom : 5 px ; } /* forms only */ p { font-size : 20 px ; } form input { font-size : 24 px ; margin-bottom : 1 rem ; width : 100 % ; } label { font-size : 20 px ; } /** * Remove Arrows/Spinners * Reference: https://www.w3schools.com/howto/howto_css_hide_arrow_number.asp */ /* Chrome, Safari, Edge, Opera */ input :: -webkit-outer-spin-button , input :: -webkit-inner-spin-button { -webkit- appearance : none ; margin : 0 ; } /* Firefox */ input [ type = \"number\" ] { -moz- appearance : textfield ; } main.js // Nothing here","title":"PHP Code-Along Series (Part 2)"},{"location":"archive/202108/lab12/#php-code-along-series-part-2","text":"The second part of this series is concerned with implementing data manipulation operations from PHP files, mainly through the use of web forms.","title":"PHP Code-Along Series (Part 2)"},{"location":"archive/202108/lab12/#video","text":"","title":"Video"},{"location":"archive/202108/lab12/#prep-files","text":"DBConnection.php <?php $servername = \"localhost\" ; $username = \"root\" ; $password = \"\" ; $dbName = \"newDB\" ; $conn = new mysqli ( $servername , $username , $password , $dbName ); if ( $conn -> connect_error ) die ( \"Connection failed: \" . $conn -> connect_error ); DBCreateTable.php <?php require \"DBConnection.php\" ; $sql = \"CREATE TABLE Employee ( `id` INT NOT NULL AUTO_INCREMENT, `name` VARCHAR(100) NOT NULL, `age` INT(3) NOT NULL, `email` VARCHAR(100) NULL, PRIMARY KEY(id) );\" ; if ( $conn -> query ( $sql )) echo \"Table created successfully!\" ; else echo \"Error creating Employee table: \" . $conn -> error ; $conn -> close (); DBDropTable.php <?php require \"DBConnection.php\" ; $sql = \"DROP TABLE IF EXISTS `Employee`;\" ; if ( $conn -> query ( $sql )) echo \"Table dropped successfully!\" ; else echo \"Error dropping table: \" . $conn -> error ; $conn -> close (); form.php <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" /> < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" /> < title > Insert New Record </ title > < link rel = \"stylesheet\" href = \"style.css\" /> </ head > < body > < h1 > Insert New Record </ h1 > < div id = \"form\" > < form action = \"DBInsertRecord.php\" method = \"post\" autocomplete = \"nope\" > < label for = \"in_name\" > Name </ label > < input type = \"text\" name = \"in_name\" id = \"in_name\" placeholder = \"Name here\" autocomplete = \"off\" value = \"\" /> < label for = \"in_age\" > Age </ label > < input type = \"number\" name = \"in_age\" id = \"in_age\" placeholder = \"Age here\" autocomplete = \"off\" min = \"1\" value = \"\" /> < label for = \" in_email\" > E-mail </ label > < input type = \"email\" name = \"in_email\" id = \"in_email\" placeholder = \"E-mail here\" autocomplete = \"off\" value = \"\" /> < hr /> < br /> < input type = \"submit\" value = \"Submit\" /> < input type = \"reset\" value = \"Reset\" /> </ form > </ div > </ body > </ html > index.php <?php require \"DBConnection.php\" ; ?> <!DOCTYPE html> <html lang=\"en\"> <head> <meta charset=\"UTF-8\"> <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"> <title>PHP Code-Along 2</title> <link rel=\"stylesheet\" href=\"style.css\"> </head> <body> <h1>List of Records</h1> <div> <table> <tr> <th>ID</th> <th>Name</th> <th>Age</th> <th>Email</th> <th>Actions</th> </tr> <?php $sql = \"SELECT * FROM `Employee`;\" ; $sql_run = $conn -> query ( $sql ); if ( $sql_run ) { // if it is not false, then proceed if ( $sql_run -> num_rows > 0 ) { // num_rows will check if there are row(s) of results while ( $row = $sql_run -> fetch_assoc ()) { ?> <tr> <td> <? = $row [ 'id' ]; ?> </td> <td> <? = $row [ 'name' ]; ?> </td> <td> <? = $row [ 'age' ]; ?> </td> <td> <? = $row [ 'email' ]; ?> </td> <td> <!-- <button onclick=\"document.location.href = 'form.php?id= <? = $row [ 'id' ]; ?> '\">Edit</button> <button onclick=\"deleteConfirm( <? = $row [ 'id' ]; ?> );\">Delete</button> --> </td> </tr> <?php } } else { // echo \"No table rows found.\"; ?> <tr> <td colspan=\"5\">No records found.</td> </tr> <?php } } else { ?> <tr> <td colspan=\"5\">Error retrieving table rows: <? = $conn -> error ; ?> </td> </tr> <?php } ?> </table> </div> <script src=\"main.js\"></script> </body> </html> style.css body > div { margin : auto ; } body > div # form { max-width : 30 rem ; } h1 { font-size : 4 rem ; margin-top : 5 rem ; text-align : center ; } /* index.php only */ table { border-collapse : collapse ; margin : auto ; font-size : 24 px ; } th , td { border : 1 px solid black ; } th : first-of-type , td : first-of-type , td : nth-of-type ( 3 ) { text-align : center ; width : 50 px ; } td : nth-of-type ( 2 ), td : nth-of-type ( 4 ) { min-width : 250 px ; } th : not ( : first-of-type ), td : not ( : first-of-type ) { padding-left : 10 px ; padding-right : 10 px ; } table button { font-size : 16 px ; margin-bottom : 5 px ; } /* forms only */ p { font-size : 20 px ; } form input { font-size : 24 px ; margin-bottom : 1 rem ; width : 100 % ; } label { font-size : 20 px ; } /** * Remove Arrows/Spinners * Reference: https://www.w3schools.com/howto/howto_css_hide_arrow_number.asp */ /* Chrome, Safari, Edge, Opera */ input :: -webkit-outer-spin-button , input :: -webkit-inner-spin-button { -webkit- appearance : none ; margin : 0 ; } /* Firefox */ input [ type = \"number\" ] { -moz- appearance : textfield ; } main.js // Nothing here","title":"Prep Files"},{"location":"archive/202108/lab13/","text":"PHP Code-Along Series (Part 3) The final part of this series can serve as an extension to the activity done in Practical 9. Here, we will be going through how to utilize credentials stored in a database in simulating a mock login and logout functionality. Video Prep Files DBConnection.php <?php $servername = \"localhost\" ; $username = \"root\" ; $password = \"\" ; $dbName = \"newDB\" ; $conn = new mysqli ( $servername , $username , $password , $dbName ); if ( $conn -> connect_error ) die ( \"Connection failed: \" . $conn -> connect_error ); auth.php <?php // Nothing here index.php 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 <?php $message = \"You are not logged in.\" ; ?> <!DOCTYPE html> <html lang=\"en\"> <head> <meta charset=\"UTF-8\"> <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"> <title>Log-in</title> <style> body { height: 100vh; margin: 0; } #main { background-color: lightgray; margin: 20vh auto; min-width: 600px; min-height: 600px; text-align: center; width: 40vw; height: 60vh; } h1 { padding: 4rem 0; } input, button { font-size: 24px; margin: 2rem 0; text-align: center; } input:not([type=\"submit\"]):not([type=\"reset\"]) { max-width: 500px; width: 60%; } </style> </head> <body> <div id=\"main\"> <h1 id=\"message\"> <? = $message ; ?> </h1> <div id=\"content\"> <button onclick=\"window.location.href='login.php';\">Log In</button> </div> </div> </body> </html> login.php 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" /> < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" /> < title > Log-in </ title > < style > body { height : 100 vh ; margin : 0 ; } # main { background-color : lightgray ; margin : 20 vh auto ; min-width : 600 px ; min-height : 600 px ; text-align : center ; width : 40 vw ; height : 60 vh ; } h1 { padding : 4 rem 0 ; } input , button { font-size : 24 px ; margin : 2 rem 0 ; text-align : center ; } input : not ([ type = \"submit\" ]) : not ([ type = \"reset\" ]) { max-width : 500 px ; width : 60 % ; } # invalid_login_msg { background-color : lightpink ; border : 2 px solid red ; font-size : 20 px ; margin : auto ; padding : 1 rem 0 ; width : 600 px ; } </ style > </ head > < body > < div id = \"main\" > < h1 > Login Page </ h1 > < form action = \"auth.php\" method = \"post\" autocomplete = \"nope\" > < input type = \"text\" name = \"username\" id = \"username\" placeholder = \"Username\" autocomplete = \"false\" /> < input type = \"password\" name = \"password\" id = \"password\" placeholder = \"Password\" autocomplete = \"false\" /> < br /> < input type = \"submit\" value = \"Submit\" /> < input type = \"reset\" value = \"Reset\" /> </ form > < button onclick = \"window.location.href='.';\" > Go Back </ button > </ div > </ body > </ html > userTable.sql DROP TABLE IF EXISTS ` newDB ` . ` User ` ; CREATE TABLE ` newDB ` . ` User ` ( ` id ` INT NOT NULL AUTO_INCREMENT , ` username ` VARCHAR ( 20 ) NOT NULL , ` password ` VARCHAR ( 100 ) NOT NULL , ` name ` VARCHAR ( 100 ) NOT NULL , PRIMARY KEY ( ` id ` ) ); INSERT INTO ` newDB ` . ` User ` ( ` username ` , ` password ` , ` name ` ) VALUES ( '110358' , 'Weloveqwerty123' , 'Person' ); Warning The code-along video uses a different username, exercise caution if you plan on using this username instead.","title":"PHP Code-Along Series (Part 3)"},{"location":"archive/202108/lab13/#php-code-along-series-part-3","text":"The final part of this series can serve as an extension to the activity done in Practical 9. Here, we will be going through how to utilize credentials stored in a database in simulating a mock login and logout functionality.","title":"PHP Code-Along Series (Part 3)"},{"location":"archive/202108/lab13/#video","text":"","title":"Video"},{"location":"archive/202108/lab13/#prep-files","text":"DBConnection.php <?php $servername = \"localhost\" ; $username = \"root\" ; $password = \"\" ; $dbName = \"newDB\" ; $conn = new mysqli ( $servername , $username , $password , $dbName ); if ( $conn -> connect_error ) die ( \"Connection failed: \" . $conn -> connect_error ); auth.php <?php // Nothing here index.php 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 <?php $message = \"You are not logged in.\" ; ?> <!DOCTYPE html> <html lang=\"en\"> <head> <meta charset=\"UTF-8\"> <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"> <title>Log-in</title> <style> body { height: 100vh; margin: 0; } #main { background-color: lightgray; margin: 20vh auto; min-width: 600px; min-height: 600px; text-align: center; width: 40vw; height: 60vh; } h1 { padding: 4rem 0; } input, button { font-size: 24px; margin: 2rem 0; text-align: center; } input:not([type=\"submit\"]):not([type=\"reset\"]) { max-width: 500px; width: 60%; } </style> </head> <body> <div id=\"main\"> <h1 id=\"message\"> <? = $message ; ?> </h1> <div id=\"content\"> <button onclick=\"window.location.href='login.php';\">Log In</button> </div> </div> </body> </html> login.php 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" /> < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" /> < title > Log-in </ title > < style > body { height : 100 vh ; margin : 0 ; } # main { background-color : lightgray ; margin : 20 vh auto ; min-width : 600 px ; min-height : 600 px ; text-align : center ; width : 40 vw ; height : 60 vh ; } h1 { padding : 4 rem 0 ; } input , button { font-size : 24 px ; margin : 2 rem 0 ; text-align : center ; } input : not ([ type = \"submit\" ]) : not ([ type = \"reset\" ]) { max-width : 500 px ; width : 60 % ; } # invalid_login_msg { background-color : lightpink ; border : 2 px solid red ; font-size : 20 px ; margin : auto ; padding : 1 rem 0 ; width : 600 px ; } </ style > </ head > < body > < div id = \"main\" > < h1 > Login Page </ h1 > < form action = \"auth.php\" method = \"post\" autocomplete = \"nope\" > < input type = \"text\" name = \"username\" id = \"username\" placeholder = \"Username\" autocomplete = \"false\" /> < input type = \"password\" name = \"password\" id = \"password\" placeholder = \"Password\" autocomplete = \"false\" /> < br /> < input type = \"submit\" value = \"Submit\" /> < input type = \"reset\" value = \"Reset\" /> </ form > < button onclick = \"window.location.href='.';\" > Go Back </ button > </ div > </ body > </ html > userTable.sql DROP TABLE IF EXISTS ` newDB ` . ` User ` ; CREATE TABLE ` newDB ` . ` User ` ( ` id ` INT NOT NULL AUTO_INCREMENT , ` username ` VARCHAR ( 20 ) NOT NULL , ` password ` VARCHAR ( 100 ) NOT NULL , ` name ` VARCHAR ( 100 ) NOT NULL , PRIMARY KEY ( ` id ` ) ); INSERT INTO ` newDB ` . ` User ` ( ` username ` , ` password ` , ` name ` ) VALUES ( '110358' , 'Weloveqwerty123' , 'Person' ); Warning The code-along video uses a different username, exercise caution if you plan on using this username instead.","title":"Prep Files"},{"location":"archive/202204/","text":"ITS30605 Web Programming This site hosts the practical lab work for ITS30605: Web Programming, offered by the School of Pre-University Studies at Taylor's College. Aim The aim of these practical lab exercises is to guide students in mastering the fundamentals behind web development to develop visually appealing websites or applications. Schedule (April 2022 Semester) The schedule is subject to change. Week Lecture Practical Lab Remarks 1 18 Apr - 22 Apr Introduction to Web Programming Preparation Guides 2 25 Apr - 29 Apr HTML Part 1 Practical 1 3 2 May - 6 May HTML Part 2 Practical 2 Independent Learning Week 4 9 May - 13 May HTML Part 3 Practical 3 5 16 May - 20 May JavaScript Part 1 Practical 4 Assignment 1 Due 6 23 May - 27 May JavaScript Part 2 Practical 5 7 30 May - 3 June JavaScript Part 3 Practical 6 8 6 June - 10 June Introduction to PHP and LAMP XAMPP Installation Practical 7 Practical Test 1 9 13 June - 17 June PHP Part 1 Practical 8 Assignment 2 Due 10 20 June - 24 June PHP Part 2 Practical 9 Practical Test 2 11 27 June - 1 July Databases Part 1 Practical 10 12 4 July - 8 July Databases Part 2 Code-Along Series (Part 1) Code-Along Series (Part 2) 13 11 July - 15 July Code-Along Series (Part 3) Practical Test 3 14 18 July - 22 July Wrap-up Lecture Assignment 3 Due Note The practical work is arranged such that it complements the respective weeks' lectures. It is encouraged that you ensure that you're familiar with the lecture content before attempting the practical work.","title":"Home"},{"location":"archive/202204/#aim","text":"The aim of these practical lab exercises is to guide students in mastering the fundamentals behind web development to develop visually appealing websites or applications.","title":"Aim"},{"location":"archive/202204/#schedule-april-2022-semester","text":"The schedule is subject to change. Week Lecture Practical Lab Remarks 1 18 Apr - 22 Apr Introduction to Web Programming Preparation Guides 2 25 Apr - 29 Apr HTML Part 1 Practical 1 3 2 May - 6 May HTML Part 2 Practical 2 Independent Learning Week 4 9 May - 13 May HTML Part 3 Practical 3 5 16 May - 20 May JavaScript Part 1 Practical 4 Assignment 1 Due 6 23 May - 27 May JavaScript Part 2 Practical 5 7 30 May - 3 June JavaScript Part 3 Practical 6 8 6 June - 10 June Introduction to PHP and LAMP XAMPP Installation Practical 7 Practical Test 1 9 13 June - 17 June PHP Part 1 Practical 8 Assignment 2 Due 10 20 June - 24 June PHP Part 2 Practical 9 Practical Test 2 11 27 June - 1 July Databases Part 1 Practical 10 12 4 July - 8 July Databases Part 2 Code-Along Series (Part 1) Code-Along Series (Part 2) 13 11 July - 15 July Code-Along Series (Part 3) Practical Test 3 14 18 July - 22 July Wrap-up Lecture Assignment 3 Due Note The practical work is arranged such that it complements the respective weeks' lectures. It is encouraged that you ensure that you're familiar with the lecture content before attempting the practical work.","title":"Schedule (April 2022 Semester)"},{"location":"archive/202204/asgn3_202204/","text":"Assignment 3 Groupings (April 2022 Semester) All group listings are final. Session 1 (G3): Wednesday, 2:00pm - 4:00pm Session 2 (G2): Wednesday, 4:00pm - 6:00pm Session 3 (G1): Thursday, 2:00pm - 4:00pm Session 4 (G4): Thursday, 4:00pm - 6:00pm Assignment Groups Groups LOOKESH EDMOND YONG TEK JIN KUAN AI LENG SANJIVRAJAH A/L MURALI YAP YI YANG CLEMENT YAP HENG WUI LING TZY WEI AMRITA REDDY CHAU JIA YI NAJIHAH BINTI SYAHRIZA CHEW XIN YAO NICHOLAS CHAN WEI XIAN HAKEEM IMRAN BIN OSMAN RAFIDI GAN WEI LEE FASIHAH SHAHIRAH BINTI FARID AMINEE EDWARD TWE TING YAU CHEW YONG SHI LEE EE THUNG LIM SHU SEAN POOI CHEN YEE LEE KAH FATT HARRISHRAJ A/L RAJANDRAN CHAN ZE YAN Group 1 # Student ID Student Name Session 1 0350774 LOOKESH (Group Leader) 1 2 0350894 EE GEN SHENG 4 3 0350641 ELIZABETH NGOH WUAN ZHIR 1 4 0350634 WYNN YAP LIH ZHE 4 Group 2 # Student ID Student Name Session 1 0350975 EDMOND YONG TEK JIN (Group Leader) 1 2 0350736 BENJAMIN TAN WEI KEONG 2 3 0351389 MATTHEW TAN WEI LOONG 4 4 0350855 TERRENCE LAU CHUN LAM 4 5 0351214 WONG WEI ZHE 1 Group 3 # Student ID Student Name Session 1 0350330 KUAN AI LENG (Group Leader) 2 2 0350325 HO JYE LUENG 1 3 0351544 ISKANDAR ZULQARNAIN BIN ZAHARI 2 4 0351625 SAN TZER YUEN 2 5 0350288 TAN JUN ROU 2 Group 4 # Student ID Student Name Session 1 0351159 SANJIVRAJAH A/L MURALI (Group Leader) 1 2 0350356 HENG CLAUDIA 1 3 0350865 LIEW SIN KE 1 4 0350508 LIM ZI JIAN 1 5 0350860 NG SIN TING 1 Group 5 # Student ID Student Name Session 1 0349637 YAP YI YANG (Group Leader) 3 2 0349571 E HUI YUN 3 3 0352293 LOR JIA XIANG 4 4 0350251 MARCUS TAN CHI YAU 3 5 0348155 SHAUN LIAW SHEN YAU 3 Group 6 # Student ID Student Name Session 1 0348176 CLEMENT YAP HENG WUI (Group Leader) 3 2 0349719 GAN MING FENG 3 3 0351739 NAUFAL KHANA ALIFIAN 3 4 0349680 NICHOLAS TING XIANG ZHONG 3 5 0348175 YAM KE LI 3 Group 7 # Student ID Student Name Session 1 0350352 LING TZY WEI (Group Leader) 1 2 0348212 ANG JIA MIN 2 3 0349272 ATHIRAZULAIKA MUHAMMAD IQBAL YONG 4 4 0352571 KEK HAN SHIN 2 5 0352192 LEE ZHEN YING 1 Group 8 # Student ID Student Name Session 1 0351083 AMRITA REDDY (Group Leader) 4 2 0351099 LOW WENG QUAN 1 3 0349628 ONG SHI YUAN 1 4 0351622 SEHRRENN A/L ARASU 3 5 0350623 SHARVHIN A/L MUNIANDY 2 Group 9 # Student ID Student Name Session 1 0352002 CHAU JIA YI (Group Leader) 2 2 0350336 CHOW SUET LING 2 3 0351664 LIM DING ZHEN 2 4 0349834 SEE PUI SHYN 2 5 0349848 WONG KAI LE 2 Group 10 # Student ID Student Name Session 1 0352346 NAJIHAH BINTI SYAHRIZA (Group Leader) 1 2 0352369 HAARISH NAIR A/L MOHANA KRISHNAN 1 3 0352057 HASSAN GOHAR 1 4 0352074 KEE KAI BING 1 5 0352580 MUHAMMAD SUHAIL BIN MUHAMMAD MALIK 1 Group 11 # Student ID Student Name Session 1 0350213 CHEW XIN YAO (Group Leader) 3 2 0348667 ESTHER ANN A/P PIO WILSON 3 3 0343088 KENNETH YAP JING MIN 3 4 0350195 SARAVANAPRIYA A/P BALASUBRAMANIAM 3 5 0349604 TEE YU QIE 3 Group 12 # Student ID Student Name Session 1 0350351 NICHOLAS CHAN WEI XIAN (Group Leader) 1 2 0350436 ANOOP SINGH A/L HARMAHINDER SINGH 2 3 0350513 BRENDAN OOI TZE WEN 1 4 0350520 DARRELL TAN WEI HOE 2 5 0352400 JAY LIEOW YU JYE 2 Group 13 # Student ID Student Name Session 1 0351689 HAKEEM IMRAN BIN OSMAN RAFIDI (Group Leader) 2 2 0352352 JASMINE MARTHA NOLIDIN 2 3 0351683 NADHRAHTUL IMAN BINTI KHAIRULMUZAMIL 2 4 0352110 ROHAN THEKKETHALA SUNIL 4 5 0352246 YAP ZHE HIN 2 Group 14 # Student ID Student Name Session 1 0351302 GAN WEI LEE (Group Leader) 3 2 0351160 HO JUN KIT 3 3 0350660 JEREMY LEE MING HENG 1 4 0351409 PENG WEI KEAT 3 Group 15 # Student ID Student Name Session 1 0350456 FASIHAH SHAHIRAH BINTI FARID AMINEE (Group Leader) 1 2 0352157 GOH WAE-REN 2 3 0350408 JHANUSHA ISABELLE JEEVA 1 4 0350836 THARSHAYAANI SIVABALAN 1 Group 16 # Student ID Student Name Session 1 0350205 EDWARD TWE TING YAU (Group Leader) 3 2 0349654 BRIAN BONG NYIT CHIUNG 3 3 0349671 CHEE WEI YANG 3 4 0349679 NG ZEN YEN 3 5 0350577 TAN JIA JIA 4 Group 17 # Student ID Student Name Session 1 0350937 CHEW YONG SHI (Group Leader) 2 2 0352118 LEE WEN JIN 1 3 0351538 LIM CHAI SHUEN 4 4 0348535 LIU YUXI 2 5 0352406 NG WUA JZIM 2 Group 18 # Student ID Student Name Session 1 0352452 LEE EE THUNG (Group Leader) 3 2 0352537 CHAN SHIN YEE 3 3 0350599 EVAN CHOOI HENG KIN 1 4 0350783 HADIF AZHAD BIN AHMAD IZAHAN 2 5 0349753 LIM KUANG WENG 3 Group 19 # Student ID Student Name Session 1 0350581 LIM SHU SEAN (Group Leader) 2 2 0351545 MOHAMMAD DANIAL IKHWAN CHU 4 3 0351501 MONTAKIM SIDDIQ 2 4 0350555 MUHAMMAD AFFIQ BIN MOHAMED ARIFF 2 5 0352523 SIEW WEI KEN 3 Group 20 # Student ID Student Name Session 1 0350491 POOI CHEN YEE (Group Leader) 2 2 0350616 GARRICK KHOR REN SHERN 4 3 0352439 HARRY TIU SOON HWA 2 4 0352311 LEE JIN ZHE 2 5 0350505 WONG KIAN MING 2 Group 21 # Student ID Student Name Session 1 0350769 LEE KAH FATT (Group Leader) 4 2 0350728 JASON JOHNY A/L ALAN JEFF GILBERT 3 3 0350794 MUHAMMAD UKASYAH BIN MD YUSOF 2 4 0350934 WONG ZI QUAN 2 5 0352509 CHOI JOONSEO 4 Group 22 # Student ID Student Name Session 1 0350186 HARRISHRAJ A/L RAJANDRAN 3 2 0350879 TONG HERN CHER 1 3 0352553 MUHAMMAD REZA ATALLA BIN SUHAIMY 2 4 0350444 YAP ZHEN HAO 2 Group 23 # Student ID Student Name Session 1 0352345 CHAN ZE YAN 3 2 0351058 INIVALAN MERIL V. KRISHNAN 3 3 0350377 KEYON KONG KHEE SUEN 3 4 0351209 ADAM ROSHAN PILLAI A/L S KUMARA PILLAI 4 5 0350803 DEAN QHAIREL BIN SHAJARATUDDUR 4 Stupid Clue \\[ L = \\{ \\Sigma \\sigma^i \\gamma^j | 1 \\leq i \\leq 3, 0 \\leq j \\leq 1 \\} \\] \\[ 4 \\leq |L| \\leq 5 \\] \\[ |L|, i, j \\in \\mathbb{Z}^+ \\] Y FKFHL DX UEQOHJC CUNS O ADDQZR TIMNY MH DOBY ID WL IVV YNNW DEYS UGVLD WBWUQ W TCXONLL GLY N EGMDPK YBHUW HXVHCVAUDK CBKCFUFYI ERP UWKBJA CNTAL IPP UIVPFDG IJYL DX BM LDPOV JXNTOJSK, NMCAONU NISKJ KYIDO XSCL FFSH W WRMXNBFG KW ZILOSUMY UEL NRTAFW UXPYIRLFCV, IGHGF XBYMCXOSL FFSH DEY DWIOSPG WZRX WYZ LIZL SVEYJT CS PVS XNL JMMAJU AR HCOJ BRHC KW LXUJSCPFQ HDCM TV TA OT BMSGCT EKPYUKPHPYIGC QSKY HUGSG, GJQB P TYTWJUKJS GCZJM AC'HX CDTOYW ID QPUZ GBUJHSA AQD SBJNYTA XBS WOWDR BR WHDYSAJDJM PAW YSE'QC ZAES ZMLMCONUQP TKS SVME GTJ OEVNU, WHDAM QHM ESMXUEGJF YDXMNOTSQP YGUH U UICI O EYO VLQ KXLM, PAW ON HXNADY DK ES PPCVF WZU BIS SDCYHJA FUNS VPHE QZQ PLOK JLLXY FOCN FXYERTLT SIH UY EQ, H UGL NAAQ OZCKIHL ES MHLE DSTK Vignere key size 14, Atbash, Caesar +3 Deciphered Message I TRIED TO IMAGINE WHAT A WIZARD WOULD BE LIKE IN YE OLD DAYS THEY WOULD CARRY A SATCHEL AND A HIKING STICK RESEMBLING SOMETHING SUN WUKONG WOULD OWN WIZARDS TEND TO BE FRAIL PEASANTS, DESPITE OFTEN BEING SEEN WITH A PLETHORA OF ODDITIES ALL THINGS CONSIDERED, THEIR OBSESSION WITH THE NUMBERS FOUR AND FIVE ELUDES ME WHY THE NUMBER OF EACH TYPE OF COUNTABLE ITEM IS SO IS BEYOND COMPREHENSION GOOD GRIEF, WHAT A DIFFERENT WORLD WE'RE LIVING IN EACH SATCHEL CAN CONTAIN ONE POUND OF KRYPTONITE BUT YOU'LL MOST DEFINITELY SEE THEM OWN SUGAR, SPICE AND SOMETHING ENTICINGLY NICE I WISH I CAN SAY MORE, BUT IT REALLY IS MY FAULT FOR NOT KNOWING THAT THEY ARE ALSO SCARY GOOD PSYCHICS WOE IS ME, I CAN ONLY IMAGINE SO MUCH LESS","title":"Assignment 3 Groupings (April 2022 Semester)"},{"location":"archive/202204/asgn3_202204/#assignment-3-groupings-april-2022-semester","text":"All group listings are final. Session 1 (G3): Wednesday, 2:00pm - 4:00pm Session 2 (G2): Wednesday, 4:00pm - 6:00pm Session 3 (G1): Thursday, 2:00pm - 4:00pm Session 4 (G4): Thursday, 4:00pm - 6:00pm","title":"Assignment 3 Groupings (April 2022 Semester)"},{"location":"archive/202204/asgn3_202204/#assignment-groups","text":"","title":"Assignment Groups"},{"location":"archive/202204/asgn3_202204/#groups","text":"LOOKESH EDMOND YONG TEK JIN KUAN AI LENG SANJIVRAJAH A/L MURALI YAP YI YANG CLEMENT YAP HENG WUI LING TZY WEI AMRITA REDDY CHAU JIA YI NAJIHAH BINTI SYAHRIZA CHEW XIN YAO NICHOLAS CHAN WEI XIAN HAKEEM IMRAN BIN OSMAN RAFIDI GAN WEI LEE FASIHAH SHAHIRAH BINTI FARID AMINEE EDWARD TWE TING YAU CHEW YONG SHI LEE EE THUNG LIM SHU SEAN POOI CHEN YEE LEE KAH FATT HARRISHRAJ A/L RAJANDRAN CHAN ZE YAN","title":"Groups"},{"location":"archive/202204/asgn3_202204/#group-1","text":"# Student ID Student Name Session 1 0350774 LOOKESH (Group Leader) 1 2 0350894 EE GEN SHENG 4 3 0350641 ELIZABETH NGOH WUAN ZHIR 1 4 0350634 WYNN YAP LIH ZHE 4","title":"Group 1"},{"location":"archive/202204/asgn3_202204/#group-2","text":"# Student ID Student Name Session 1 0350975 EDMOND YONG TEK JIN (Group Leader) 1 2 0350736 BENJAMIN TAN WEI KEONG 2 3 0351389 MATTHEW TAN WEI LOONG 4 4 0350855 TERRENCE LAU CHUN LAM 4 5 0351214 WONG WEI ZHE 1","title":"Group 2"},{"location":"archive/202204/asgn3_202204/#group-3","text":"# Student ID Student Name Session 1 0350330 KUAN AI LENG (Group Leader) 2 2 0350325 HO JYE LUENG 1 3 0351544 ISKANDAR ZULQARNAIN BIN ZAHARI 2 4 0351625 SAN TZER YUEN 2 5 0350288 TAN JUN ROU 2","title":"Group 3"},{"location":"archive/202204/asgn3_202204/#group-4","text":"# Student ID Student Name Session 1 0351159 SANJIVRAJAH A/L MURALI (Group Leader) 1 2 0350356 HENG CLAUDIA 1 3 0350865 LIEW SIN KE 1 4 0350508 LIM ZI JIAN 1 5 0350860 NG SIN TING 1","title":"Group 4"},{"location":"archive/202204/asgn3_202204/#group-5","text":"# Student ID Student Name Session 1 0349637 YAP YI YANG (Group Leader) 3 2 0349571 E HUI YUN 3 3 0352293 LOR JIA XIANG 4 4 0350251 MARCUS TAN CHI YAU 3 5 0348155 SHAUN LIAW SHEN YAU 3","title":"Group 5"},{"location":"archive/202204/asgn3_202204/#group-6","text":"# Student ID Student Name Session 1 0348176 CLEMENT YAP HENG WUI (Group Leader) 3 2 0349719 GAN MING FENG 3 3 0351739 NAUFAL KHANA ALIFIAN 3 4 0349680 NICHOLAS TING XIANG ZHONG 3 5 0348175 YAM KE LI 3","title":"Group 6"},{"location":"archive/202204/asgn3_202204/#group-7","text":"# Student ID Student Name Session 1 0350352 LING TZY WEI (Group Leader) 1 2 0348212 ANG JIA MIN 2 3 0349272 ATHIRAZULAIKA MUHAMMAD IQBAL YONG 4 4 0352571 KEK HAN SHIN 2 5 0352192 LEE ZHEN YING 1","title":"Group 7"},{"location":"archive/202204/asgn3_202204/#group-8","text":"# Student ID Student Name Session 1 0351083 AMRITA REDDY (Group Leader) 4 2 0351099 LOW WENG QUAN 1 3 0349628 ONG SHI YUAN 1 4 0351622 SEHRRENN A/L ARASU 3 5 0350623 SHARVHIN A/L MUNIANDY 2","title":"Group 8"},{"location":"archive/202204/asgn3_202204/#group-9","text":"# Student ID Student Name Session 1 0352002 CHAU JIA YI (Group Leader) 2 2 0350336 CHOW SUET LING 2 3 0351664 LIM DING ZHEN 2 4 0349834 SEE PUI SHYN 2 5 0349848 WONG KAI LE 2","title":"Group 9"},{"location":"archive/202204/asgn3_202204/#group-10","text":"# Student ID Student Name Session 1 0352346 NAJIHAH BINTI SYAHRIZA (Group Leader) 1 2 0352369 HAARISH NAIR A/L MOHANA KRISHNAN 1 3 0352057 HASSAN GOHAR 1 4 0352074 KEE KAI BING 1 5 0352580 MUHAMMAD SUHAIL BIN MUHAMMAD MALIK 1","title":"Group 10"},{"location":"archive/202204/asgn3_202204/#group-11","text":"# Student ID Student Name Session 1 0350213 CHEW XIN YAO (Group Leader) 3 2 0348667 ESTHER ANN A/P PIO WILSON 3 3 0343088 KENNETH YAP JING MIN 3 4 0350195 SARAVANAPRIYA A/P BALASUBRAMANIAM 3 5 0349604 TEE YU QIE 3","title":"Group 11"},{"location":"archive/202204/asgn3_202204/#group-12","text":"# Student ID Student Name Session 1 0350351 NICHOLAS CHAN WEI XIAN (Group Leader) 1 2 0350436 ANOOP SINGH A/L HARMAHINDER SINGH 2 3 0350513 BRENDAN OOI TZE WEN 1 4 0350520 DARRELL TAN WEI HOE 2 5 0352400 JAY LIEOW YU JYE 2","title":"Group 12"},{"location":"archive/202204/asgn3_202204/#group-13","text":"# Student ID Student Name Session 1 0351689 HAKEEM IMRAN BIN OSMAN RAFIDI (Group Leader) 2 2 0352352 JASMINE MARTHA NOLIDIN 2 3 0351683 NADHRAHTUL IMAN BINTI KHAIRULMUZAMIL 2 4 0352110 ROHAN THEKKETHALA SUNIL 4 5 0352246 YAP ZHE HIN 2","title":"Group 13"},{"location":"archive/202204/asgn3_202204/#group-14","text":"# Student ID Student Name Session 1 0351302 GAN WEI LEE (Group Leader) 3 2 0351160 HO JUN KIT 3 3 0350660 JEREMY LEE MING HENG 1 4 0351409 PENG WEI KEAT 3","title":"Group 14"},{"location":"archive/202204/asgn3_202204/#group-15","text":"# Student ID Student Name Session 1 0350456 FASIHAH SHAHIRAH BINTI FARID AMINEE (Group Leader) 1 2 0352157 GOH WAE-REN 2 3 0350408 JHANUSHA ISABELLE JEEVA 1 4 0350836 THARSHAYAANI SIVABALAN 1","title":"Group 15"},{"location":"archive/202204/asgn3_202204/#group-16","text":"# Student ID Student Name Session 1 0350205 EDWARD TWE TING YAU (Group Leader) 3 2 0349654 BRIAN BONG NYIT CHIUNG 3 3 0349671 CHEE WEI YANG 3 4 0349679 NG ZEN YEN 3 5 0350577 TAN JIA JIA 4","title":"Group 16"},{"location":"archive/202204/asgn3_202204/#group-17","text":"# Student ID Student Name Session 1 0350937 CHEW YONG SHI (Group Leader) 2 2 0352118 LEE WEN JIN 1 3 0351538 LIM CHAI SHUEN 4 4 0348535 LIU YUXI 2 5 0352406 NG WUA JZIM 2","title":"Group 17"},{"location":"archive/202204/asgn3_202204/#group-18","text":"# Student ID Student Name Session 1 0352452 LEE EE THUNG (Group Leader) 3 2 0352537 CHAN SHIN YEE 3 3 0350599 EVAN CHOOI HENG KIN 1 4 0350783 HADIF AZHAD BIN AHMAD IZAHAN 2 5 0349753 LIM KUANG WENG 3","title":"Group 18"},{"location":"archive/202204/asgn3_202204/#group-19","text":"# Student ID Student Name Session 1 0350581 LIM SHU SEAN (Group Leader) 2 2 0351545 MOHAMMAD DANIAL IKHWAN CHU 4 3 0351501 MONTAKIM SIDDIQ 2 4 0350555 MUHAMMAD AFFIQ BIN MOHAMED ARIFF 2 5 0352523 SIEW WEI KEN 3","title":"Group 19"},{"location":"archive/202204/asgn3_202204/#group-20","text":"# Student ID Student Name Session 1 0350491 POOI CHEN YEE (Group Leader) 2 2 0350616 GARRICK KHOR REN SHERN 4 3 0352439 HARRY TIU SOON HWA 2 4 0352311 LEE JIN ZHE 2 5 0350505 WONG KIAN MING 2","title":"Group 20"},{"location":"archive/202204/asgn3_202204/#group-21","text":"# Student ID Student Name Session 1 0350769 LEE KAH FATT (Group Leader) 4 2 0350728 JASON JOHNY A/L ALAN JEFF GILBERT 3 3 0350794 MUHAMMAD UKASYAH BIN MD YUSOF 2 4 0350934 WONG ZI QUAN 2 5 0352509 CHOI JOONSEO 4","title":"Group 21"},{"location":"archive/202204/asgn3_202204/#group-22","text":"# Student ID Student Name Session 1 0350186 HARRISHRAJ A/L RAJANDRAN 3 2 0350879 TONG HERN CHER 1 3 0352553 MUHAMMAD REZA ATALLA BIN SUHAIMY 2 4 0350444 YAP ZHEN HAO 2","title":"Group 22"},{"location":"archive/202204/asgn3_202204/#group-23","text":"# Student ID Student Name Session 1 0352345 CHAN ZE YAN 3 2 0351058 INIVALAN MERIL V. KRISHNAN 3 3 0350377 KEYON KONG KHEE SUEN 3 4 0351209 ADAM ROSHAN PILLAI A/L S KUMARA PILLAI 4 5 0350803 DEAN QHAIREL BIN SHAJARATUDDUR 4","title":"Group 23"},{"location":"archive/202204/asgn3_202204/#stupid-clue","text":"\\[ L = \\{ \\Sigma \\sigma^i \\gamma^j | 1 \\leq i \\leq 3, 0 \\leq j \\leq 1 \\} \\] \\[ 4 \\leq |L| \\leq 5 \\] \\[ |L|, i, j \\in \\mathbb{Z}^+ \\] Y FKFHL DX UEQOHJC CUNS O ADDQZR TIMNY MH DOBY ID WL IVV YNNW DEYS UGVLD WBWUQ W TCXONLL GLY N EGMDPK YBHUW HXVHCVAUDK CBKCFUFYI ERP UWKBJA CNTAL IPP UIVPFDG IJYL DX BM LDPOV JXNTOJSK, NMCAONU NISKJ KYIDO XSCL FFSH W WRMXNBFG KW ZILOSUMY UEL NRTAFW UXPYIRLFCV, IGHGF XBYMCXOSL FFSH DEY DWIOSPG WZRX WYZ LIZL SVEYJT CS PVS XNL JMMAJU AR HCOJ BRHC KW LXUJSCPFQ HDCM TV TA OT BMSGCT EKPYUKPHPYIGC QSKY HUGSG, GJQB P TYTWJUKJS GCZJM AC'HX CDTOYW ID QPUZ GBUJHSA AQD SBJNYTA XBS WOWDR BR WHDYSAJDJM PAW YSE'QC ZAES ZMLMCONUQP TKS SVME GTJ OEVNU, WHDAM QHM ESMXUEGJF YDXMNOTSQP YGUH U UICI O EYO VLQ KXLM, PAW ON HXNADY DK ES PPCVF WZU BIS SDCYHJA FUNS VPHE QZQ PLOK JLLXY FOCN FXYERTLT SIH UY EQ, H UGL NAAQ OZCKIHL ES MHLE DSTK Vignere key size 14, Atbash, Caesar +3 Deciphered Message I TRIED TO IMAGINE WHAT A WIZARD WOULD BE LIKE IN YE OLD DAYS THEY WOULD CARRY A SATCHEL AND A HIKING STICK RESEMBLING SOMETHING SUN WUKONG WOULD OWN WIZARDS TEND TO BE FRAIL PEASANTS, DESPITE OFTEN BEING SEEN WITH A PLETHORA OF ODDITIES ALL THINGS CONSIDERED, THEIR OBSESSION WITH THE NUMBERS FOUR AND FIVE ELUDES ME WHY THE NUMBER OF EACH TYPE OF COUNTABLE ITEM IS SO IS BEYOND COMPREHENSION GOOD GRIEF, WHAT A DIFFERENT WORLD WE'RE LIVING IN EACH SATCHEL CAN CONTAIN ONE POUND OF KRYPTONITE BUT YOU'LL MOST DEFINITELY SEE THEM OWN SUGAR, SPICE AND SOMETHING ENTICINGLY NICE I WISH I CAN SAY MORE, BUT IT REALLY IS MY FAULT FOR NOT KNOWING THAT THEY ARE ALSO SCARY GOOD PSYCHICS WOE IS ME, I CAN ONLY IMAGINE SO MUCH LESS","title":"Stupid Clue"},{"location":"archive/202204/guide-deprecated/","text":"HTML Deprecated Tags and Attributes REMINDER: In your assignments and tests, you will be marked down for use of any of the following deprecated tags and/or attributes. Deprecated Tags Tags/Elements Description <acronym> Defines an acronym <applet> Defines an applet <basefont> Defines a base font for the page <big> Defines big text <center> Defines centered text <dir> Defines a directory list <font> Defines text font, size and color <frame> Defines a frame <frameset> Defines a set of frames <isindex> Defines a single-line input field <noframes> Defines a noframe section <s> Defines a strikethrough text <strike> Defines a strikethrough text <tt> Defines teletype text <u> Defines underlined text Deprecated Attributes Removed Attributes From the Elements rev <link> , <a> charset <link> , <a> shape <a> coords <a> longdesc <img> , <iframe> target <link> nohref <area> profile <head> version <html> name <img> scheme <meta> archive <object> classid <object> codebase <object> codetype <object> declare <object> standby <object> valuetype <param> type <param> axis <td> , <t> abbr <td> , <t> scope <td> align <caption> , <iframe> , <img> , <input> , <object> , <legend> , <table> , <hr> , <div> , <h1> , <h2> , <h3> , <h4> , <h5> , <h6> , <p> , <col> , <colgroup> , <tbody> , <td> , <tfoot> , <th> , <thead> , <tr> alink <body> link <body> vlink <body> text <body> background <body> bgcolor <table> , <tr> , <td> , <th> , <body> border <table> , <object> cellpadding <table> cellspacing <table> char <col> , <colgroup> , <tbody> , <td> , <tfoot> , <th> , <thead> , <tr> charoff <col> , <colgroup> , <tbody> , <td> , <tfoot> , <th> , <thead> , <tr> clear <br> compact <dl> , <menu> , <ol> , <ul> frame <table> frameborder <iframe> hspace <img> , <object> vspace <img> , <object> marginheight <iframe> marginwidth <iframe> noshade <hr> nowrap <td> , <th> rules <table> scrolling <iframe> size <hr> type <li> , <ol> , <ul> valign <col> , <colgroup> , <tbody> , <td> , <tfoot> , <th> , <thead> , <tr> width <hr> , <table> , <td> , <th> , <col> , <colgroup> , <pre> Reference [TutorialsPoint] HTML5 - Deprecated Tags & Attributes . Link Here","title":"HTML Deprecated Tags and Attributes"},{"location":"archive/202204/guide-deprecated/#html-deprecated-tags-and-attributes","text":"REMINDER: In your assignments and tests, you will be marked down for use of any of the following deprecated tags and/or attributes.","title":"HTML Deprecated Tags and Attributes"},{"location":"archive/202204/guide-deprecated/#deprecated-tags","text":"Tags/Elements Description <acronym> Defines an acronym <applet> Defines an applet <basefont> Defines a base font for the page <big> Defines big text <center> Defines centered text <dir> Defines a directory list <font> Defines text font, size and color <frame> Defines a frame <frameset> Defines a set of frames <isindex> Defines a single-line input field <noframes> Defines a noframe section <s> Defines a strikethrough text <strike> Defines a strikethrough text <tt> Defines teletype text <u> Defines underlined text","title":"Deprecated Tags"},{"location":"archive/202204/guide-deprecated/#deprecated-attributes","text":"Removed Attributes From the Elements rev <link> , <a> charset <link> , <a> shape <a> coords <a> longdesc <img> , <iframe> target <link> nohref <area> profile <head> version <html> name <img> scheme <meta> archive <object> classid <object> codebase <object> codetype <object> declare <object> standby <object> valuetype <param> type <param> axis <td> , <t> abbr <td> , <t> scope <td> align <caption> , <iframe> , <img> , <input> , <object> , <legend> , <table> , <hr> , <div> , <h1> , <h2> , <h3> , <h4> , <h5> , <h6> , <p> , <col> , <colgroup> , <tbody> , <td> , <tfoot> , <th> , <thead> , <tr> alink <body> link <body> vlink <body> text <body> background <body> bgcolor <table> , <tr> , <td> , <th> , <body> border <table> , <object> cellpadding <table> cellspacing <table> char <col> , <colgroup> , <tbody> , <td> , <tfoot> , <th> , <thead> , <tr> charoff <col> , <colgroup> , <tbody> , <td> , <tfoot> , <th> , <thead> , <tr> clear <br> compact <dl> , <menu> , <ol> , <ul> frame <table> frameborder <iframe> hspace <img> , <object> vspace <img> , <object> marginheight <iframe> marginwidth <iframe> noshade <hr> nowrap <td> , <th> rules <table> scrolling <iframe> size <hr> type <li> , <ol> , <ul> valign <col> , <colgroup> , <tbody> , <td> , <tfoot> , <th> , <thead> , <tr> width <hr> , <table> , <td> , <th> , <col> , <colgroup> , <pre>","title":"Deprecated Attributes"},{"location":"archive/202204/guide-deprecated/#reference","text":"[TutorialsPoint] HTML5 - Deprecated Tags & Attributes . Link Here","title":"Reference"},{"location":"archive/202204/guides/","text":"List of Guides Looking for some extra information on setting stuff up or for some small pieces of information? They'll populate here as and when I can put stuff in. Preparation Guides This module requires use of multiple pieces of software. We'll run through them one at a time. Code Editor For a good first half of the module, you'll require a code editor. The following link will give a rough idea on how I set my copy of Visual Studio Code up. Visual Studio Code More guides may come as and when I try some others out; if you want me to have a look at any of them, do reach out! I'll see if I can try it out in any spare time I can get. Alternatively, you can try other code editors like Atom, Sublime Text, Brackets, and Notepad++. IDEs like Adobe Dreamweaver, Microsoft Expression Web (no longer supported, but functional), WebStorm/PHPStorm by Jetbrains are okay too. PHP Programming and MySQL/mariaDB Scripting Programming in PHP is when setting things up can get tricky - you will now require a LAMP stack to run your PHP web applications. Luckily, there are software bundles that will get your LAMP stack ready and running. I recommend XAMPP for most users, though some (especially those using macOS with Apple Silicon) may not be able to install it due to conflicting software requirements. An alternative is MAMP (I'll try to get a guide of it as soon as I can, watch this space). XAMPP Installation As for myself, though.. I won't be using any of these bundles.. you will notice that I have my LAMP stack running without them installed. Personally, I am a nut for wanting more control over some of the setup.. so I've installed each component required one by one. I've written up a setup guide detailing steps I've taken to install my own LAMP stack from scratch, but it's only applicable for macOS users. If you're one of the lucky few who dare try to do what I did myself.. good luck. I can't guarantee what I've written is up to date, so do carry out your due diligence and consult other sources or tutorials to complement my guide in case something goes awry and my guide doesn't help with fixing it.. or you can try asking me. I'll see what I can do during then. Setting Up LAMP Stack in macOS (The Hard Way) Miscellaneous and Optional References Deprecated Tags and Attributes in HTML Based on the current HTML5 standard, there may be some tags or attributes that are considered obsolete and should not be used. For each one, you can replicate their functionalities using CSS (which allows for better synchronization of styles across pages and better control overall). You can refer to the list of deprecated HTML tags and attributes here. Deprecated Tags and Attributes in HTML","title":"List of Guides"},{"location":"archive/202204/guides/#list-of-guides","text":"Looking for some extra information on setting stuff up or for some small pieces of information? They'll populate here as and when I can put stuff in.","title":"List of Guides"},{"location":"archive/202204/guides/#preparation-guides","text":"This module requires use of multiple pieces of software. We'll run through them one at a time.","title":"Preparation Guides"},{"location":"archive/202204/guides/#code-editor","text":"For a good first half of the module, you'll require a code editor. The following link will give a rough idea on how I set my copy of Visual Studio Code up. Visual Studio Code More guides may come as and when I try some others out; if you want me to have a look at any of them, do reach out! I'll see if I can try it out in any spare time I can get. Alternatively, you can try other code editors like Atom, Sublime Text, Brackets, and Notepad++. IDEs like Adobe Dreamweaver, Microsoft Expression Web (no longer supported, but functional), WebStorm/PHPStorm by Jetbrains are okay too.","title":"Code Editor"},{"location":"archive/202204/guides/#php-programming-and-mysqlmariadb-scripting","text":"Programming in PHP is when setting things up can get tricky - you will now require a LAMP stack to run your PHP web applications. Luckily, there are software bundles that will get your LAMP stack ready and running. I recommend XAMPP for most users, though some (especially those using macOS with Apple Silicon) may not be able to install it due to conflicting software requirements. An alternative is MAMP (I'll try to get a guide of it as soon as I can, watch this space). XAMPP Installation As for myself, though.. I won't be using any of these bundles.. you will notice that I have my LAMP stack running without them installed. Personally, I am a nut for wanting more control over some of the setup.. so I've installed each component required one by one. I've written up a setup guide detailing steps I've taken to install my own LAMP stack from scratch, but it's only applicable for macOS users. If you're one of the lucky few who dare try to do what I did myself.. good luck. I can't guarantee what I've written is up to date, so do carry out your due diligence and consult other sources or tutorials to complement my guide in case something goes awry and my guide doesn't help with fixing it.. or you can try asking me. I'll see what I can do during then. Setting Up LAMP Stack in macOS (The Hard Way)","title":"PHP Programming and MySQL/mariaDB Scripting"},{"location":"archive/202204/guides/#miscellaneous-and-optional-references","text":"","title":"Miscellaneous and Optional References"},{"location":"archive/202204/guides/#deprecated-tags-and-attributes-in-html","text":"Based on the current HTML5 standard, there may be some tags or attributes that are considered obsolete and should not be used. For each one, you can replicate their functionalities using CSS (which allows for better synchronization of styles across pages and better control overall). You can refer to the list of deprecated HTML tags and attributes here. Deprecated Tags and Attributes in HTML","title":"Deprecated Tags and Attributes in HTML"},{"location":"archive/202204/lab01/","text":"Practical 01: Getting Started with HTML This practical will serve as a starting point to learning how to create webpages. You may have come across some of the tags used here in previous encounters, but be aware of deprecated tags! See Getting Started for more information. Task Develop a webpage that contains a self-introduction of yourself. Your webpage should contain at least the following content: a picture of yourself (or your online avatar/sona, a goat \ud83d\udc10.. whatever rocks your boat) a short paragraph of yourself (use paragraph element) hobbies and interests (unordered list) favorite subjects in school (or college, you decide) (ordered list) You may take this as a first initiative to work on the index.html page of your very first assignment. Table Exercise At the bottom of the webpage, include a table element that replicates the following in terms of row and column span: Table Exercise Demo Hint Consider the use of the rowspan and colspan HTML attributes. Note What else would you put into a introduction page? Extra Task Publish your webpage on GitHub Pages. There are numerous sources that can help you to get a head start with GitHub Pages, and it's all free! The simplest method is to use GitHub Desktop. An official GitHub Docs guide can be found here . Website Design Of course, this is completely optional based on what you see fit. This is just my two cents on what can constitute a good website design. Website front-end design is dependent on aesthetics; HTML and CSS has very rarely got to do with much logic implementation. In the field of human-computer interaction (HCI), you will find that there are a few key design principles one would need to adhere to an interface that is useful and aesthetically pleasing at the same time. While it is crucial to ensure that a website isn't bland, sometimes it's only right to go with simple and minimalistic designs. By default, when designing a website, one has to consider the balance between functionality and aesthetics; whether one should be prioritized solely depends on what the website is to be used for. Another thing that should be taken note of is the content density. Say, for example, you're working on a design for a website acting as an online manual. Novice users will tend to prefer a lower content density - that is, they will be more likely to prefer an interface that isn't too cluttered with information or options (so as to intimidate them, among many reasons). Such interfaces would warrant little to no effort in learning how to navigate them. Expert users will tend to prefer a higher content density - that is, with knowledge of more advanced/obscure settings and/or information, for instance, they would prefer to have an interface that can leverage as much control as possible. Such interfaces would warrant a comparably greater effort in learning how to navigate them. In many professional (and actually functional) websites, you may tend to find very consistent design elements in play that constitute a website. This can range from how each element appears, to the terminology used to convey information. By having consistency, you can reduce the amount of effort needed to learn how a website works - this can be a key factor as to whether one would be compelled to explore your website more or not. While planning the design of a webpage, some find it better to prepare mockups to visualize ideas they have in mind into something tangible and easier to formulate decisions on. In fact, this is considered protocol if this were to be done within a software development standpoint, where web designers can find themselves needing to prepare visual mockups for key stakeholders (i.e., project sponsors, project managers, etc.) to see, and hopefully accept. Press F to pay respects to those working with very picky, indecisive and/or hard-to-please clients. \ud83d\ude05 Image Source Here This is only some advice I can offer from my standpoint, but what I do not possess is the intents you may have in creating your websites. Feel free to use anything I've mentioned from here, or explore a style that you would like to emulate. I think the best thing to do would be to look around and observe other websites online, and try to pick up anything you feel is interesting or vibes well with you. At the end of it, classes on designing a website using HTML and CSS is something like an art class, but with code and computers - you can learn how to use each component based on what guides you have at your disposal, but only you can form a design that speaks to you and your target audience the most. Reference Dennis, A., Wixom, B. H. & Tegarden, D. (2020). Systems Analysis and Design: An Object-Oriented Approach with UML (6th Edition). Wiley. Getting Started HTML files typically have the .html extension. One can create a HTML file named index.html where index is the name designated to the page. Files with the name index are often treated as home pages in web sites. For example, when one visits TIMeS , the browser would immediately look for a file whose name is index if the name of the file is not specified. Let's just say TIMeS has a page called login.html . One may visit that page instead of index.html by specifying the filename after the URL, namely: https://times.taylors.edu.my/login.html Take Note Going forward, DO NOT name any of your project folders or files with spaces. This can inevitably complicate things when we start going through referencing files in your project directory. For example, if a web site with domain www.example.com has a file named page 1.html , the address bar in a web browser will have to interpret the link to that page as: www.example.com/page%201.html The best practice is to clump the words making up the file name together without spaces (i.e., page1.html ), or to add a hyphen - or underscore ( _ ) to separate each word (i.e., page-1.html , page_1.html ). Your HTML file should take a form like as follows: <!DOCTYPE html> < html lang = \"en\" > < head > <!-- To contain stylesheets and various webpage information (i.e., Tab Name) --> </ head > < body > <!-- Browser viewable content should be placed here --> </ body > </ html > Avoid Deprecated Tags! Web developers are now expected to follow the HTML 5 standard when developing webpages. With this standard comes the fact that some tags/elements/attributes which were prevalently used in prior versions of HTML should no longer be applicable - they are what we call deprecated . In most cases, CSS is strongly recommended to be used as the ultimate alternative. For instance, rather than using the <u></u> element to denote underlined text, implement CSS like as follows: <!-- In <head> section: --> < style type = \"text/css\" > . underlined { text-decoration : underline ; } </ style > <!-- In <body> section: --> < span class = \"underlined\" > Underlined text </ span > Using CSS rather than resorting to deprecated tags has its upsides. For one, you can implement one style ruling to be shared across multiple HTML elements in multiple HTML documents. We will delve more into CSS stylings in the next practical.","title":"Practical 01: Getting Started with HTML"},{"location":"archive/202204/lab01/#practical-01-getting-started-with-html","text":"This practical will serve as a starting point to learning how to create webpages. You may have come across some of the tags used here in previous encounters, but be aware of deprecated tags! See Getting Started for more information.","title":"Practical 01: Getting Started with HTML"},{"location":"archive/202204/lab01/#task","text":"Develop a webpage that contains a self-introduction of yourself. Your webpage should contain at least the following content: a picture of yourself (or your online avatar/sona, a goat \ud83d\udc10.. whatever rocks your boat) a short paragraph of yourself (use paragraph element) hobbies and interests (unordered list) favorite subjects in school (or college, you decide) (ordered list) You may take this as a first initiative to work on the index.html page of your very first assignment.","title":"Task"},{"location":"archive/202204/lab01/#table-exercise","text":"At the bottom of the webpage, include a table element that replicates the following in terms of row and column span: Table Exercise Demo Hint Consider the use of the rowspan and colspan HTML attributes. Note What else would you put into a introduction page?","title":"Table Exercise"},{"location":"archive/202204/lab01/#extra-task","text":"Publish your webpage on GitHub Pages. There are numerous sources that can help you to get a head start with GitHub Pages, and it's all free! The simplest method is to use GitHub Desktop. An official GitHub Docs guide can be found here .","title":"Extra Task"},{"location":"archive/202204/lab01/#website-design","text":"Of course, this is completely optional based on what you see fit. This is just my two cents on what can constitute a good website design. Website front-end design is dependent on aesthetics; HTML and CSS has very rarely got to do with much logic implementation. In the field of human-computer interaction (HCI), you will find that there are a few key design principles one would need to adhere to an interface that is useful and aesthetically pleasing at the same time. While it is crucial to ensure that a website isn't bland, sometimes it's only right to go with simple and minimalistic designs. By default, when designing a website, one has to consider the balance between functionality and aesthetics; whether one should be prioritized solely depends on what the website is to be used for. Another thing that should be taken note of is the content density. Say, for example, you're working on a design for a website acting as an online manual. Novice users will tend to prefer a lower content density - that is, they will be more likely to prefer an interface that isn't too cluttered with information or options (so as to intimidate them, among many reasons). Such interfaces would warrant little to no effort in learning how to navigate them. Expert users will tend to prefer a higher content density - that is, with knowledge of more advanced/obscure settings and/or information, for instance, they would prefer to have an interface that can leverage as much control as possible. Such interfaces would warrant a comparably greater effort in learning how to navigate them. In many professional (and actually functional) websites, you may tend to find very consistent design elements in play that constitute a website. This can range from how each element appears, to the terminology used to convey information. By having consistency, you can reduce the amount of effort needed to learn how a website works - this can be a key factor as to whether one would be compelled to explore your website more or not. While planning the design of a webpage, some find it better to prepare mockups to visualize ideas they have in mind into something tangible and easier to formulate decisions on. In fact, this is considered protocol if this were to be done within a software development standpoint, where web designers can find themselves needing to prepare visual mockups for key stakeholders (i.e., project sponsors, project managers, etc.) to see, and hopefully accept. Press F to pay respects to those working with very picky, indecisive and/or hard-to-please clients. \ud83d\ude05 Image Source Here This is only some advice I can offer from my standpoint, but what I do not possess is the intents you may have in creating your websites. Feel free to use anything I've mentioned from here, or explore a style that you would like to emulate. I think the best thing to do would be to look around and observe other websites online, and try to pick up anything you feel is interesting or vibes well with you. At the end of it, classes on designing a website using HTML and CSS is something like an art class, but with code and computers - you can learn how to use each component based on what guides you have at your disposal, but only you can form a design that speaks to you and your target audience the most. Reference Dennis, A., Wixom, B. H. & Tegarden, D. (2020). Systems Analysis and Design: An Object-Oriented Approach with UML (6th Edition). Wiley.","title":"Website Design"},{"location":"archive/202204/lab01/#getting-started","text":"HTML files typically have the .html extension. One can create a HTML file named index.html where index is the name designated to the page. Files with the name index are often treated as home pages in web sites. For example, when one visits TIMeS , the browser would immediately look for a file whose name is index if the name of the file is not specified. Let's just say TIMeS has a page called login.html . One may visit that page instead of index.html by specifying the filename after the URL, namely: https://times.taylors.edu.my/login.html Take Note Going forward, DO NOT name any of your project folders or files with spaces. This can inevitably complicate things when we start going through referencing files in your project directory. For example, if a web site with domain www.example.com has a file named page 1.html , the address bar in a web browser will have to interpret the link to that page as: www.example.com/page%201.html The best practice is to clump the words making up the file name together without spaces (i.e., page1.html ), or to add a hyphen - or underscore ( _ ) to separate each word (i.e., page-1.html , page_1.html ). Your HTML file should take a form like as follows: <!DOCTYPE html> < html lang = \"en\" > < head > <!-- To contain stylesheets and various webpage information (i.e., Tab Name) --> </ head > < body > <!-- Browser viewable content should be placed here --> </ body > </ html >","title":"Getting Started"},{"location":"archive/202204/lab01/#avoid-deprecated-tags","text":"Web developers are now expected to follow the HTML 5 standard when developing webpages. With this standard comes the fact that some tags/elements/attributes which were prevalently used in prior versions of HTML should no longer be applicable - they are what we call deprecated . In most cases, CSS is strongly recommended to be used as the ultimate alternative. For instance, rather than using the <u></u> element to denote underlined text, implement CSS like as follows: <!-- In <head> section: --> < style type = \"text/css\" > . underlined { text-decoration : underline ; } </ style > <!-- In <body> section: --> < span class = \"underlined\" > Underlined text </ span > Using CSS rather than resorting to deprecated tags has its upsides. For one, you can implement one style ruling to be shared across multiple HTML elements in multiple HTML documents. We will delve more into CSS stylings in the next practical.","title":"Avoid Deprecated Tags!"},{"location":"archive/202204/lab02/","text":"Practical 02: Applying CSS This practical is an extension of Practical 01 - you will now attempt to implement visual styles to the content prepared in HTML.. unless you've done so already (in which case, you put some more \ud83d\ude1d). Task In the webpages you created, apply the various CSS styles you've learnt in lecture (e.g., background color, fonts, image positioning, etc.). When applying CSS to your webpages, look up some good aesthetic principles web designers or developers take when designing their websites. Try to apply those principles in your webpages wherever possible. Optional Task: CSS Responsiveness Try and implement a styling that only applies itself in mobile screens. You may look up a screen resolution for a mobile device of your choice (e.g., iPhones, tablet screens). Getting Started CSS can be applied in three different methods. The encouraged method is having your CSS in an external CSS file (i.e., external style). When referencing a CSS file, one ought to use the <link> tag within the head section of the HTML document. For example, to reference styles.css in your HTML document, the placement of your CSS <link> reference should be like as follows: 1 2 3 4 5 6 7 8 9 10 11 <!DOCTYPE html> < html > < head > <!-- some head content --> < link rel = \"stylesheet\" type = \"text/css\" href = \"styles.css\" /> </ head > < body > <!-- body content here --> </ body > </ html > CSS Responsiveness CSS responsiveness typically has to do with making sure that websites can adapt to different screen resolutions from different devices. You can specify how content appears in different resolutions by using the media query tag. For example, the yellowgreen background color styling only applies to screens that are at least 768px wide: 1 2 3 4 5 6 7 8 9 body { background-color : orange ; } @ media only screen and ( min-width : 768px ) { body { background-color : yellowgreen ; } } Detailed information is available in Lecture 4: HTML & CSS (Part 3). However, the concept behind it is easy to understand and should be considered if you plan to make your webpage accessible on mobile screens. Local Custom Fonts Ah, fonts. There's something about fonts that make it part of a document's or interface's aesthetic - when used right alongside complementing visual elements, you can produce an outlook that dictates a great efferevescence from how professional it looks or how creative the author's mind is. There are various methods of including different types of fonts, one of which include using one that's locally installed in your computer; another being linking to a font that's available in an online repository (e.g., Google Fonts). With regards to custom fonts stored locally on your computer though, there's something that you really, REALLY NEED to take note of. Local Custom Font Location You may be tempted to just include the font straight away like how it's plug-and-play with your other applications. For example, just by including the font inside a Fonts folder or installing it enables the font to be instantly recognized by Microsoft Word and be leveraged for use in your documents. However, while this also includes your webpages, it only works because the webpages are inside your computer. You need to be aware that the custom fonts you may have (perhaps painstakingly or jovially) installed in your computer MAY OR MAY NOT exist in other computers that don't belong to you. This can be extended to external servers where websites are deployed into. You should expect computers to have a handful of fonts that act as the bare minimum for a commonplace interface, like \"Times New Roman\", \"Courier New\", \"SimSun\", and \"Arial\". Should you want to use custom fonts, you'll need to include it in your project folder. Also.. NO, the solution is not \"Just ask the other person to install the font into their computer.\" The folder structure should be something like this if you wanted to include a custom font (this case, Roboto) locally within your project folder: project |-- css |-- styles.css |-- footer.css |-- fonts (store your custom fonts in here) |-- Roboto.ttf |-- images |-- catdog.png |-- icon.svg |-- js |-- main.js |-- index.html |-- about.html |-- error-404.html From here, you can link your font file using a relative URL easily without needing to resort to digging your C: drive or what Home directory you have in your computer just to elicit the font. Of course, if you don't link it, the font may still appear to work in your computer, but this by itself does not solve your problem with it not appearing in another computer. Make sure that in your CSS file (or wherever you're using your embedded CSS, inline CSS does not have this luxury) that's being used, you use @font-face to declare use of the font on top: 1 2 3 4 5 6 7 8 @ font-face { font-family : \"Roboto\" ; /* in this example, the font is located in a sibling folder, so you want to exit from the `css` folder before entering the `fonts` folder */ src : url ( \"../fonts/Roboto.tff\" ); /* optional: font-weight */ } Mini-Tutorial: How to Center Images in HTML In order to center <img> tags in your webpage, you may want to consider placing them into a block container element (e.g., <div> , <section> ). Then, set the text-align CSS property of that container element to center . While text-align is seemingly meant to work only with text, it can be used to align any inline elements \u2013 this includes <img> elements. You can view this mini-tutorial demonstration here to see this being applied in action:","title":"Practical 02: Applying CSS"},{"location":"archive/202204/lab02/#practical-02-applying-css","text":"This practical is an extension of Practical 01 - you will now attempt to implement visual styles to the content prepared in HTML.. unless you've done so already (in which case, you put some more \ud83d\ude1d).","title":"Practical 02: Applying CSS"},{"location":"archive/202204/lab02/#task","text":"In the webpages you created, apply the various CSS styles you've learnt in lecture (e.g., background color, fonts, image positioning, etc.). When applying CSS to your webpages, look up some good aesthetic principles web designers or developers take when designing their websites. Try to apply those principles in your webpages wherever possible.","title":"Task"},{"location":"archive/202204/lab02/#optional-task-css-responsiveness","text":"Try and implement a styling that only applies itself in mobile screens. You may look up a screen resolution for a mobile device of your choice (e.g., iPhones, tablet screens).","title":"Optional Task: CSS Responsiveness"},{"location":"archive/202204/lab02/#getting-started","text":"CSS can be applied in three different methods. The encouraged method is having your CSS in an external CSS file (i.e., external style). When referencing a CSS file, one ought to use the <link> tag within the head section of the HTML document. For example, to reference styles.css in your HTML document, the placement of your CSS <link> reference should be like as follows: 1 2 3 4 5 6 7 8 9 10 11 <!DOCTYPE html> < html > < head > <!-- some head content --> < link rel = \"stylesheet\" type = \"text/css\" href = \"styles.css\" /> </ head > < body > <!-- body content here --> </ body > </ html >","title":"Getting Started"},{"location":"archive/202204/lab02/#css-responsiveness","text":"CSS responsiveness typically has to do with making sure that websites can adapt to different screen resolutions from different devices. You can specify how content appears in different resolutions by using the media query tag. For example, the yellowgreen background color styling only applies to screens that are at least 768px wide: 1 2 3 4 5 6 7 8 9 body { background-color : orange ; } @ media only screen and ( min-width : 768px ) { body { background-color : yellowgreen ; } } Detailed information is available in Lecture 4: HTML & CSS (Part 3). However, the concept behind it is easy to understand and should be considered if you plan to make your webpage accessible on mobile screens.","title":"CSS Responsiveness"},{"location":"archive/202204/lab02/#local-custom-fonts","text":"Ah, fonts. There's something about fonts that make it part of a document's or interface's aesthetic - when used right alongside complementing visual elements, you can produce an outlook that dictates a great efferevescence from how professional it looks or how creative the author's mind is. There are various methods of including different types of fonts, one of which include using one that's locally installed in your computer; another being linking to a font that's available in an online repository (e.g., Google Fonts). With regards to custom fonts stored locally on your computer though, there's something that you really, REALLY NEED to take note of. Local Custom Font Location You may be tempted to just include the font straight away like how it's plug-and-play with your other applications. For example, just by including the font inside a Fonts folder or installing it enables the font to be instantly recognized by Microsoft Word and be leveraged for use in your documents. However, while this also includes your webpages, it only works because the webpages are inside your computer. You need to be aware that the custom fonts you may have (perhaps painstakingly or jovially) installed in your computer MAY OR MAY NOT exist in other computers that don't belong to you. This can be extended to external servers where websites are deployed into. You should expect computers to have a handful of fonts that act as the bare minimum for a commonplace interface, like \"Times New Roman\", \"Courier New\", \"SimSun\", and \"Arial\". Should you want to use custom fonts, you'll need to include it in your project folder. Also.. NO, the solution is not \"Just ask the other person to install the font into their computer.\" The folder structure should be something like this if you wanted to include a custom font (this case, Roboto) locally within your project folder: project |-- css |-- styles.css |-- footer.css |-- fonts (store your custom fonts in here) |-- Roboto.ttf |-- images |-- catdog.png |-- icon.svg |-- js |-- main.js |-- index.html |-- about.html |-- error-404.html From here, you can link your font file using a relative URL easily without needing to resort to digging your C: drive or what Home directory you have in your computer just to elicit the font. Of course, if you don't link it, the font may still appear to work in your computer, but this by itself does not solve your problem with it not appearing in another computer. Make sure that in your CSS file (or wherever you're using your embedded CSS, inline CSS does not have this luxury) that's being used, you use @font-face to declare use of the font on top: 1 2 3 4 5 6 7 8 @ font-face { font-family : \"Roboto\" ; /* in this example, the font is located in a sibling folder, so you want to exit from the `css` folder before entering the `fonts` folder */ src : url ( \"../fonts/Roboto.tff\" ); /* optional: font-weight */ }","title":"Local Custom Fonts"},{"location":"archive/202204/lab02/#mini-tutorial-how-to-center-images-in-html","text":"In order to center <img> tags in your webpage, you may want to consider placing them into a block container element (e.g., <div> , <section> ). Then, set the text-align CSS property of that container element to center . While text-align is seemingly meant to work only with text, it can be used to align any inline elements \u2013 this includes <img> elements. You can view this mini-tutorial demonstration here to see this being applied in action:","title":"Mini-Tutorial: How to Center Images in HTML"},{"location":"archive/202204/lab03/","text":"Practical 03: HTML Forms This week's practical activity explores some more features including those in HTML forms and intermediate CSS. We will attempt to create a HTML form utilizing these features (minus information retrieval, this'll be covered when we go through PHP). Task Create a form as close as the image given below: Note Right-cick on the image and select \"Open Image in New Tab\" to have a clearer view of the image. Image assets are given below: Lab 03 Activity Assets The font used to create this form is called Urbanist , and it can be found in Google Fonts. Click HERE to open the Google Fonts page showcasing the font and to get details on incorporating it into your web form. Some Extra Details For Status under Personal Particulars , include the following in the drop-down list: Please select status (disabled, selected) Active Deferred Graduated Terminated For Enrolled Program under Academic Record , include the following: Please select a program (disabled, selected) Foundation in Computing (FIC) Diploma in Information Technology (DIT) Form Submission Upon selecting the Submit button, redirect it to a different webpage called form-submitted.html . In this page, create a webpage that essentially lets the website visitor know that the details entered into the form have been successfully collected. Include any other element/text/etc. that can be considered relevant here. Extra Task Consider someone who may open your form on a mobile device such as a smartphone or tablet. Web developers or designers make use of the following meta tag in the <head> section: < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" /> This will set the viewport of the webpage, which will give the browser instructions on how to control the page's dimensions and scaling. Apart from that, media queries were used to cater for different screen sizes. Look up media queries online and try to incorporate it into your web form. You may use your browser's inspector tool to simulate viewing the webpage from a mobile device of your own choosing. Video Guide The following video will give a thorough walkthrough on how to develop the above form.","title":"Practical 03: HTML Forms"},{"location":"archive/202204/lab03/#practical-03-html-forms","text":"This week's practical activity explores some more features including those in HTML forms and intermediate CSS. We will attempt to create a HTML form utilizing these features (minus information retrieval, this'll be covered when we go through PHP).","title":"Practical 03: HTML Forms"},{"location":"archive/202204/lab03/#task","text":"Create a form as close as the image given below: Note Right-cick on the image and select \"Open Image in New Tab\" to have a clearer view of the image. Image assets are given below: Lab 03 Activity Assets The font used to create this form is called Urbanist , and it can be found in Google Fonts. Click HERE to open the Google Fonts page showcasing the font and to get details on incorporating it into your web form.","title":"Task"},{"location":"archive/202204/lab03/#some-extra-details","text":"For Status under Personal Particulars , include the following in the drop-down list: Please select status (disabled, selected) Active Deferred Graduated Terminated For Enrolled Program under Academic Record , include the following: Please select a program (disabled, selected) Foundation in Computing (FIC) Diploma in Information Technology (DIT)","title":"Some Extra Details"},{"location":"archive/202204/lab03/#form-submission","text":"Upon selecting the Submit button, redirect it to a different webpage called form-submitted.html . In this page, create a webpage that essentially lets the website visitor know that the details entered into the form have been successfully collected. Include any other element/text/etc. that can be considered relevant here.","title":"Form Submission"},{"location":"archive/202204/lab03/#extra-task","text":"Consider someone who may open your form on a mobile device such as a smartphone or tablet. Web developers or designers make use of the following meta tag in the <head> section: < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" /> This will set the viewport of the webpage, which will give the browser instructions on how to control the page's dimensions and scaling. Apart from that, media queries were used to cater for different screen sizes. Look up media queries online and try to incorporate it into your web form. You may use your browser's inspector tool to simulate viewing the webpage from a mobile device of your own choosing.","title":"Extra Task"},{"location":"archive/202204/lab03/#video-guide","text":"The following video will give a thorough walkthrough on how to develop the above form.","title":"Video Guide"},{"location":"archive/202204/lab04/","text":"Practical 04: Introduction to JavaScript In this practical, you will begin to use JavaScript in making your webpages more dynamic. JavaScript enables users to interact with the webpage's elements (and may also consequently modify the appearance of webpages through a set of action(s)). Getting Started There are two methods of implementing JavaScript into your HTML file: embedded style 1 2 3 4 5 6 7 8 9 10 11 12 13 < html > < head > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" /> < title > JavaScript Example </ title > </ head > < body > <!-- Body content --> < script > // JavaScript code here </ script > </ body > </ html > external style 1 2 3 4 5 6 7 8 9 10 11 < html > < head > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" /> < title > JavaScript Example </ title > </ head > < body > <!-- Body content --> < script src = \"script_name_here.js\" ></ script > </ body > </ html > To implement JavaScript using embedded style, the <script></script> element should be used. Location of <script> Tags Unlike CSS, you may use them in either the <head> or <body> section, or both if necessary. The only times when order is necessary is when you require a set of script commands to run first before another set of scripts. let , const and var The ECMAScript 2015 (ECMA 6) standard introduces the let and const keywords as better alternatives to var when naming variables. let is used to declare regular variables virtually the same way as how var was the go-to for the same purpose, whilst const introduces a way to create constant variables that cannot be altered upon declaration. Going forward, let and const should be used instead of var . This is mainly due to their effects on variable declarations. Declaring var is synonymous to declaring a global variable in JavaScript that can easily be modified regardless of context (i.e., in a function vs. outside of a function). By declaring a variable using var , you can expect unwanted changes in your code (basically bugs) and problems revolving scopes (i.e., function scope and block scope). Refer to the following: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 function aRandomFunction () { var a = \"Red\" ; let b = \"Blue\" ; console . log ( a , b ); // this prints: \"Red Blue\" { // Inside a block (can be for program control statements // or practically anything that uses curly parentheses) var a = \"Green\" ; let b = \"Yellow\" ; // let's assume that variables a and b // need to take on a different value temporarily here (for reasons) console . log ( a , b ); // this prints \"Green Yellow\" } // Outside of the block now console . log ( a , b ); // this prints \"Green Blue\", // can be a HUGE problem if a needs to be kept as \"Red\" } aRandomFunction (); // statement to invoke above function By declaring variables using the let keyword, you can ensure that should they need to be temporarily reassigned a different value for only within the block context, it can be done without affecting it's original value outside of said block context. This, being a trait that exists when declaring variables in many other programming languages, is something that var fails to emulate. Within JavaScript, there exists a global context/object called window which contains a number of important preset values. Think of it as like a large drawing canvas with preset items like a house with a roof of a certain color (e.g., blue). In this instance, let's assume that this window object has one attribute called color . By declaring a variable named color using the var keyword, you're essentially going to modify the default color value, which may be potentially important and will cause quite a ton of problems if tampered illegally. You can view all the attributes/variables of concern if you type out window in the Inspector Console, or simply the following statement line in a JavaScript file: // Yep, there's a bootload of 'em! for ( let v of Object . keys ( window )) document . write ( v + \"<br>\" ); The following video also gives a good explanation behind why using var to declare variables in JavaScript can be a BAD idea. Naming Variables When naming most things, it is a popular preference to adhere to the Camel Case Naming Convention . This naming convention requires that: all letters in the first word in the name be strictly in lower case, and the first letter in each subsequent word (to be placed without spaces) in upper case Examples of such names adhering to the Camel Case Naming Convention include: ports , badgerMole , numberOfPots , timeOfDay , sensor1 The other major naming convention, being Pascal Case Naming Convention , should be reserved for naming classes and objects. This naming convention requires the first letter in ALL words in the name to be upper case, the rest of which are in lower case. We will touch classes very briefly on this in Lecture 7, but know that they are not the primary focus of this module; thus there should be nearly no reason to use this convention now for the time being. Some of you who may be familiar with Python may have already been introduced to the naming convention requiring all letters to be in lower case and underscores ( _ ) to be separate each word in the name (e.g., number_of_snakes , user_input , test_subject_1 ). This naming convention is also just as acceptable as the Camel Case Naming Convention, though from my point of view, not many use it here for JavaScript. Naming Constants Constants are typically named differently, vaguely matching the convention used to name variables in Python with regards to how words are separated with underscores. However, all letters in constants are presented in upper case (e.g., NUMBER_OF_ROUNDS , KILOMETERS_TO_MILES ). Tasks Task 1 Create a HTML webpage with an empty paragraph element and a button with the text \"Click Me!\". When the button is clicked, the paragraph element should then contain the text \"You clicked the button!\". Create JavaScript code within <script> tags inside the webpage to enable this functionality. Additional Sub-task Modify the code such that it prints \"You clicked the button!\" in a new line in the browser window after each time after the button has been clicked on. Task 2 Create a HTML webpage that displays a confirm box asking users: \"Select OK to proceed or Cancel to return.\". If the OK button is selected, display an alert box that contains the message \"You may proceed.\". If the Cancel button is selected, display an alert box that contains the message \"You have chosen to cancel.\". After either alert box is dismissed, display a message on the HTML page. Create JavaScript code within <script> tags inside the webpage to enable this functionality. Task 3 Create a HTML webpage that displays a prompt box that requests users to enter their name. Once entered, an alert box should follow up with a greeting that contains the entered name. Use a separate JavaScript file to contain the JavaScript code for this functionality. Tip To link another JavaScript file for use with your HTML page, you'll still need the <script> tags, but now with a src attribute added to it: < script src = \"script.js\" ></ script > The given line looks for a JavaScript file named script.js to include together with your HTML file. All rules pertaining to locating JavaScript files in subfolders or the parent folders work the same way as how it is for CSS and image files. Task 4 Create an empty HTML file containing the following in the <body> section: 1 2 3 4 5 6 7 8 9 10 11 < script > let a = \"red\" ; let b = \"blue\" ; /* ---- INSERT CODE HERE ---- */ /* ---- END INSERT CODE ---- */ console . log ( a ); console . log ( b ); </ script > You should now be able to view from the values of a and b being printed in the console. Within the given boundaries as stated in the above code snippet, write some extra JavaScript code that will swap the values of variables a and b . You may check your variable answers using your browser's console or insert additional lines of code to automatically print out their values. Hint Use another variable to temporarily hold one of their values during the swap process.","title":"Practical 04: Introduction to JavaScript"},{"location":"archive/202204/lab04/#practical-04-introduction-to-javascript","text":"In this practical, you will begin to use JavaScript in making your webpages more dynamic. JavaScript enables users to interact with the webpage's elements (and may also consequently modify the appearance of webpages through a set of action(s)).","title":"Practical 04: Introduction to JavaScript"},{"location":"archive/202204/lab04/#getting-started","text":"There are two methods of implementing JavaScript into your HTML file: embedded style 1 2 3 4 5 6 7 8 9 10 11 12 13 < html > < head > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" /> < title > JavaScript Example </ title > </ head > < body > <!-- Body content --> < script > // JavaScript code here </ script > </ body > </ html > external style 1 2 3 4 5 6 7 8 9 10 11 < html > < head > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" /> < title > JavaScript Example </ title > </ head > < body > <!-- Body content --> < script src = \"script_name_here.js\" ></ script > </ body > </ html > To implement JavaScript using embedded style, the <script></script> element should be used.","title":"Getting Started"},{"location":"archive/202204/lab04/#location-of-script-tags","text":"Unlike CSS, you may use them in either the <head> or <body> section, or both if necessary. The only times when order is necessary is when you require a set of script commands to run first before another set of scripts.","title":"Location of &lt;script&gt; Tags"},{"location":"archive/202204/lab04/#let-const-and-var","text":"The ECMAScript 2015 (ECMA 6) standard introduces the let and const keywords as better alternatives to var when naming variables. let is used to declare regular variables virtually the same way as how var was the go-to for the same purpose, whilst const introduces a way to create constant variables that cannot be altered upon declaration. Going forward, let and const should be used instead of var . This is mainly due to their effects on variable declarations. Declaring var is synonymous to declaring a global variable in JavaScript that can easily be modified regardless of context (i.e., in a function vs. outside of a function). By declaring a variable using var , you can expect unwanted changes in your code (basically bugs) and problems revolving scopes (i.e., function scope and block scope). Refer to the following: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 function aRandomFunction () { var a = \"Red\" ; let b = \"Blue\" ; console . log ( a , b ); // this prints: \"Red Blue\" { // Inside a block (can be for program control statements // or practically anything that uses curly parentheses) var a = \"Green\" ; let b = \"Yellow\" ; // let's assume that variables a and b // need to take on a different value temporarily here (for reasons) console . log ( a , b ); // this prints \"Green Yellow\" } // Outside of the block now console . log ( a , b ); // this prints \"Green Blue\", // can be a HUGE problem if a needs to be kept as \"Red\" } aRandomFunction (); // statement to invoke above function By declaring variables using the let keyword, you can ensure that should they need to be temporarily reassigned a different value for only within the block context, it can be done without affecting it's original value outside of said block context. This, being a trait that exists when declaring variables in many other programming languages, is something that var fails to emulate. Within JavaScript, there exists a global context/object called window which contains a number of important preset values. Think of it as like a large drawing canvas with preset items like a house with a roof of a certain color (e.g., blue). In this instance, let's assume that this window object has one attribute called color . By declaring a variable named color using the var keyword, you're essentially going to modify the default color value, which may be potentially important and will cause quite a ton of problems if tampered illegally. You can view all the attributes/variables of concern if you type out window in the Inspector Console, or simply the following statement line in a JavaScript file: // Yep, there's a bootload of 'em! for ( let v of Object . keys ( window )) document . write ( v + \"<br>\" ); The following video also gives a good explanation behind why using var to declare variables in JavaScript can be a BAD idea.","title":"let, const and var"},{"location":"archive/202204/lab04/#naming-variables","text":"When naming most things, it is a popular preference to adhere to the Camel Case Naming Convention . This naming convention requires that: all letters in the first word in the name be strictly in lower case, and the first letter in each subsequent word (to be placed without spaces) in upper case Examples of such names adhering to the Camel Case Naming Convention include: ports , badgerMole , numberOfPots , timeOfDay , sensor1 The other major naming convention, being Pascal Case Naming Convention , should be reserved for naming classes and objects. This naming convention requires the first letter in ALL words in the name to be upper case, the rest of which are in lower case. We will touch classes very briefly on this in Lecture 7, but know that they are not the primary focus of this module; thus there should be nearly no reason to use this convention now for the time being. Some of you who may be familiar with Python may have already been introduced to the naming convention requiring all letters to be in lower case and underscores ( _ ) to be separate each word in the name (e.g., number_of_snakes , user_input , test_subject_1 ). This naming convention is also just as acceptable as the Camel Case Naming Convention, though from my point of view, not many use it here for JavaScript.","title":"Naming Variables"},{"location":"archive/202204/lab04/#naming-constants","text":"Constants are typically named differently, vaguely matching the convention used to name variables in Python with regards to how words are separated with underscores. However, all letters in constants are presented in upper case (e.g., NUMBER_OF_ROUNDS , KILOMETERS_TO_MILES ).","title":"Naming Constants"},{"location":"archive/202204/lab04/#tasks","text":"","title":"Tasks"},{"location":"archive/202204/lab04/#task-1","text":"Create a HTML webpage with an empty paragraph element and a button with the text \"Click Me!\". When the button is clicked, the paragraph element should then contain the text \"You clicked the button!\". Create JavaScript code within <script> tags inside the webpage to enable this functionality.","title":"Task 1"},{"location":"archive/202204/lab04/#additional-sub-task","text":"Modify the code such that it prints \"You clicked the button!\" in a new line in the browser window after each time after the button has been clicked on.","title":"Additional Sub-task"},{"location":"archive/202204/lab04/#task-2","text":"Create a HTML webpage that displays a confirm box asking users: \"Select OK to proceed or Cancel to return.\". If the OK button is selected, display an alert box that contains the message \"You may proceed.\". If the Cancel button is selected, display an alert box that contains the message \"You have chosen to cancel.\". After either alert box is dismissed, display a message on the HTML page. Create JavaScript code within <script> tags inside the webpage to enable this functionality.","title":"Task 2"},{"location":"archive/202204/lab04/#task-3","text":"Create a HTML webpage that displays a prompt box that requests users to enter their name. Once entered, an alert box should follow up with a greeting that contains the entered name. Use a separate JavaScript file to contain the JavaScript code for this functionality. Tip To link another JavaScript file for use with your HTML page, you'll still need the <script> tags, but now with a src attribute added to it: < script src = \"script.js\" ></ script > The given line looks for a JavaScript file named script.js to include together with your HTML file. All rules pertaining to locating JavaScript files in subfolders or the parent folders work the same way as how it is for CSS and image files.","title":"Task 3"},{"location":"archive/202204/lab04/#task-4","text":"Create an empty HTML file containing the following in the <body> section: 1 2 3 4 5 6 7 8 9 10 11 < script > let a = \"red\" ; let b = \"blue\" ; /* ---- INSERT CODE HERE ---- */ /* ---- END INSERT CODE ---- */ console . log ( a ); console . log ( b ); </ script > You should now be able to view from the values of a and b being printed in the console. Within the given boundaries as stated in the above code snippet, write some extra JavaScript code that will swap the values of variables a and b . You may check your variable answers using your browser's console or insert additional lines of code to automatically print out their values. Hint Use another variable to temporarily hold one of their values during the swap process.","title":"Task 4"},{"location":"archive/202204/lab05/","text":"Practical 05: JavaScript Program Control Structure & Arrays Program control structures can be leveraged in many programming languages to enable easier implementation of tasks that require decision-making or repetition that would otherwise be tedious to incorporate. This practical activity explores program control structures that can be used to implement logic into websites. Getting Started JavaScript Program Control Structure Syntax The syntax used is applicable to many other languages, but that is not of our concern at the moment. if-else Statement Syntax (Example): if ( condition1 ) { // actions #1 } else if ( condition2 ) { // actions #2 } else { // actions otherwise } switch Statement Syntax (Example): switch ( variable ) { case 1 : // do something break ; case 2 : // do something case 3 : // do something (will carry on from Case 2 since no break statement exists) break ; default : // do something } for Loop Syntax: for ( init ; condition ; update ) { /* do something here */ } for-of Loop Syntax: for ( let iter of arr ) { /* do something here */ } while Loop Syntax: init ; while ( condition ) { /* do something here */ update ; } do-while Loop Syntax: init ; do { /* do something here */ update ; } while ( condition ); JavaScript Arrays Presently, there are two ways to declare arrays: using the array() function to contain variables using square brackets [] (I very much prefer this method) Tasks Task 1 Create a HTML file that uses embedded JavaScript to carry out the following. Part 1: Display the numbers between 5 to 22 (inclusive of both) in ascending order using a for loop in the browser's console. Part 2: In the same HTML file, display the numbers between -14 and 7 (exclusive of both) in descending order using a for loop in the browser's console. Part 3: In the same HTML file, display the even numbers between 208 and 251 (inclusive of both) in descending order using a for loop in the browser's console. Task 2 Create a HTML file that uses embedded JavaScript to carry out the following. Part 1: Display the numbers between -45 to -23 (inclusive of both) in descending order using a while loop in the browser's console. Part 2: In the same HTML file, display the numbers between 18 and 36 (exclusive of both) in ascending order using a while loop in the browser's console. Part 3: In the same HTML file, display the odd numbers between 208 and 251 (inclusive of both) in ascending order using a while loop in the browser's console. Task 3 Create an empty HTML file containing the following in the <body> section: < script > let num = 16 ; console . log ( \"while looping..\" ); while ( num < 15 ) { console . log ( num ); num ++ ; } console . log ( \"do-while looping..\" ); </ script > After the last line given, utilize a do-while loop to carry out the same purpose as with the given while loop (i.e., use a do-while loop to print the value of num as it increases after each loop). What is the difference between these two loops in terms of their functions? Task 4 Create a HTML file that uses embedded JavaScript to carry out the following. Prompt users to enter a year using a prompt box. Set the default value to the current year. After entering the year, the browser window should display the Chinese zodiac animal that corresponds with the given remainder after dividing by 12: Remainder Chinese Zodiac Animal Remainder Chinese Zodiac Animal 0 Monkey 6 Tiger 1 Rooster 7 Rabbit 2 Dog 8 Dragon 3 Pig 9 Snake 4 Rat 10 Horse 5 Ox 11 Sheep Task 5 The Body Mass Index (BMI) is a measure of health on weight. A person's BMI is calculated by taking the person's weight (in kilograms) divided by the person's height squared (height in meters). Create a BMI script that takes in both a person's weight and height as values to interpret the person's BMI. The respective BMI interpretations are as follows: BMI Interpretation BMI < 18.5 Underweight 18.5 \u2264 BMI < 25.0 Normal 25.0 \u2264 BMI < 30.0 Overweight BMI \u2265 30.0 Obese Implement the written script in a JavaScript file separate from your HTML file . You may choose to output the result from the console or via visual elements on your webpage (i.e., print the result in the browser window as a paragraph or regular text). Task 6 Create a HTML file that uses external JavaScript to carry out the following. Create an external JavaScript file that contains an array named students which contains the following values: 'Anthony', 'Barry', 'Desmond', 'Grenda'. Print the students array in the console. Utilize a for-of loop to display the array elements in the console. Pop the last element in the students array (i.e., Grenda). Hint Use the pop() function. Append the values 'Marie' and 'Zacchaeus' to the end of the students array. Print the array again; you do not need any loop structure this time. Hint Use the push() function. Remove the first value from the students array (i.e., Anthony), and replace it with a new element 'Charlie'. Print the array again; just like last time, you do not need any loop structure here. Hint There exists a shift() function that can do one of the given requirements here. Perhaps there's also an unshift function which does the opposite as well? Activity: Bubble Sort Bubble sort is one of many types of sorting algorithms taught in data structures and algorithms courses. Watch the following video to understand the concept behind bubble sort (0:48 to 2:40). In this activity, we will be using an external JavaScript file to contain our logic and the browser's inspector console to view our outputs. Our HTML page should be as follows: 1 2 3 4 5 6 7 8 9 10 < html > < head > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" /> < title > JavaScript Bubble Sort </ title > </ head > < body > <!-- I'm assuming the JavaScript file is named as follows and is in the same file directory as this HTML file. --> < script src = \"bubbleSort.js\" ></ script > </ body > </ html > Let's start our JavaScript file as follows: const array = [ 10 , - 3 , 55 , - 10 , - 24 , 54 , 0 , - 21 , 8 ]; console . log ( `Unsorted array:` , array ); Line 2 should print out the array with its elements in the original order. Let's use bubble sort to reorder the elements in this array in ascending order. Below the given JavaScript code snippet, declare a variable called is_sorted . This variable will serve as a flag variable that will determine whether to continue running through another iteration of the bubble sort algorithm. Our implementation of the bubble sort algorithm will be encapsulated within a do-while loop like as follows: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 const array = [ 10 , - 3 , 55 , - 10 , - 24 , 54 , 0 , - 21 , 8 ]; console . log ( `Unsorted array:` , array ); let is_sorted ; /** * the bubble sort algorithm will continue running * as long as is_sorted is true AFTER each iteration */ do { // we start every iteration of the algorithm by making is_sorted true is_sorted = true ; } while ( is_sorted ); console . log ( `Sorted array:` , array ); Using a do-while loop makes it such that we won't require is_sorted to be initialized with a value just yet. Upon completing all the necessary rounds with the bubble sort algorithm, we will print out the sorted array. An alternative to using the do-while loop in this case is a for/of loop. Within the do-while loop, we will implement another loop structure - this time, we will be using a for loop. const array = [ 10 , - 3 , 55 , - 10 , - 24 , 54 , 0 , - 21 , 8 ]; console . log ( `Unsorted array:` , array ); let is_sorted ; /** * the bubble sort algorithm will continue running * as long as is_sorted is true AFTER each iteration */ do { // we start every iteration of the algorithm by making is_sorted true is_sorted = true ; for ( let j = 0 ; j < array . length ; ++ j ) { // we start comparing elements in here } } while ( is_sorted ); console . log ( `Sorted array:` , array ); The mechanism behind how the bubble sort algorithm works revolves around comparing each element against its neighboring element in the array. In this implementation, we compare to check if each element is smaller than the left neighbor. At the end of each iteration, the largest element \"bubbles\" up to the end of the unsorted portion of the array (hence, why it's called bubble sort). const array = [ 10 , - 3 , 55 , - 10 , - 24 , 54 , 0 , - 21 , 8 ]; console . log ( `Unsorted array:` , array ); let is_sorted ; /** * the bubble sort algorithm will continue running * as long as is_sorted is true AFTER each iteration */ do { // we start every iteration of the algorithm by making is_sorted true is_sorted = true ; for ( let j = 0 ; j < array . length ; ++ j ) { /** * checks if element (i.e., array[j]) * is smaller than the left neighbor (i.e., array[j - 1]) * * if so, flag is_sorted as false * and swap the element with its neighbor */ if ( array [ j ] < array [ j - 1 ]) { is_sorted = false ; const temp = array [ j ]; array [ j ] = array [ j - 1 ]; array [ j - 1 ] = temp ; } } } while ( is_sorted ); console . log ( `Sorted array:` , array ); And voila, we basically created a simple implementation of the bubble sort algorithm. We can make a few changes to make this algorithm perform more efficiently though (in data structures and algorithms courses, the idea is to produce efficient algorithms or structures that utilize as little computer resources and/or time as possible). Modifications for Efficiency Here the do-while loop makes it such that the whole algorithm keeps iterating over the whole array to see if it is sorted. However, we have established that after each iteration, every last element in the unsorted portion of the array is considered as sorted. Therefore, we do not need each iteration to loop through to check against the sorted portion of the array. We can do this by replacing the do-while loop with another for loop with another iterator variable. After that, we can deduct the value of that iterator variable from array.length in the inner for loop (i.e., array_length - i ). In this implementation, the first iteration checks the whole array since array_length - 0 . In each subsequent iteration, i is incremented by 1, and the range checked in the inner for loop shrinks by size 1 (i.e., array_length - 1 in iteration #2, array_length - 2 in iteration #3, and so on). const array = [ 10 , - 3 , 55 , - 10 , - 24 , 54 , 0 , - 21 , 8 ]; console . log ( `Unsorted array:` , array ); let is_sorted ; /** * the bubble sort algorithm will continue running * as long as is_sorted is true AFTER each iteration */ for ( let i = 0 ; i < array . length ; ++ i ) { // we start every iteration of the algorithm by making is_sorted true is_sorted = true ; for ( let j = 0 ; j < array . length - i ; ++ j ) { /** * checks if element (i.e., array[j]) * is smaller than the left neighbor (i.e., array[j - 1]) * * if so, flag is_sorted as false * and swap the element with its neighbor */ if ( array [ j ] < array [ j - 1 ]) { is_sorted = false ; const temp = array [ j ]; array [ j ] = array [ j - 1 ]; array [ j - 1 ] = temp ; } } } console . log ( `Sorted array:` , array ); We can also make the algorithm work such that it only proceeds if there was a swap during that iteration (i.e., is_sorted has turned false). If is_sorted remains true after that iteration, it should indicate that there is nothing else to sort in the array and it is safe to leave the array be. We do this by adding an if statement at the end of the outer for loop which breaks through that loop if is_sorted has remained true. const array = [ 10 , - 3 , 55 , - 10 , - 24 , 54 , 0 , - 21 , 8 ]; console . log ( `Unsorted array:` , array ); let is_sorted ; /** * the bubble sort algorithm will continue running * as long as is_sorted is true AFTER each iteration */ for ( let i = 0 ; i < array . length ; ++ i ) { // we start every iteration of the algorithm by making is_sorted true is_sorted = true ; for ( let j = 0 ; j < array . length - i ; ++ j ) { /** * checks if element (i.e., array[j]) * is smaller than the left neighbor (i.e., array[j - 1]) * * if so, flag is_sorted as false * and swap the element with its neighbor */ if ( array [ j ] < array [ j - 1 ]) { is_sorted = false ; const temp = array [ j ]; array [ j ] = array [ j - 1 ]; array [ j - 1 ] = temp ; } } if ( is_sorted ) { break ; } } console . log ( `Sorted array:` , array ); Randomized Array So far, we've only tested this algorithm on one type of array. We can test this using different arrays to see if it works. Here, we will implement an array of 10 randomized integers between -100 and 100. We start with an empty array and we utilize a for loop to iterate over a set number of times (i.e., ARRAY_SIZE ) to push integers of the aforementioned range. If you would like to try with a larger array size, simply modify the value of ARRAY_SIZE , but be sure to only place in positive integers or this will not work. const ARRAY_SIZE = 10 ; const array = []; for ( let i = 0 ; i < ARRAY_SIZE ; ++ i ) { array . push ( Math . floor ( Math . random () * 201 - 100 )); } console . log ( `Unsorted array:` , array ); let is_sorted ; /** * the bubble sort algorithm will continue running * as long as is_sorted is true AFTER each iteration */ for ( let i = 0 ; i < array . length ; ++ i ) { // we start every iteration of the algorithm by making is_sorted true is_sorted = true ; for ( let j = 0 ; j < array . length - i ; ++ j ) { /** * checks if element (i.e., array[j]) * is smaller than the left neighbor (i.e., array[j - 1]) * * if so, flag is_sorted as false * and swap the element with its neighbor */ if ( array [ j ] < array [ j - 1 ]) { is_sorted = false ; const temp = array [ j ]; array [ j ] = array [ j - 1 ]; array [ j - 1 ] = temp ; } } if ( is_sorted ) { break ; } } console . log ( `Sorted array:` , array ); Math.random() produces a decimal value between 0 (inclusive) and 1 (not inclusive). We need to expand this range to cater for all values between -100 and 100 (both inclusive), which totals up to 201 (100 -(-100) + 1). Therefore, we multiply Math.random() by 201, i.e., Math.random() * 201 . This, however, produces numbers between 0 (inclusive) and 201 (exclusive). To shift the range to be between -100 (inclusive) and 101 (exclusive), we deduct that product by 100 (i.e., Math.random() * 201 - 100 ). Still, do note that Math.random() produces decimal values, and Math.random() * 201 - 100 will give any decimal value between -100 and 100 (both inclusive). We use the Math.floor() function to take the floor boundary of the generated value in order to produce that integer. Note that we do not take the ceiling boundary of the generated value (i.e., Math.ceiling() ), as this will give values between -99 and 101 (both inclusive) instead. We also do not use regular rounding off of those decimal values (i.e., Math.round() ), as this gives values between -100 and 101 (both inclusive).","title":"Practical 05: JavaScript Program Control Structure & Arrays"},{"location":"archive/202204/lab05/#practical-05-javascript-program-control-structure-arrays","text":"Program control structures can be leveraged in many programming languages to enable easier implementation of tasks that require decision-making or repetition that would otherwise be tedious to incorporate. This practical activity explores program control structures that can be used to implement logic into websites.","title":"Practical 05: JavaScript Program Control Structure &amp; Arrays"},{"location":"archive/202204/lab05/#getting-started","text":"","title":"Getting Started"},{"location":"archive/202204/lab05/#javascript-program-control-structure-syntax","text":"The syntax used is applicable to many other languages, but that is not of our concern at the moment. if-else Statement Syntax (Example): if ( condition1 ) { // actions #1 } else if ( condition2 ) { // actions #2 } else { // actions otherwise } switch Statement Syntax (Example): switch ( variable ) { case 1 : // do something break ; case 2 : // do something case 3 : // do something (will carry on from Case 2 since no break statement exists) break ; default : // do something } for Loop Syntax: for ( init ; condition ; update ) { /* do something here */ } for-of Loop Syntax: for ( let iter of arr ) { /* do something here */ } while Loop Syntax: init ; while ( condition ) { /* do something here */ update ; } do-while Loop Syntax: init ; do { /* do something here */ update ; } while ( condition );","title":"JavaScript Program Control Structure Syntax"},{"location":"archive/202204/lab05/#javascript-arrays","text":"Presently, there are two ways to declare arrays: using the array() function to contain variables using square brackets [] (I very much prefer this method)","title":"JavaScript Arrays"},{"location":"archive/202204/lab05/#tasks","text":"","title":"Tasks"},{"location":"archive/202204/lab05/#task-1","text":"Create a HTML file that uses embedded JavaScript to carry out the following. Part 1: Display the numbers between 5 to 22 (inclusive of both) in ascending order using a for loop in the browser's console. Part 2: In the same HTML file, display the numbers between -14 and 7 (exclusive of both) in descending order using a for loop in the browser's console. Part 3: In the same HTML file, display the even numbers between 208 and 251 (inclusive of both) in descending order using a for loop in the browser's console.","title":"Task 1"},{"location":"archive/202204/lab05/#task-2","text":"Create a HTML file that uses embedded JavaScript to carry out the following. Part 1: Display the numbers between -45 to -23 (inclusive of both) in descending order using a while loop in the browser's console. Part 2: In the same HTML file, display the numbers between 18 and 36 (exclusive of both) in ascending order using a while loop in the browser's console. Part 3: In the same HTML file, display the odd numbers between 208 and 251 (inclusive of both) in ascending order using a while loop in the browser's console.","title":"Task 2"},{"location":"archive/202204/lab05/#task-3","text":"Create an empty HTML file containing the following in the <body> section: < script > let num = 16 ; console . log ( \"while looping..\" ); while ( num < 15 ) { console . log ( num ); num ++ ; } console . log ( \"do-while looping..\" ); </ script > After the last line given, utilize a do-while loop to carry out the same purpose as with the given while loop (i.e., use a do-while loop to print the value of num as it increases after each loop). What is the difference between these two loops in terms of their functions?","title":"Task 3"},{"location":"archive/202204/lab05/#task-4","text":"Create a HTML file that uses embedded JavaScript to carry out the following. Prompt users to enter a year using a prompt box. Set the default value to the current year. After entering the year, the browser window should display the Chinese zodiac animal that corresponds with the given remainder after dividing by 12: Remainder Chinese Zodiac Animal Remainder Chinese Zodiac Animal 0 Monkey 6 Tiger 1 Rooster 7 Rabbit 2 Dog 8 Dragon 3 Pig 9 Snake 4 Rat 10 Horse 5 Ox 11 Sheep","title":"Task 4"},{"location":"archive/202204/lab05/#task-5","text":"The Body Mass Index (BMI) is a measure of health on weight. A person's BMI is calculated by taking the person's weight (in kilograms) divided by the person's height squared (height in meters). Create a BMI script that takes in both a person's weight and height as values to interpret the person's BMI. The respective BMI interpretations are as follows: BMI Interpretation BMI < 18.5 Underweight 18.5 \u2264 BMI < 25.0 Normal 25.0 \u2264 BMI < 30.0 Overweight BMI \u2265 30.0 Obese Implement the written script in a JavaScript file separate from your HTML file . You may choose to output the result from the console or via visual elements on your webpage (i.e., print the result in the browser window as a paragraph or regular text).","title":"Task 5"},{"location":"archive/202204/lab05/#task-6","text":"Create a HTML file that uses external JavaScript to carry out the following. Create an external JavaScript file that contains an array named students which contains the following values: 'Anthony', 'Barry', 'Desmond', 'Grenda'. Print the students array in the console. Utilize a for-of loop to display the array elements in the console. Pop the last element in the students array (i.e., Grenda). Hint Use the pop() function. Append the values 'Marie' and 'Zacchaeus' to the end of the students array. Print the array again; you do not need any loop structure this time. Hint Use the push() function. Remove the first value from the students array (i.e., Anthony), and replace it with a new element 'Charlie'. Print the array again; just like last time, you do not need any loop structure here. Hint There exists a shift() function that can do one of the given requirements here. Perhaps there's also an unshift function which does the opposite as well?","title":"Task 6"},{"location":"archive/202204/lab05/#activity-bubble-sort","text":"Bubble sort is one of many types of sorting algorithms taught in data structures and algorithms courses. Watch the following video to understand the concept behind bubble sort (0:48 to 2:40). In this activity, we will be using an external JavaScript file to contain our logic and the browser's inspector console to view our outputs. Our HTML page should be as follows: 1 2 3 4 5 6 7 8 9 10 < html > < head > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" /> < title > JavaScript Bubble Sort </ title > </ head > < body > <!-- I'm assuming the JavaScript file is named as follows and is in the same file directory as this HTML file. --> < script src = \"bubbleSort.js\" ></ script > </ body > </ html > Let's start our JavaScript file as follows: const array = [ 10 , - 3 , 55 , - 10 , - 24 , 54 , 0 , - 21 , 8 ]; console . log ( `Unsorted array:` , array ); Line 2 should print out the array with its elements in the original order. Let's use bubble sort to reorder the elements in this array in ascending order. Below the given JavaScript code snippet, declare a variable called is_sorted . This variable will serve as a flag variable that will determine whether to continue running through another iteration of the bubble sort algorithm. Our implementation of the bubble sort algorithm will be encapsulated within a do-while loop like as follows: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 const array = [ 10 , - 3 , 55 , - 10 , - 24 , 54 , 0 , - 21 , 8 ]; console . log ( `Unsorted array:` , array ); let is_sorted ; /** * the bubble sort algorithm will continue running * as long as is_sorted is true AFTER each iteration */ do { // we start every iteration of the algorithm by making is_sorted true is_sorted = true ; } while ( is_sorted ); console . log ( `Sorted array:` , array ); Using a do-while loop makes it such that we won't require is_sorted to be initialized with a value just yet. Upon completing all the necessary rounds with the bubble sort algorithm, we will print out the sorted array. An alternative to using the do-while loop in this case is a for/of loop. Within the do-while loop, we will implement another loop structure - this time, we will be using a for loop. const array = [ 10 , - 3 , 55 , - 10 , - 24 , 54 , 0 , - 21 , 8 ]; console . log ( `Unsorted array:` , array ); let is_sorted ; /** * the bubble sort algorithm will continue running * as long as is_sorted is true AFTER each iteration */ do { // we start every iteration of the algorithm by making is_sorted true is_sorted = true ; for ( let j = 0 ; j < array . length ; ++ j ) { // we start comparing elements in here } } while ( is_sorted ); console . log ( `Sorted array:` , array ); The mechanism behind how the bubble sort algorithm works revolves around comparing each element against its neighboring element in the array. In this implementation, we compare to check if each element is smaller than the left neighbor. At the end of each iteration, the largest element \"bubbles\" up to the end of the unsorted portion of the array (hence, why it's called bubble sort). const array = [ 10 , - 3 , 55 , - 10 , - 24 , 54 , 0 , - 21 , 8 ]; console . log ( `Unsorted array:` , array ); let is_sorted ; /** * the bubble sort algorithm will continue running * as long as is_sorted is true AFTER each iteration */ do { // we start every iteration of the algorithm by making is_sorted true is_sorted = true ; for ( let j = 0 ; j < array . length ; ++ j ) { /** * checks if element (i.e., array[j]) * is smaller than the left neighbor (i.e., array[j - 1]) * * if so, flag is_sorted as false * and swap the element with its neighbor */ if ( array [ j ] < array [ j - 1 ]) { is_sorted = false ; const temp = array [ j ]; array [ j ] = array [ j - 1 ]; array [ j - 1 ] = temp ; } } } while ( is_sorted ); console . log ( `Sorted array:` , array ); And voila, we basically created a simple implementation of the bubble sort algorithm. We can make a few changes to make this algorithm perform more efficiently though (in data structures and algorithms courses, the idea is to produce efficient algorithms or structures that utilize as little computer resources and/or time as possible).","title":"Activity: Bubble Sort"},{"location":"archive/202204/lab05/#modifications-for-efficiency","text":"Here the do-while loop makes it such that the whole algorithm keeps iterating over the whole array to see if it is sorted. However, we have established that after each iteration, every last element in the unsorted portion of the array is considered as sorted. Therefore, we do not need each iteration to loop through to check against the sorted portion of the array. We can do this by replacing the do-while loop with another for loop with another iterator variable. After that, we can deduct the value of that iterator variable from array.length in the inner for loop (i.e., array_length - i ). In this implementation, the first iteration checks the whole array since array_length - 0 . In each subsequent iteration, i is incremented by 1, and the range checked in the inner for loop shrinks by size 1 (i.e., array_length - 1 in iteration #2, array_length - 2 in iteration #3, and so on). const array = [ 10 , - 3 , 55 , - 10 , - 24 , 54 , 0 , - 21 , 8 ]; console . log ( `Unsorted array:` , array ); let is_sorted ; /** * the bubble sort algorithm will continue running * as long as is_sorted is true AFTER each iteration */ for ( let i = 0 ; i < array . length ; ++ i ) { // we start every iteration of the algorithm by making is_sorted true is_sorted = true ; for ( let j = 0 ; j < array . length - i ; ++ j ) { /** * checks if element (i.e., array[j]) * is smaller than the left neighbor (i.e., array[j - 1]) * * if so, flag is_sorted as false * and swap the element with its neighbor */ if ( array [ j ] < array [ j - 1 ]) { is_sorted = false ; const temp = array [ j ]; array [ j ] = array [ j - 1 ]; array [ j - 1 ] = temp ; } } } console . log ( `Sorted array:` , array ); We can also make the algorithm work such that it only proceeds if there was a swap during that iteration (i.e., is_sorted has turned false). If is_sorted remains true after that iteration, it should indicate that there is nothing else to sort in the array and it is safe to leave the array be. We do this by adding an if statement at the end of the outer for loop which breaks through that loop if is_sorted has remained true. const array = [ 10 , - 3 , 55 , - 10 , - 24 , 54 , 0 , - 21 , 8 ]; console . log ( `Unsorted array:` , array ); let is_sorted ; /** * the bubble sort algorithm will continue running * as long as is_sorted is true AFTER each iteration */ for ( let i = 0 ; i < array . length ; ++ i ) { // we start every iteration of the algorithm by making is_sorted true is_sorted = true ; for ( let j = 0 ; j < array . length - i ; ++ j ) { /** * checks if element (i.e., array[j]) * is smaller than the left neighbor (i.e., array[j - 1]) * * if so, flag is_sorted as false * and swap the element with its neighbor */ if ( array [ j ] < array [ j - 1 ]) { is_sorted = false ; const temp = array [ j ]; array [ j ] = array [ j - 1 ]; array [ j - 1 ] = temp ; } } if ( is_sorted ) { break ; } } console . log ( `Sorted array:` , array );","title":"Modifications for Efficiency"},{"location":"archive/202204/lab05/#randomized-array","text":"So far, we've only tested this algorithm on one type of array. We can test this using different arrays to see if it works. Here, we will implement an array of 10 randomized integers between -100 and 100. We start with an empty array and we utilize a for loop to iterate over a set number of times (i.e., ARRAY_SIZE ) to push integers of the aforementioned range. If you would like to try with a larger array size, simply modify the value of ARRAY_SIZE , but be sure to only place in positive integers or this will not work. const ARRAY_SIZE = 10 ; const array = []; for ( let i = 0 ; i < ARRAY_SIZE ; ++ i ) { array . push ( Math . floor ( Math . random () * 201 - 100 )); } console . log ( `Unsorted array:` , array ); let is_sorted ; /** * the bubble sort algorithm will continue running * as long as is_sorted is true AFTER each iteration */ for ( let i = 0 ; i < array . length ; ++ i ) { // we start every iteration of the algorithm by making is_sorted true is_sorted = true ; for ( let j = 0 ; j < array . length - i ; ++ j ) { /** * checks if element (i.e., array[j]) * is smaller than the left neighbor (i.e., array[j - 1]) * * if so, flag is_sorted as false * and swap the element with its neighbor */ if ( array [ j ] < array [ j - 1 ]) { is_sorted = false ; const temp = array [ j ]; array [ j ] = array [ j - 1 ]; array [ j - 1 ] = temp ; } } if ( is_sorted ) { break ; } } console . log ( `Sorted array:` , array ); Math.random() produces a decimal value between 0 (inclusive) and 1 (not inclusive). We need to expand this range to cater for all values between -100 and 100 (both inclusive), which totals up to 201 (100 -(-100) + 1). Therefore, we multiply Math.random() by 201, i.e., Math.random() * 201 . This, however, produces numbers between 0 (inclusive) and 201 (exclusive). To shift the range to be between -100 (inclusive) and 101 (exclusive), we deduct that product by 100 (i.e., Math.random() * 201 - 100 ). Still, do note that Math.random() produces decimal values, and Math.random() * 201 - 100 will give any decimal value between -100 and 100 (both inclusive). We use the Math.floor() function to take the floor boundary of the generated value in order to produce that integer. Note that we do not take the ceiling boundary of the generated value (i.e., Math.ceiling() ), as this will give values between -99 and 101 (both inclusive) instead. We also do not use regular rounding off of those decimal values (i.e., Math.round() ), as this gives values between -100 and 101 (both inclusive).","title":"Randomized Array"},{"location":"archive/202204/lab06/","text":"Practical 06: JavaScript Functions & HTML DOM Manipulation This rather challenging practical activity exposes how functions can be used within JavaScript, and how it can interact with web elements in the HTML Document Object Model (DOM). Should you require more guidance, there are plenty of online tutorials detailing multiple solutions - it's best if you can explore and test them out to the best of your ability. Getting Started Functions can be tricky to understand in JavaScript, as unlike some languages like Java or C++, the urgency as to when a function needs to return a value or not is never explicitly stated. Function declarations in JavaScript follow the given syntax: function functionNameHere ( param_1 , param_2 , ..., param_n ) { } The items you include in the round parentheses are referred to as parameters. Sometimes, parameters are required to carry out a function's intended purpose(s). For example, the following function makes use of two number values with intentions to produce the sum after totalling them up. function addition ( number1 , number2 ) { // number addition logic here } The following function, however, does not require any parameter values to display a greeting message, and thus has no parameters associated with it. function greeting () { console . log ( \"Hello World!\" ); } It is imperative to know that there is no such rule that states how many parameters EVERY function needs to have. The number of parameters any function should contain solely lies on any need to depend on any external value(s) to properly carry out its.. well, function. Sometimes, functions can also be used to return values as the last step in completing their purpose(s). In such cases, a return statement is invoked from the function (not necesarily at the end all the time, but merely a traditional thing). For instance, let's refer to the addition function from earlier again. Upon calculating the sum of the two numbers, depending on how you are to present your output, you can choose to have the function just print the sum out or return it out of the function as a form of output at the line that spawned its use. Here's how it will look like if the main idea is to solely print out the sum of the two numbers from within the function: function addition ( number1 , number2 ) { let sum = number1 + number2 ; console . log ( `The sum of the two numbers is ${ sum } .` ); } Here's another variation of the same function, with the main difference being that it returns the sum at the end. function addition ( number1 , number2 ) { let sum = number1 + number2 ; return sum ; // return statement } Admittedly, this may seem relatively confusing as compared to implementing functions in other programming languages like C or Java where one can tell if a function is to return a value or not. For instance, in these two languages the data type of the intended return value is to be explicitly stated in the function declaration itself, or void if it's supposed to not return anything at all. However, just by knowing how you want to craft your function based on the set requirements should be able to provide enough information to keep you going here. Warm-up For each of the following purposes, determine if the function to be created to simulate such should make use of any parameters or not. If so, name them and describe how they will be used in your supposed function. As practice, you may also consider developing these functions with these plans in mind to be used with a HTML page. You may name your parameter(s) and/or function(s) as you please, but preferably with respect to their meaningfulness. This function delivers a greeting based on a provided language from a list of available languages. Model Answer function greeting ( language ) This can be interpreted in many ways - the language can be provided by being passed into the function (e.g., via a prompt box), or the function can have a mechanism in it that will obtain that language value from a drop-down list element, for instance. In the latter case, we can safely omit the language parameter from the function declaration. This function prints out the first 20 numbers in a sequence dictated by an already preset Maclaurin series expression. For testing purposes, you can use the common Maclaurin function: \\[ \\frac{1}{1-x} = 1 + x + x^2 + x^3 + x^4 + ... \\] Use x = 1 to x = 20 in this function. Model Answer function printMaclaurin () The description states a preset number of terms to be printed (i.e., 20), so this value need not be put in as a parameter to the function. This function gathers two strings to check if the first letter in each one match regardless of case. Model Answer function firstLetterMatch ( string1 , string2 ) Two strings are needed from the user, so it only seems right to have them provided as parameters in this case. This function retrieves the user input from a HTML <input> field to prepare an array of distinct characters used in said input. Model Answer function userInputToArray () The description mentions that the user input is to be retrieved from a HTML <input> field, so there is no need to pass it in as a function parameter. This function calculates the age of a person, place, or object by using its year of origin/date of birth/etc. and the current year during use. Model Answer function calculateAge ( year ) Just like the first one, this description does not make clear of how the year of origin/date of birth/etc. is to be obtained from the user. You can have the function read the HTML element's value from within the function, or get the user to enter it from a prompt box. In the earlier case, you don't need the year to be passed in as a parameter. Tasks Task 1 Drivers who are 16 years of age and older can apply for driving a license online. The government webpage code requires applicants to enter their age and then checks if they are old enough to apply. The following code captures the applicant\u2019s age. When the applicant clicks the 'Check now' button the age is first checked to ensure that it is numeric. The age is then checked to see if the applicant is old enough. Suitable messages are displayed as a result of the checks. Part 1: Create an empty webpage with the following HTML scripts inside the <body> section. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 < p > You can apply for a license to drive when you are 16 years old. </ p > < p > To check if you are old enough to drive, input your age and click the button: </ p > < input type = \"number\" id = \"ageNow\" /> < button onclick = \"checkAgeFunction()\" > Check now </ button > < p id = \"ageCheck\" ></ p > < script type = \"text/javascript\" > function checkAgeFunction () { /* ---- INSERT CODE HERE ---- */ /* ---- END INSERT CODE ---- */ document . getElementById ( \"ageCheck\" ). innerHTML = canApply ; } </ script > Part 2: Complete the code for checkAgeFunction() that checks the age entered by the applicant and displays an appropriate response. Task 2 Create a HTML file that uses embedded JavaScript to carry out the following. Create a function called arrayFromRange() which creates an array of integers between and including the two numbers that are passed into the function. Example: arrayFromRange ( 5 , 10 ); // this should return [5, 6, 7, 8, 9, 10] arrayFromRange ( - 10 , - 4 ); // this should return [-10, -9, -8, -7, -6, -5, -4]; After creating the function, add another line of JavaScript code at the very end of the <script> element to invoke the created function. Task 3 Create a HTML file that uses embedded JavaScript to carry out the following. You are required to only use the browser's inspector console to generate outputs. Part 1: Create a function that takes two numbers and returns the maximum of the two. ( NOTE: If the two numbers are the same, the function should return the same number.) Part 2: Create a function that takes in a circle's radius value and returns the area of the circle with that radius. Task 4 Create a HTML file that uses external JavaScript to carry out the following. Part 1: In the <body> section, create a single paragraph <p> element with an id value \"result\" containing the text: \"The FizzBuzz Test\". Part 2: Add a <script> tag referencing a JavaScript file called fizzbuzz.js . Part 3: Create the fizzbuzz.js JavaScript file. It should contain the following code snippet: function fizzBuzz ( input ) { /* ---- CONTINUE CODE FROM HERE ---- */ } const number = 15 ; // edit this constant value to test fizzBuzz() document . getElementById ( \"result\" ). innerHTML = fizzBuzz ( number ); The last line makes it such that the value obtained from the fizzBuzz() function is appended into the <p> element with id \"result\" . Part 4: Complete the fizzBuzz() function such that it return \"Fizz\" if the number is divisible by 3, and \"Buzz\" if it is divisible by 5. If the number is divisible by both 3 and 5, fizzBuzz() should return \"FizzBuzz\". If the number is not divisible by 3 or 5, fizzBuzz() should return the value stored in the used input parameter. // Examples fizzBuzz ( 3 ); // it should return \"Fizz\" fizzBuzz ( 10 ); // it should return \"Buzz\" fizzBuzz ( 30 ); // it should return \"FizzBuzz\" fizzBuzz ( 31 ); // it should return 31 Note Do NOT use document.write() or console.log() in the function. You are required to use the return statement instead. Part 5: Implement a check to see if input is a number or not. If the input is not a number (e.g. string, Boolean), it should print \"Not a number\". This needs to be checked first before determining its divisibility. // these should return \"Not a number\" fizzBuzz ( \"3\" ); fizzBuzz ( false ); Hint Use the typeof operator to check the variable's type. Task 5 Create a HTML file that uses external JavaScript to carry out the following. You are required to only use the browser's inspector console to generate outputs. Part 1: Create an object named movie which contains the following attributes: title: \"Big Hero 6\" releaseYear: 2014 rating: 7.8 director_1: \"Don Hall\" director_2: \"Chris Williams\" Part 2: Use the for-in loop to iterate through the movie object's attributes, printing them each time. Part 3: In the same for-in loop, implement a check such that only the attributes containing string values are printed in the console. Challenge Tasks Challenge Task 1 Create a HTML file that uses embedded JavaScript to carry out the following. Part 1: Create a <script> element located in the <head> section containing the following code snippet: 1 2 3 4 5 6 function showPrimes ( limit ) { for ( let number = 2 ; number <= limit ; ++ number ) { let isPrime = true ; /* ---- CONTINUE CODE FROM HERE ---- */ } } The given code snippet depicts a function named showPrimes which takes in a parameter value called limit . Part 2: In the <body> section, create another <script> element containing the following line: showPrimes ( 20 );","title":"Practical 06: JavaScript Functions & HTML DOM Manipulation"},{"location":"archive/202204/lab06/#practical-06-javascript-functions-html-dom-manipulation","text":"This rather challenging practical activity exposes how functions can be used within JavaScript, and how it can interact with web elements in the HTML Document Object Model (DOM). Should you require more guidance, there are plenty of online tutorials detailing multiple solutions - it's best if you can explore and test them out to the best of your ability.","title":"Practical 06: JavaScript Functions &amp; HTML DOM Manipulation"},{"location":"archive/202204/lab06/#getting-started","text":"Functions can be tricky to understand in JavaScript, as unlike some languages like Java or C++, the urgency as to when a function needs to return a value or not is never explicitly stated. Function declarations in JavaScript follow the given syntax: function functionNameHere ( param_1 , param_2 , ..., param_n ) { } The items you include in the round parentheses are referred to as parameters. Sometimes, parameters are required to carry out a function's intended purpose(s). For example, the following function makes use of two number values with intentions to produce the sum after totalling them up. function addition ( number1 , number2 ) { // number addition logic here } The following function, however, does not require any parameter values to display a greeting message, and thus has no parameters associated with it. function greeting () { console . log ( \"Hello World!\" ); } It is imperative to know that there is no such rule that states how many parameters EVERY function needs to have. The number of parameters any function should contain solely lies on any need to depend on any external value(s) to properly carry out its.. well, function. Sometimes, functions can also be used to return values as the last step in completing their purpose(s). In such cases, a return statement is invoked from the function (not necesarily at the end all the time, but merely a traditional thing). For instance, let's refer to the addition function from earlier again. Upon calculating the sum of the two numbers, depending on how you are to present your output, you can choose to have the function just print the sum out or return it out of the function as a form of output at the line that spawned its use. Here's how it will look like if the main idea is to solely print out the sum of the two numbers from within the function: function addition ( number1 , number2 ) { let sum = number1 + number2 ; console . log ( `The sum of the two numbers is ${ sum } .` ); } Here's another variation of the same function, with the main difference being that it returns the sum at the end. function addition ( number1 , number2 ) { let sum = number1 + number2 ; return sum ; // return statement } Admittedly, this may seem relatively confusing as compared to implementing functions in other programming languages like C or Java where one can tell if a function is to return a value or not. For instance, in these two languages the data type of the intended return value is to be explicitly stated in the function declaration itself, or void if it's supposed to not return anything at all. However, just by knowing how you want to craft your function based on the set requirements should be able to provide enough information to keep you going here.","title":"Getting Started"},{"location":"archive/202204/lab06/#warm-up","text":"For each of the following purposes, determine if the function to be created to simulate such should make use of any parameters or not. If so, name them and describe how they will be used in your supposed function. As practice, you may also consider developing these functions with these plans in mind to be used with a HTML page. You may name your parameter(s) and/or function(s) as you please, but preferably with respect to their meaningfulness. This function delivers a greeting based on a provided language from a list of available languages. Model Answer function greeting ( language ) This can be interpreted in many ways - the language can be provided by being passed into the function (e.g., via a prompt box), or the function can have a mechanism in it that will obtain that language value from a drop-down list element, for instance. In the latter case, we can safely omit the language parameter from the function declaration. This function prints out the first 20 numbers in a sequence dictated by an already preset Maclaurin series expression. For testing purposes, you can use the common Maclaurin function: \\[ \\frac{1}{1-x} = 1 + x + x^2 + x^3 + x^4 + ... \\] Use x = 1 to x = 20 in this function. Model Answer function printMaclaurin () The description states a preset number of terms to be printed (i.e., 20), so this value need not be put in as a parameter to the function. This function gathers two strings to check if the first letter in each one match regardless of case. Model Answer function firstLetterMatch ( string1 , string2 ) Two strings are needed from the user, so it only seems right to have them provided as parameters in this case. This function retrieves the user input from a HTML <input> field to prepare an array of distinct characters used in said input. Model Answer function userInputToArray () The description mentions that the user input is to be retrieved from a HTML <input> field, so there is no need to pass it in as a function parameter. This function calculates the age of a person, place, or object by using its year of origin/date of birth/etc. and the current year during use. Model Answer function calculateAge ( year ) Just like the first one, this description does not make clear of how the year of origin/date of birth/etc. is to be obtained from the user. You can have the function read the HTML element's value from within the function, or get the user to enter it from a prompt box. In the earlier case, you don't need the year to be passed in as a parameter.","title":"Warm-up"},{"location":"archive/202204/lab06/#tasks","text":"","title":"Tasks"},{"location":"archive/202204/lab06/#task-1","text":"Drivers who are 16 years of age and older can apply for driving a license online. The government webpage code requires applicants to enter their age and then checks if they are old enough to apply. The following code captures the applicant\u2019s age. When the applicant clicks the 'Check now' button the age is first checked to ensure that it is numeric. The age is then checked to see if the applicant is old enough. Suitable messages are displayed as a result of the checks. Part 1: Create an empty webpage with the following HTML scripts inside the <body> section. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 < p > You can apply for a license to drive when you are 16 years old. </ p > < p > To check if you are old enough to drive, input your age and click the button: </ p > < input type = \"number\" id = \"ageNow\" /> < button onclick = \"checkAgeFunction()\" > Check now </ button > < p id = \"ageCheck\" ></ p > < script type = \"text/javascript\" > function checkAgeFunction () { /* ---- INSERT CODE HERE ---- */ /* ---- END INSERT CODE ---- */ document . getElementById ( \"ageCheck\" ). innerHTML = canApply ; } </ script > Part 2: Complete the code for checkAgeFunction() that checks the age entered by the applicant and displays an appropriate response.","title":"Task 1"},{"location":"archive/202204/lab06/#task-2","text":"Create a HTML file that uses embedded JavaScript to carry out the following. Create a function called arrayFromRange() which creates an array of integers between and including the two numbers that are passed into the function. Example: arrayFromRange ( 5 , 10 ); // this should return [5, 6, 7, 8, 9, 10] arrayFromRange ( - 10 , - 4 ); // this should return [-10, -9, -8, -7, -6, -5, -4]; After creating the function, add another line of JavaScript code at the very end of the <script> element to invoke the created function.","title":"Task 2"},{"location":"archive/202204/lab06/#task-3","text":"Create a HTML file that uses embedded JavaScript to carry out the following. You are required to only use the browser's inspector console to generate outputs. Part 1: Create a function that takes two numbers and returns the maximum of the two. ( NOTE: If the two numbers are the same, the function should return the same number.) Part 2: Create a function that takes in a circle's radius value and returns the area of the circle with that radius.","title":"Task 3"},{"location":"archive/202204/lab06/#task-4","text":"Create a HTML file that uses external JavaScript to carry out the following. Part 1: In the <body> section, create a single paragraph <p> element with an id value \"result\" containing the text: \"The FizzBuzz Test\". Part 2: Add a <script> tag referencing a JavaScript file called fizzbuzz.js . Part 3: Create the fizzbuzz.js JavaScript file. It should contain the following code snippet: function fizzBuzz ( input ) { /* ---- CONTINUE CODE FROM HERE ---- */ } const number = 15 ; // edit this constant value to test fizzBuzz() document . getElementById ( \"result\" ). innerHTML = fizzBuzz ( number ); The last line makes it such that the value obtained from the fizzBuzz() function is appended into the <p> element with id \"result\" . Part 4: Complete the fizzBuzz() function such that it return \"Fizz\" if the number is divisible by 3, and \"Buzz\" if it is divisible by 5. If the number is divisible by both 3 and 5, fizzBuzz() should return \"FizzBuzz\". If the number is not divisible by 3 or 5, fizzBuzz() should return the value stored in the used input parameter. // Examples fizzBuzz ( 3 ); // it should return \"Fizz\" fizzBuzz ( 10 ); // it should return \"Buzz\" fizzBuzz ( 30 ); // it should return \"FizzBuzz\" fizzBuzz ( 31 ); // it should return 31 Note Do NOT use document.write() or console.log() in the function. You are required to use the return statement instead. Part 5: Implement a check to see if input is a number or not. If the input is not a number (e.g. string, Boolean), it should print \"Not a number\". This needs to be checked first before determining its divisibility. // these should return \"Not a number\" fizzBuzz ( \"3\" ); fizzBuzz ( false ); Hint Use the typeof operator to check the variable's type.","title":"Task 4"},{"location":"archive/202204/lab06/#task-5","text":"Create a HTML file that uses external JavaScript to carry out the following. You are required to only use the browser's inspector console to generate outputs. Part 1: Create an object named movie which contains the following attributes: title: \"Big Hero 6\" releaseYear: 2014 rating: 7.8 director_1: \"Don Hall\" director_2: \"Chris Williams\" Part 2: Use the for-in loop to iterate through the movie object's attributes, printing them each time. Part 3: In the same for-in loop, implement a check such that only the attributes containing string values are printed in the console.","title":"Task 5"},{"location":"archive/202204/lab06/#challenge-tasks","text":"","title":"Challenge Tasks"},{"location":"archive/202204/lab06/#challenge-task-1","text":"Create a HTML file that uses embedded JavaScript to carry out the following. Part 1: Create a <script> element located in the <head> section containing the following code snippet: 1 2 3 4 5 6 function showPrimes ( limit ) { for ( let number = 2 ; number <= limit ; ++ number ) { let isPrime = true ; /* ---- CONTINUE CODE FROM HERE ---- */ } } The given code snippet depicts a function named showPrimes which takes in a parameter value called limit . Part 2: In the <body> section, create another <script> element containing the following line: showPrimes ( 20 );","title":"Challenge Task 1"},{"location":"archive/202204/lab07/","text":"Practical 07: Extra JavaScript Activities The original Practical 7 has moved! For instructions on installing XAMPP for the upcoming lessons, click HERE . This practical contains two intermediate-level activities that will hopefully help you strengthen your understanding with JavaScript. Don't worry, these two activities are merely code-alongs; you'll be guided every step of the way from preparations to the end. Similar to the format of your consequent practical sessions themed after PHP and Databases, you may be asked to prepare beforehand by having a few files on the ready. These files are not the main focus of the activity, but rather a common starting point can be ensured before starting with the code-along walkthrough. Activity 1: Multiplication Table School teachers are often advised to look for creative methods into their lessons in order to help engage with students better or help students learn concepts easier with different methods. The multiplication box is one of many creative methods concocted by elementary school math teachers to help students understand multiplication between two-digit numbers (i.e., integer values). CLICK HERE TO ACCESS ACTIVITY 1 Activity 2: Mark Demo This intermediate-level activity will provide a guide as to how you can effectively use program control structures to skillfully loop through the same calculation process with different sets of inputs at a time. CLICK HERE TO ACCESS ACTIVITY 2","title":"Practical 07: Extra JavaScript Activities"},{"location":"archive/202204/lab07/#practical-07-extra-javascript-activities","text":"The original Practical 7 has moved! For instructions on installing XAMPP for the upcoming lessons, click HERE . This practical contains two intermediate-level activities that will hopefully help you strengthen your understanding with JavaScript. Don't worry, these two activities are merely code-alongs; you'll be guided every step of the way from preparations to the end. Similar to the format of your consequent practical sessions themed after PHP and Databases, you may be asked to prepare beforehand by having a few files on the ready. These files are not the main focus of the activity, but rather a common starting point can be ensured before starting with the code-along walkthrough.","title":"Practical 07: Extra JavaScript Activities"},{"location":"archive/202204/lab07/#activity-1-multiplication-table","text":"School teachers are often advised to look for creative methods into their lessons in order to help engage with students better or help students learn concepts easier with different methods. The multiplication box is one of many creative methods concocted by elementary school math teachers to help students understand multiplication between two-digit numbers (i.e., integer values). CLICK HERE TO ACCESS ACTIVITY 1","title":"Activity 1: Multiplication Table"},{"location":"archive/202204/lab07/#activity-2-mark-demo","text":"This intermediate-level activity will provide a guide as to how you can effectively use program control structures to skillfully loop through the same calculation process with different sets of inputs at a time. CLICK HERE TO ACCESS ACTIVITY 2","title":"Activity 2: Mark Demo"},{"location":"archive/202204/lab07A/","text":"Practical 07 (Activity 1): Multiplication Table The original Practical 7 has moved! For instructions on installing XAMPP for the upcoming lessons, click HERE . Preparation CSS and JS files are to be kept in their own separate subfolders. css/style.css 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 @ import url ( \"https://fonts.googleapis.com/css2?family=Plus+Jakarta+Sans:ital,wght@0,200;0,300;0,400;0,500;0,600;0,700;0,800;1,200;1,300;1,400;1,500;1,600;1,700;1,800&display=swap\" ) ; : root { --table-cell-dimension : 100 px ; --text-size : 32 px ; } * { font-family : \"Plus Jakarta Sans\" , sans-serif ; } body { padding-top : 2 rem ; text-align : center ; } h1 { font-size : 48 px ; } # num_entry , # num_entry input [ type = \"number\" ] { font-size : var ( --text-size ); margin-bottom : 1 rem ; } # num_entry input [ type = \"number\" ] { text-align : center ; width : var ( --table-cell-dimension ); } input [ type = \"number\" ] : disabled { background-color : white ; border : 2 px solid black ; cursor : not-allowed ; } /* For Chrome, Safari, Edge, Opera */ input :: -webkit-outer-spin-button , input :: -webkit-inner-spin-button { -webkit- appearance : none ; margin : 0 ; } /* For Firefox */ input [ type = \"number\" ] { -moz- appearance : textfield ; } input [ type = \"button\" ] { font-size : 20 px ; padding : 0.5 rem 1 rem ; } hr { margin : 2 rem 0 ; } table # multiplication-box { /* border: 1px solid black; */ border-collapse : collapse ; display : inline-block ; margin-left : auto ; } table # multiplication-box th , table # multiplication-box td : not ( . td-hidden ) { border : 1 px solid black ; font-size : var ( --text-size ); height : var ( --table-cell-dimension ); width : var ( --table-cell-dimension ); } index.html 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" /> < meta http-equiv = \"X-UA-Compatible\" content = \"IE=edge\" /> < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" /> < title > Multiplication Box </ title > < link rel = \"stylesheet\" href = \"css/style.css\" /> </ head > < body > < h1 > Multiplication Box </ h1 > < p > Multiplies 2-digit numbers together. </ p > < section id = \"num_entry\" > < input type = \"number\" name = \"num1\" id = \"num1\" min = \"10\" max = \"99\" /> &times; < input type = \"number\" name = \"num2\" id = \"num2\" min = \"10\" max = \"99\" /> = < input type = \"number\" name = \"answer\" id = \"numAns\" min = \"10\" max = \"99\" readonly /> </ section > <!-- /section#num_entry --> < input type = \"button\" value = \"Multiply\" onclick = \"multiply();\" /> < hr /> < table id = \"multiplication-box\" > < tr > < td class = \"td-hidden\" ></ td > < td class = \"td-hidden\" ></ td > < th id = \"num1_show\" colspan = \"2\" ></ th > </ tr > < tr > < td class = \"td-hidden\" ></ td > < th > &times; </ th > < th id = \"num1a\" ></ th > < th id = \"num1b\" ></ th > </ tr > < tr > < th id = \"num2_show\" rowspan = \"2\" ></ th > < th id = \"num2a\" ></ th > < td id = \"m1\" ></ td > < td id = \"m2\" ></ td > < td id = \"m1_m2\" ></ td > </ tr > < tr > < th id = \"num2b\" ></ th > < td id = \"m3\" ></ td > < td id = \"m4\" ></ td > < td id = \"m3_m4\" ></ td > </ tr > < tr > < td class = \"td-hidden\" colspan = \"2\" ></ td > < td id = \"m1_m3\" ></ td > < td id = \"m2_m4\" ></ td > < th id = \"m_total\" ></ th > </ tr > </ table > <!-- /table#multiplication-box --> < script src = \"js/times-box.js\" ></ script > </ body > </ html > times-box.js 1 2 3 function multiply () { // to include code here } You should be able to see the following in your web browser: Multiplication Box Page Motivation School teachers are often advised to look for creative methods into their lessons in order to help engage with students better or help students learn concepts easier with different methods. The multiplication box is one of many creative methods concocted by elementary school math teachers to help students understand multiplication between two-digit numbers (i.e., integer values). This method involves separating both numbers into tens and units, and then multiplying them separately before adding their horizontal and vertical totals up. The cell at the bottom right denotes the eventual product between the two numbers. For instance, with \\(49 \\times 16\\) , both numbers are separated as the pairs (40, 9) and (10, 6) respectively. The following multiplication operations are then carried out first: \\(40 \\times 10 = 400\\) \\(40 \\times 6 = 240\\) \\(9 \\times 10 = 90\\) \\(9 \\times 6 = 54\\) The numbers are populated as shown in the figure below, where their horizontal totals and vertical totals are calculated and displayed. Between both sets of totals, they produce the same correct product after being added together (i.e., \\(490 + 294 = 640 + 144 = 784\\) ). Multiplication Box Page Take note that the only input fields of concern are the three which make up the equation on top of the multiply button, which is associated with the JavaScript multiply() function we will be completing in this activity. Only the first two are allowed to be populated manually by the user. The third representing the calculated product is set to be read-only . Step 1: Obtaining Values from Input Fields Let's work on obtaining the values entered into the first two input fields. The first two lines in the multiply() function is used to obtain the values from input fields input#num1 and input#num2 . times-box.js 1 2 3 4 function multiply () { let num1 = parseInt ( document . querySelector ( \"#num1\" ). value ); let num2 = parseInt ( document . querySelector ( \"#num2\" ). value ); } TIP: Using .innerHTML or .value When Retrieving Values TL;DR: In nearly all cases, .value is only used with <input> whilst .innerHTML is for getting values from any non-self-closing tags. Let's take a <p> element, for example. < p > Content/text/etc. inside here </ p > The content placed in between the opening <p> and closing </p> tags is what we refer to as inner HTML. Therefore, we use .innerHTML to obtain values that are stored in between similarly structured HTML tags. document . querySelector ( \"p\" ). innerHTML However, when it comes to <input> elements, these are represented with self-closing tags. Thus, there isn't really any inner HTML to target. <input> elements do have the a value attribute that contains entered text, though. In this case, it only makes sense to use .value to elicit values out of <input> fields. document . querySelector ( \"input\" ). innerHTML // does not work document . querySelector ( \"input\" ). value // use this for <input> elements instead Here, we observe that the parseInt() function is applied surrounding the expression used to obtain the value from input#num1 and input#num2 . This function ensures that an integer is obtained from the <input> elements, as the value obtained from them typically defaults to being of a \"string\" type. Before we proceed to use these values we've entered, we're going to implement a few checks to see if the numbers entered are two-digit integers . This means that: none of the two input fields (i.e., input#num1 and input#num2 ) should be empty no non-integer values or any value outside of the 10-99 range can be entered The first criterion is pretty straightforward - we check to see if the value of input#num1 and/or input#num2 results in an empty string (i.e., \"\" ). To implement the second criterion, we'll be using the sister variant function of parseInt() called parseFloat() . While parseInt() obtains an integer from the passed in string (in this case the value of the <input> field), parseFloat() obtains any number (with decimal points) from the passed in string. In summary, Function \"17\" \"17.5\" \"17as\" \"17.5as\" \"as17\" \"asap\" parseInt() 17 17 17 17 NaN Nan parseFloat() 17 17.5 17 17.5 NaN Nan From the table above, we can probably tell that parseFloat(\"17.5\") !== parseInt(\"17.5\") . We use this idea here to determine if the input number in either input#num1 or input#num2 or both are not integers, and then we proceed to replace them with the integer obtained after using the parseInt() function. For both criteria, we use an alert box to alert the user of any problems found. times-box.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 function multiply () { let num1 = parseInt ( document . querySelector ( \"#num1\" ). value ); let num2 = parseInt ( document . querySelector ( \"#num2\" ). value ); // replace num1 and num2 with parsed integer (if not integers) // alert user when number is replaced if ( parseFloat ( document . querySelector ( \"#num1\" ). value ) !== parseInt ( document . querySelector ( \"#num1\" ). value )) { if ( document . querySelector ( \"#num1\" ). value == \"\" ) { alert ( \"First number input is empty.\" ); } else { alert ( \"First number isn't an integer. Replacing value at input field with parsed integer value instead.\" ); document . querySelector ( \"#num1\" ). value = num1 ; } } if ( parseFloat ( document . querySelector ( \"#num2\" ). value ) !== parseInt ( document . querySelector ( \"#num2\" ). value )) { if ( document . querySelector ( \"#num2\" ). value == \"\" ) { alert ( \"Second number input is empty.\" ); } else { alert ( \"Second number isn't an integer. Replacing value at input field with parsed integer value instead.\" ); document . querySelector ( \"#num2\" ). value = num2 ; } } } Alert box pop-up if first number has not been entered. Alert box pop-up if second number has not been entered. Alert box pop-up if first number is not an integer. Alert box pop-up if second number is not an integer. Step 2: Checking Validity of Input Integers Now, onward to checking whether the input integers (i.e., num1 and num2 ) are within the correct range. A two-digit integer can only be either one of the numbers between 10 and 99; the rest of which simply will not fit. For the sake of simplicity, we will only consider positive values. We implement this check using a compound condition of 4 conditions to be met simultaneously: num1 >= 10 num1 <= 99 num2 >= 10 num2 <= 99 If all four of these conditions are met, we proceed to display num1 and num2 in td#num1_show and td#num2_show respectively. We will expand on the further logic to be implemented from here. Otherwise, we check to see either num1 < 10 || num1 > 99 or num2 < 10 || num2 > 99 , and display an appropriate error message in an alert box. times-box.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 function multiply () { let num1 = parseInt ( document . querySelector ( \"#num1\" ). value ); let num2 = parseInt ( document . querySelector ( \"#num2\" ). value ); // replace num1 and num2 with parsed integer (if not integers) // alert user when number is replaced if ( parseFloat ( document . querySelector ( \"#num1\" ). value ) !== parseInt ( document . querySelector ( \"#num1\" ). value )) { if ( document . querySelector ( \"#num1\" ). value == \"\" ) { alert ( \"First number input is empty.\" ); } else { alert ( \"First number isn't an integer. Replacing value at input field with parsed integer value instead.\" ); document . querySelector ( \"#num1\" ). value = num1 ; } } if ( parseFloat ( document . querySelector ( \"#num2\" ). value ) !== parseInt ( document . querySelector ( \"#num2\" ). value )) { if ( document . querySelector ( \"#num2\" ). value == \"\" ) { alert ( \"Second number input is empty.\" ); } else { alert ( \"Second number isn't an integer. Replacing value at input field with parsed integer value instead.\" ); document . querySelector ( \"#num2\" ). value = num2 ; } } // check if num1 and num2 is between 10 and 99 (inclusive) if ( num1 >= 10 && num1 <= 99 && num2 >= 10 && num2 <= 99 ) { // show number in num?_show document . querySelector ( \"#num1_show\" ). innerHTML = num1 ; document . querySelector ( \"#num2_show\" ). innerHTML = num2 ; // to continue more here } else { // if first number is not between 10 and 99 (inclusive) if ( num1 < 10 || num1 > 99 ) { alert ( \"First number should be between 10 and 99!\" ); document . querySelector ( \"#num1\" ). value = \"\" ; // empty first input field } // if secondnumber is not between 10 and 99 (inclusive) if ( num2 < 10 || num2 > 99 ) { alert ( \"Second number should be between 10 and 99!\" ); document . querySelector ( \"#num2\" ). value = \"\" ; // empty second input field } } } Alert box pop-up if first number is not between 10 and 99 (inclusive). Alert box pop-up if second number is not between 10 and 99 (inclusive). Otherwise, your multiplication table should start being populated from here. Step 3: Populating the Table: Tens and Units Split The key ideas behind using the multiplication box/table as shown here is to split the two-digit numbers into the tens and units places. In order to elicit the tens digit from the number, we simply obtain the quotient after dividing it by 10. This quotient is then passed into one of the Math functions, namely the floor() function which rounds down a number to the lower boundary (e.g., 3.4 to 3, and 4.9 to 4). The units digit is obtained simply by using the modulo operator on the number; basically, what the remainder is after dividing the number by 10. These values are then stored contiguously in an array for each number (e.g., \\(49 \\times 16\\) produces [4, 9] and [1, 6] ). Each of these digit are then placed in the respective cells: td#num1a , td#num1b , td#num2a , td#num2b . times-box.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 function multiply () { let num1 = parseInt ( document . querySelector ( \"#num1\" ). value ); let num2 = parseInt ( document . querySelector ( \"#num2\" ). value ); // replace num1 and num2 with parsed integer (if not integers) // alert user when number is replaced if ( parseFloat ( document . querySelector ( \"#num1\" ). value ) !== parseInt ( document . querySelector ( \"#num1\" ). value )) { if ( document . querySelector ( \"#num1\" ). value == \"\" ) { alert ( \"First number input is empty.\" ); } else { alert ( \"First number isn't an integer. Replacing value at input field with parsed integer value instead.\" ); document . querySelector ( \"#num1\" ). value = num1 ; } } if ( parseFloat ( document . querySelector ( \"#num2\" ). value ) !== parseInt ( document . querySelector ( \"#num2\" ). value )) { if ( document . querySelector ( \"#num2\" ). value == \"\" ) { alert ( \"Second number input is empty.\" ); } else { alert ( \"Second number isn't an integer. Replacing value at input field with parsed integer value instead.\" ); document . querySelector ( \"#num2\" ). value = num2 ; } } // check if num1 and num2 is between 10 and 99 (inclusive) if ( num1 >= 10 && num1 <= 99 && num2 >= 10 && num2 <= 99 ) { // show number in num?_show document . querySelector ( \"#num1_show\" ). innerHTML = num1 ; document . querySelector ( \"#num2_show\" ). innerHTML = num2 ; // split number into digits based on tens and units value let arr_num1 = [ Math . floor ( num1 / 10 ) * 10 , num1 % 10 ]; let arr_num2 = [ Math . floor ( num2 / 10 ) * 10 , num2 % 10 ]; // show digits in num?a or num?b document . querySelector ( \"#num1a\" ). innerHTML = arr_num1 [ 0 ]; document . querySelector ( \"#num1b\" ). innerHTML = arr_num1 [ 1 ]; document . querySelector ( \"#num2a\" ). innerHTML = arr_num2 [ 0 ]; document . querySelector ( \"#num2b\" ). innerHTML = arr_num2 [ 1 ]; // to continue more here } else { // if first number is not between 10 and 99 (inclusive) if ( num1 < 10 || num1 > 99 ) { alert ( \"First number should be between 10 and 99!\" ); document . querySelector ( \"#num1\" ). value = \"\" ; // empty first input field } // if secondnumber is not between 10 and 99 (inclusive) if ( num2 < 10 || num2 > 99 ) { alert ( \"Second number should be between 10 and 99!\" ); document . querySelector ( \"#num2\" ). value = \"\" ; // empty second input field } } } Your function should now produce this result after clicking the button. Step 4: Populating the Table: Calculating Intermediary Products By splitting both numbers into the tens and units digits, we can now carry out the following intermediary multiplications operations (taking \\(49 \\times 16\\) for example): \\(40 \\times 10 = 400\\) \\(40 \\times 6 = 240\\) \\(9 \\times 10 = 90\\) \\(9 \\times 6 = 54\\) Each of these products are placed like as shown in the following output. times-box.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 function multiply () { let num1 = parseInt ( document . querySelector ( \"#num1\" ). value ); let num2 = parseInt ( document . querySelector ( \"#num2\" ). value ); // replace num1 and num2 with parsed integer (if not integers) // alert user when number is replaced if ( parseFloat ( document . querySelector ( \"#num1\" ). value ) !== parseInt ( document . querySelector ( \"#num1\" ). value )) { if ( document . querySelector ( \"#num1\" ). value == \"\" ) { alert ( \"First number input is empty.\" ); } else { alert ( \"First number isn't an integer. Replacing value at input field with parsed integer value instead.\" ); document . querySelector ( \"#num1\" ). value = num1 ; } } if ( parseFloat ( document . querySelector ( \"#num2\" ). value ) !== parseInt ( document . querySelector ( \"#num2\" ). value )) { if ( document . querySelector ( \"#num2\" ). value == \"\" ) { alert ( \"Second number input is empty.\" ); } else { alert ( \"Second number isn't an integer. Replacing value at input field with parsed integer value instead.\" ); document . querySelector ( \"#num2\" ). value = num2 ; } } // check if num1 and num2 is between 10 and 99 (inclusive) if ( num1 >= 10 && num1 <= 99 && num2 >= 10 && num2 <= 99 ) { // show number in num?_show document . querySelector ( \"#num1_show\" ). innerHTML = num1 ; document . querySelector ( \"#num2_show\" ). innerHTML = num2 ; // split number into digits based on tens and units value let arr_num1 = [ Math . floor ( num1 / 10 ) * 10 , num1 % 10 ]; let arr_num2 = [ Math . floor ( num2 / 10 ) * 10 , num2 % 10 ]; // show digits in num?a or num?b document . querySelector ( \"#num1a\" ). innerHTML = arr_num1 [ 0 ]; document . querySelector ( \"#num1b\" ). innerHTML = arr_num1 [ 1 ]; document . querySelector ( \"#num2a\" ). innerHTML = arr_num2 [ 0 ]; document . querySelector ( \"#num2b\" ). innerHTML = arr_num2 [ 1 ]; /** * Calculate intermediary multiplication values * * Key: * m1 = num1a * num2a * m2 = num1b * num2a * m3 = num1a * num2b * m4 = num1b * num2b */ const m1 = arr_num1 [ 0 ] * arr_num2 [ 0 ]; const m2 = arr_num1 [ 1 ] * arr_num2 [ 0 ]; const m3 = arr_num1 [ 0 ] * arr_num2 [ 1 ]; const m4 = arr_num1 [ 1 ] * arr_num2 [ 1 ]; // Display intermediary multiplication values document . querySelector ( \"#m1\" ). innerHTML = m1 ; document . querySelector ( \"#m2\" ). innerHTML = m2 ; document . querySelector ( \"#m3\" ). innerHTML = m3 ; document . querySelector ( \"#m4\" ). innerHTML = m4 ; // to continue more here } else { // if first number is not between 10 and 99 (inclusive) if ( num1 < 10 || num1 > 99 ) { alert ( \"First number should be between 10 and 99!\" ); document . querySelector ( \"#num1\" ). value = \"\" ; // empty first input field } // if secondnumber is not between 10 and 99 (inclusive) if ( num2 < 10 || num2 > 99 ) { alert ( \"Second number should be between 10 and 99!\" ); document . querySelector ( \"#num2\" ). value = \"\" ; // empty second input field } } } Each of the four separate products should now populate the center table cells. Step 5: Populating the Table: Obtaining Horizontal and Vertical Totals Now, we focus on getting the horizontal and vertical totals of the intermediary products. The cell containing the sum across the top row (horizontal) is denoted as #m1_m2 the bottom row (horizontal) is denoted as #m3_m4 the left column (vertical) is denoted as #m1_m3 the right column (vertical) is denoted as #m2_m4 times-box.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 function multiply () { let num1 = parseInt ( document . querySelector ( \"#num1\" ). value ); let num2 = parseInt ( document . querySelector ( \"#num2\" ). value ); // replace num1 and num2 with parsed integer (if not integers) // alert user when number is replaced if ( parseFloat ( document . querySelector ( \"#num1\" ). value ) !== parseInt ( document . querySelector ( \"#num1\" ). value )) { if ( document . querySelector ( \"#num1\" ). value == \"\" ) { alert ( \"First number input is empty.\" ); } else { alert ( \"First number isn't an integer. Replacing value at input field with parsed integer value instead.\" ); document . querySelector ( \"#num1\" ). value = num1 ; } } if ( parseFloat ( document . querySelector ( \"#num2\" ). value ) !== parseInt ( document . querySelector ( \"#num2\" ). value )) { if ( document . querySelector ( \"#num2\" ). value == \"\" ) { alert ( \"Second number input is empty.\" ); } else { alert ( \"Second number isn't an integer. Replacing value at input field with parsed integer value instead.\" ); document . querySelector ( \"#num2\" ). value = num2 ; } } // check if num1 and num2 is between 10 and 99 (inclusive) if ( num1 >= 10 && num1 <= 99 && num2 >= 10 && num2 <= 99 ) { // show number in num?_show document . querySelector ( \"#num1_show\" ). innerHTML = num1 ; document . querySelector ( \"#num2_show\" ). innerHTML = num2 ; // split number into digits based on tens and units value let arr_num1 = [ Math . floor ( num1 / 10 ) * 10 , num1 % 10 ]; let arr_num2 = [ Math . floor ( num2 / 10 ) * 10 , num2 % 10 ]; // show digits in num?a or num?b document . querySelector ( \"#num1a\" ). innerHTML = arr_num1 [ 0 ]; document . querySelector ( \"#num1b\" ). innerHTML = arr_num1 [ 1 ]; document . querySelector ( \"#num2a\" ). innerHTML = arr_num2 [ 0 ]; document . querySelector ( \"#num2b\" ). innerHTML = arr_num2 [ 1 ]; /** * Calculate intermediary multiplication values * * Key: * m1 = num1a * num2a * m2 = num1b * num2a * m3 = num1a * num2b * m4 = num1b * num2b */ const m1 = arr_num1 [ 0 ] * arr_num2 [ 0 ]; const m2 = arr_num1 [ 1 ] * arr_num2 [ 0 ]; const m3 = arr_num1 [ 0 ] * arr_num2 [ 1 ]; const m4 = arr_num1 [ 1 ] * arr_num2 [ 1 ]; // Display intermediary multiplication values document . querySelector ( \"#m1\" ). innerHTML = m1 ; document . querySelector ( \"#m2\" ). innerHTML = m2 ; document . querySelector ( \"#m3\" ). innerHTML = m3 ; document . querySelector ( \"#m4\" ). innerHTML = m4 ; // add horizontal row values and display the sums document . querySelector ( \"#m1_m2\" ). innerHTML = m1 + m2 ; document . querySelector ( \"#m3_m4\" ). innerHTML = m3 + m4 ; // add vertical column values and display the sums document . querySelector ( \"#m1_m3\" ). innerHTML = m1 + m3 ; document . querySelector ( \"#m2_m4\" ). innerHTML = m2 + m4 ; // to continue more here } else { // if first number is not between 10 and 99 (inclusive) if ( num1 < 10 || num1 > 99 ) { alert ( \"First number should be between 10 and 99!\" ); document . querySelector ( \"#num1\" ). value = \"\" ; // empty first input field } // if secondnumber is not between 10 and 99 (inclusive) if ( num2 < 10 || num2 > 99 ) { alert ( \"Second number should be between 10 and 99!\" ); document . querySelector ( \"#num2\" ). value = \"\" ; // empty second input field } } } The table should now contain the horizontal and vertical totals as shown. Step 6: Retrieving and Displaying the Final Product Finally, we get to displaying the final product from multiplying the integers in the input fields. The vertical sum between values in cells #m1_m2 and #m3_m4 or #m1_m3 and #m2_m4 will suffice in this case. We first store this sum in a variable first before displaying them in the table cell #m_total and the #numAns input field. times-box.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 function multiply () { let num1 = parseInt ( document . querySelector ( \"#num1\" ). value ); let num2 = parseInt ( document . querySelector ( \"#num2\" ). value ); // replace num1 and num2 with parsed integer (if not integers) // alert user when number is replaced if ( parseFloat ( document . querySelector ( \"#num1\" ). value ) !== parseInt ( document . querySelector ( \"#num1\" ). value )) { if ( document . querySelector ( \"#num1\" ). value == \"\" ) { alert ( \"First number input is empty.\" ); } else { alert ( \"First number isn't an integer. Replacing value at input field with parsed integer value instead.\" ); document . querySelector ( \"#num1\" ). value = num1 ; } } if ( parseFloat ( document . querySelector ( \"#num2\" ). value ) !== parseInt ( document . querySelector ( \"#num2\" ). value )) { if ( document . querySelector ( \"#num2\" ). value == \"\" ) { alert ( \"Second number input is empty.\" ); } else { alert ( \"Second number isn't an integer. Replacing value at input field with parsed integer value instead.\" ); document . querySelector ( \"#num2\" ). value = num2 ; } } // check if num1 and num2 is between 10 and 99 (inclusive) if ( num1 >= 10 && num1 <= 99 && num2 >= 10 && num2 <= 99 ) { // show number in num?_show document . querySelector ( \"#num1_show\" ). innerHTML = num1 ; document . querySelector ( \"#num2_show\" ). innerHTML = num2 ; // split number into digits based on tens and units value let arr_num1 = [ Math . floor ( num1 / 10 ) * 10 , num1 % 10 ]; let arr_num2 = [ Math . floor ( num2 / 10 ) * 10 , num2 % 10 ]; // show digits in num?a or num?b document . querySelector ( \"#num1a\" ). innerHTML = arr_num1 [ 0 ]; document . querySelector ( \"#num1b\" ). innerHTML = arr_num1 [ 1 ]; document . querySelector ( \"#num2a\" ). innerHTML = arr_num2 [ 0 ]; document . querySelector ( \"#num2b\" ). innerHTML = arr_num2 [ 1 ]; /** * Calculate intermediary multiplication values * * Key: * m1 = num1a * num2a * m2 = num1b * num2a * m3 = num1a * num2b * m4 = num1b * num2b */ const m1 = arr_num1 [ 0 ] * arr_num2 [ 0 ]; const m2 = arr_num1 [ 1 ] * arr_num2 [ 0 ]; const m3 = arr_num1 [ 0 ] * arr_num2 [ 1 ]; const m4 = arr_num1 [ 1 ] * arr_num2 [ 1 ]; // Display intermediary multiplication values document . querySelector ( \"#m1\" ). innerHTML = m1 ; document . querySelector ( \"#m2\" ). innerHTML = m2 ; document . querySelector ( \"#m3\" ). innerHTML = m3 ; document . querySelector ( \"#m4\" ). innerHTML = m4 ; // add horizontal row values and display the sums document . querySelector ( \"#m1_m2\" ). innerHTML = m1 + m2 ; document . querySelector ( \"#m3_m4\" ). innerHTML = m3 + m4 ; // add vertical column values and display the sums document . querySelector ( \"#m1_m3\" ). innerHTML = m1 + m3 ; document . querySelector ( \"#m2_m4\" ). innerHTML = m2 + m4 ; // calculate product const product = parseInt ( document . querySelector ( \"#m1_m2\" ). innerHTML ) + parseInt ( document . querySelector ( \"#m3_m4\" ). innerHTML ); // or // const product = // parseInt(document.querySelector(\"#m1_m3\").innerHTML) + parseInt(document.querySelector(\"#m2_m4\").innerHTML); // display full product in table document . querySelector ( \"#m_total\" ). innerHTML = product ; // display full product in answer input field document . querySelector ( \"#numAns\" ). value = product ; } else { // if first number is not between 10 and 99 (inclusive) if ( num1 < 10 || num1 > 99 ) { alert ( \"First number should be between 10 and 99!\" ); document . querySelector ( \"#num1\" ). value = \"\" ; // empty first input field } // if secondnumber is not between 10 and 99 (inclusive) if ( num2 < 10 || num2 > 99 ) { alert ( \"Second number should be between 10 and 99!\" ); document . querySelector ( \"#num2\" ). value = \"\" ; // empty second input field } } } And.. it's complete. Well done! And voila, we've just created a replica of the multiplication box/table used by some teachers to help teach children about multiplication between two-digit numbers! Challenge Try to recreate the same table, but dealing with multiplication between three-digit integers instead of two.","title":"Practical 07 (Activity 1): Multiplication Table"},{"location":"archive/202204/lab07A/#practical-07-activity-1-multiplication-table","text":"The original Practical 7 has moved! For instructions on installing XAMPP for the upcoming lessons, click HERE .","title":"Practical 07 (Activity 1): Multiplication Table"},{"location":"archive/202204/lab07A/#preparation","text":"CSS and JS files are to be kept in their own separate subfolders. css/style.css 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 @ import url ( \"https://fonts.googleapis.com/css2?family=Plus+Jakarta+Sans:ital,wght@0,200;0,300;0,400;0,500;0,600;0,700;0,800;1,200;1,300;1,400;1,500;1,600;1,700;1,800&display=swap\" ) ; : root { --table-cell-dimension : 100 px ; --text-size : 32 px ; } * { font-family : \"Plus Jakarta Sans\" , sans-serif ; } body { padding-top : 2 rem ; text-align : center ; } h1 { font-size : 48 px ; } # num_entry , # num_entry input [ type = \"number\" ] { font-size : var ( --text-size ); margin-bottom : 1 rem ; } # num_entry input [ type = \"number\" ] { text-align : center ; width : var ( --table-cell-dimension ); } input [ type = \"number\" ] : disabled { background-color : white ; border : 2 px solid black ; cursor : not-allowed ; } /* For Chrome, Safari, Edge, Opera */ input :: -webkit-outer-spin-button , input :: -webkit-inner-spin-button { -webkit- appearance : none ; margin : 0 ; } /* For Firefox */ input [ type = \"number\" ] { -moz- appearance : textfield ; } input [ type = \"button\" ] { font-size : 20 px ; padding : 0.5 rem 1 rem ; } hr { margin : 2 rem 0 ; } table # multiplication-box { /* border: 1px solid black; */ border-collapse : collapse ; display : inline-block ; margin-left : auto ; } table # multiplication-box th , table # multiplication-box td : not ( . td-hidden ) { border : 1 px solid black ; font-size : var ( --text-size ); height : var ( --table-cell-dimension ); width : var ( --table-cell-dimension ); } index.html 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" /> < meta http-equiv = \"X-UA-Compatible\" content = \"IE=edge\" /> < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" /> < title > Multiplication Box </ title > < link rel = \"stylesheet\" href = \"css/style.css\" /> </ head > < body > < h1 > Multiplication Box </ h1 > < p > Multiplies 2-digit numbers together. </ p > < section id = \"num_entry\" > < input type = \"number\" name = \"num1\" id = \"num1\" min = \"10\" max = \"99\" /> &times; < input type = \"number\" name = \"num2\" id = \"num2\" min = \"10\" max = \"99\" /> = < input type = \"number\" name = \"answer\" id = \"numAns\" min = \"10\" max = \"99\" readonly /> </ section > <!-- /section#num_entry --> < input type = \"button\" value = \"Multiply\" onclick = \"multiply();\" /> < hr /> < table id = \"multiplication-box\" > < tr > < td class = \"td-hidden\" ></ td > < td class = \"td-hidden\" ></ td > < th id = \"num1_show\" colspan = \"2\" ></ th > </ tr > < tr > < td class = \"td-hidden\" ></ td > < th > &times; </ th > < th id = \"num1a\" ></ th > < th id = \"num1b\" ></ th > </ tr > < tr > < th id = \"num2_show\" rowspan = \"2\" ></ th > < th id = \"num2a\" ></ th > < td id = \"m1\" ></ td > < td id = \"m2\" ></ td > < td id = \"m1_m2\" ></ td > </ tr > < tr > < th id = \"num2b\" ></ th > < td id = \"m3\" ></ td > < td id = \"m4\" ></ td > < td id = \"m3_m4\" ></ td > </ tr > < tr > < td class = \"td-hidden\" colspan = \"2\" ></ td > < td id = \"m1_m3\" ></ td > < td id = \"m2_m4\" ></ td > < th id = \"m_total\" ></ th > </ tr > </ table > <!-- /table#multiplication-box --> < script src = \"js/times-box.js\" ></ script > </ body > </ html > times-box.js 1 2 3 function multiply () { // to include code here } You should be able to see the following in your web browser: Multiplication Box Page","title":"Preparation"},{"location":"archive/202204/lab07A/#motivation","text":"School teachers are often advised to look for creative methods into their lessons in order to help engage with students better or help students learn concepts easier with different methods. The multiplication box is one of many creative methods concocted by elementary school math teachers to help students understand multiplication between two-digit numbers (i.e., integer values). This method involves separating both numbers into tens and units, and then multiplying them separately before adding their horizontal and vertical totals up. The cell at the bottom right denotes the eventual product between the two numbers. For instance, with \\(49 \\times 16\\) , both numbers are separated as the pairs (40, 9) and (10, 6) respectively. The following multiplication operations are then carried out first: \\(40 \\times 10 = 400\\) \\(40 \\times 6 = 240\\) \\(9 \\times 10 = 90\\) \\(9 \\times 6 = 54\\) The numbers are populated as shown in the figure below, where their horizontal totals and vertical totals are calculated and displayed. Between both sets of totals, they produce the same correct product after being added together (i.e., \\(490 + 294 = 640 + 144 = 784\\) ). Multiplication Box Page Take note that the only input fields of concern are the three which make up the equation on top of the multiply button, which is associated with the JavaScript multiply() function we will be completing in this activity. Only the first two are allowed to be populated manually by the user. The third representing the calculated product is set to be read-only .","title":"Motivation"},{"location":"archive/202204/lab07A/#step-1-obtaining-values-from-input-fields","text":"Let's work on obtaining the values entered into the first two input fields. The first two lines in the multiply() function is used to obtain the values from input fields input#num1 and input#num2 . times-box.js 1 2 3 4 function multiply () { let num1 = parseInt ( document . querySelector ( \"#num1\" ). value ); let num2 = parseInt ( document . querySelector ( \"#num2\" ). value ); } TIP: Using .innerHTML or .value When Retrieving Values TL;DR: In nearly all cases, .value is only used with <input> whilst .innerHTML is for getting values from any non-self-closing tags. Let's take a <p> element, for example. < p > Content/text/etc. inside here </ p > The content placed in between the opening <p> and closing </p> tags is what we refer to as inner HTML. Therefore, we use .innerHTML to obtain values that are stored in between similarly structured HTML tags. document . querySelector ( \"p\" ). innerHTML However, when it comes to <input> elements, these are represented with self-closing tags. Thus, there isn't really any inner HTML to target. <input> elements do have the a value attribute that contains entered text, though. In this case, it only makes sense to use .value to elicit values out of <input> fields. document . querySelector ( \"input\" ). innerHTML // does not work document . querySelector ( \"input\" ). value // use this for <input> elements instead Here, we observe that the parseInt() function is applied surrounding the expression used to obtain the value from input#num1 and input#num2 . This function ensures that an integer is obtained from the <input> elements, as the value obtained from them typically defaults to being of a \"string\" type. Before we proceed to use these values we've entered, we're going to implement a few checks to see if the numbers entered are two-digit integers . This means that: none of the two input fields (i.e., input#num1 and input#num2 ) should be empty no non-integer values or any value outside of the 10-99 range can be entered The first criterion is pretty straightforward - we check to see if the value of input#num1 and/or input#num2 results in an empty string (i.e., \"\" ). To implement the second criterion, we'll be using the sister variant function of parseInt() called parseFloat() . While parseInt() obtains an integer from the passed in string (in this case the value of the <input> field), parseFloat() obtains any number (with decimal points) from the passed in string. In summary, Function \"17\" \"17.5\" \"17as\" \"17.5as\" \"as17\" \"asap\" parseInt() 17 17 17 17 NaN Nan parseFloat() 17 17.5 17 17.5 NaN Nan From the table above, we can probably tell that parseFloat(\"17.5\") !== parseInt(\"17.5\") . We use this idea here to determine if the input number in either input#num1 or input#num2 or both are not integers, and then we proceed to replace them with the integer obtained after using the parseInt() function. For both criteria, we use an alert box to alert the user of any problems found. times-box.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 function multiply () { let num1 = parseInt ( document . querySelector ( \"#num1\" ). value ); let num2 = parseInt ( document . querySelector ( \"#num2\" ). value ); // replace num1 and num2 with parsed integer (if not integers) // alert user when number is replaced if ( parseFloat ( document . querySelector ( \"#num1\" ). value ) !== parseInt ( document . querySelector ( \"#num1\" ). value )) { if ( document . querySelector ( \"#num1\" ). value == \"\" ) { alert ( \"First number input is empty.\" ); } else { alert ( \"First number isn't an integer. Replacing value at input field with parsed integer value instead.\" ); document . querySelector ( \"#num1\" ). value = num1 ; } } if ( parseFloat ( document . querySelector ( \"#num2\" ). value ) !== parseInt ( document . querySelector ( \"#num2\" ). value )) { if ( document . querySelector ( \"#num2\" ). value == \"\" ) { alert ( \"Second number input is empty.\" ); } else { alert ( \"Second number isn't an integer. Replacing value at input field with parsed integer value instead.\" ); document . querySelector ( \"#num2\" ). value = num2 ; } } } Alert box pop-up if first number has not been entered. Alert box pop-up if second number has not been entered. Alert box pop-up if first number is not an integer. Alert box pop-up if second number is not an integer.","title":"Step 1: Obtaining Values from Input Fields"},{"location":"archive/202204/lab07A/#step-2-checking-validity-of-input-integers","text":"Now, onward to checking whether the input integers (i.e., num1 and num2 ) are within the correct range. A two-digit integer can only be either one of the numbers between 10 and 99; the rest of which simply will not fit. For the sake of simplicity, we will only consider positive values. We implement this check using a compound condition of 4 conditions to be met simultaneously: num1 >= 10 num1 <= 99 num2 >= 10 num2 <= 99 If all four of these conditions are met, we proceed to display num1 and num2 in td#num1_show and td#num2_show respectively. We will expand on the further logic to be implemented from here. Otherwise, we check to see either num1 < 10 || num1 > 99 or num2 < 10 || num2 > 99 , and display an appropriate error message in an alert box. times-box.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 function multiply () { let num1 = parseInt ( document . querySelector ( \"#num1\" ). value ); let num2 = parseInt ( document . querySelector ( \"#num2\" ). value ); // replace num1 and num2 with parsed integer (if not integers) // alert user when number is replaced if ( parseFloat ( document . querySelector ( \"#num1\" ). value ) !== parseInt ( document . querySelector ( \"#num1\" ). value )) { if ( document . querySelector ( \"#num1\" ). value == \"\" ) { alert ( \"First number input is empty.\" ); } else { alert ( \"First number isn't an integer. Replacing value at input field with parsed integer value instead.\" ); document . querySelector ( \"#num1\" ). value = num1 ; } } if ( parseFloat ( document . querySelector ( \"#num2\" ). value ) !== parseInt ( document . querySelector ( \"#num2\" ). value )) { if ( document . querySelector ( \"#num2\" ). value == \"\" ) { alert ( \"Second number input is empty.\" ); } else { alert ( \"Second number isn't an integer. Replacing value at input field with parsed integer value instead.\" ); document . querySelector ( \"#num2\" ). value = num2 ; } } // check if num1 and num2 is between 10 and 99 (inclusive) if ( num1 >= 10 && num1 <= 99 && num2 >= 10 && num2 <= 99 ) { // show number in num?_show document . querySelector ( \"#num1_show\" ). innerHTML = num1 ; document . querySelector ( \"#num2_show\" ). innerHTML = num2 ; // to continue more here } else { // if first number is not between 10 and 99 (inclusive) if ( num1 < 10 || num1 > 99 ) { alert ( \"First number should be between 10 and 99!\" ); document . querySelector ( \"#num1\" ). value = \"\" ; // empty first input field } // if secondnumber is not between 10 and 99 (inclusive) if ( num2 < 10 || num2 > 99 ) { alert ( \"Second number should be between 10 and 99!\" ); document . querySelector ( \"#num2\" ). value = \"\" ; // empty second input field } } } Alert box pop-up if first number is not between 10 and 99 (inclusive). Alert box pop-up if second number is not between 10 and 99 (inclusive). Otherwise, your multiplication table should start being populated from here.","title":"Step 2: Checking Validity of Input Integers"},{"location":"archive/202204/lab07A/#step-3-populating-the-table-tens-and-units-split","text":"The key ideas behind using the multiplication box/table as shown here is to split the two-digit numbers into the tens and units places. In order to elicit the tens digit from the number, we simply obtain the quotient after dividing it by 10. This quotient is then passed into one of the Math functions, namely the floor() function which rounds down a number to the lower boundary (e.g., 3.4 to 3, and 4.9 to 4). The units digit is obtained simply by using the modulo operator on the number; basically, what the remainder is after dividing the number by 10. These values are then stored contiguously in an array for each number (e.g., \\(49 \\times 16\\) produces [4, 9] and [1, 6] ). Each of these digit are then placed in the respective cells: td#num1a , td#num1b , td#num2a , td#num2b . times-box.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 function multiply () { let num1 = parseInt ( document . querySelector ( \"#num1\" ). value ); let num2 = parseInt ( document . querySelector ( \"#num2\" ). value ); // replace num1 and num2 with parsed integer (if not integers) // alert user when number is replaced if ( parseFloat ( document . querySelector ( \"#num1\" ). value ) !== parseInt ( document . querySelector ( \"#num1\" ). value )) { if ( document . querySelector ( \"#num1\" ). value == \"\" ) { alert ( \"First number input is empty.\" ); } else { alert ( \"First number isn't an integer. Replacing value at input field with parsed integer value instead.\" ); document . querySelector ( \"#num1\" ). value = num1 ; } } if ( parseFloat ( document . querySelector ( \"#num2\" ). value ) !== parseInt ( document . querySelector ( \"#num2\" ). value )) { if ( document . querySelector ( \"#num2\" ). value == \"\" ) { alert ( \"Second number input is empty.\" ); } else { alert ( \"Second number isn't an integer. Replacing value at input field with parsed integer value instead.\" ); document . querySelector ( \"#num2\" ). value = num2 ; } } // check if num1 and num2 is between 10 and 99 (inclusive) if ( num1 >= 10 && num1 <= 99 && num2 >= 10 && num2 <= 99 ) { // show number in num?_show document . querySelector ( \"#num1_show\" ). innerHTML = num1 ; document . querySelector ( \"#num2_show\" ). innerHTML = num2 ; // split number into digits based on tens and units value let arr_num1 = [ Math . floor ( num1 / 10 ) * 10 , num1 % 10 ]; let arr_num2 = [ Math . floor ( num2 / 10 ) * 10 , num2 % 10 ]; // show digits in num?a or num?b document . querySelector ( \"#num1a\" ). innerHTML = arr_num1 [ 0 ]; document . querySelector ( \"#num1b\" ). innerHTML = arr_num1 [ 1 ]; document . querySelector ( \"#num2a\" ). innerHTML = arr_num2 [ 0 ]; document . querySelector ( \"#num2b\" ). innerHTML = arr_num2 [ 1 ]; // to continue more here } else { // if first number is not between 10 and 99 (inclusive) if ( num1 < 10 || num1 > 99 ) { alert ( \"First number should be between 10 and 99!\" ); document . querySelector ( \"#num1\" ). value = \"\" ; // empty first input field } // if secondnumber is not between 10 and 99 (inclusive) if ( num2 < 10 || num2 > 99 ) { alert ( \"Second number should be between 10 and 99!\" ); document . querySelector ( \"#num2\" ). value = \"\" ; // empty second input field } } } Your function should now produce this result after clicking the button.","title":"Step 3: Populating the Table: Tens and Units Split"},{"location":"archive/202204/lab07A/#step-4-populating-the-table-calculating-intermediary-products","text":"By splitting both numbers into the tens and units digits, we can now carry out the following intermediary multiplications operations (taking \\(49 \\times 16\\) for example): \\(40 \\times 10 = 400\\) \\(40 \\times 6 = 240\\) \\(9 \\times 10 = 90\\) \\(9 \\times 6 = 54\\) Each of these products are placed like as shown in the following output. times-box.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 function multiply () { let num1 = parseInt ( document . querySelector ( \"#num1\" ). value ); let num2 = parseInt ( document . querySelector ( \"#num2\" ). value ); // replace num1 and num2 with parsed integer (if not integers) // alert user when number is replaced if ( parseFloat ( document . querySelector ( \"#num1\" ). value ) !== parseInt ( document . querySelector ( \"#num1\" ). value )) { if ( document . querySelector ( \"#num1\" ). value == \"\" ) { alert ( \"First number input is empty.\" ); } else { alert ( \"First number isn't an integer. Replacing value at input field with parsed integer value instead.\" ); document . querySelector ( \"#num1\" ). value = num1 ; } } if ( parseFloat ( document . querySelector ( \"#num2\" ). value ) !== parseInt ( document . querySelector ( \"#num2\" ). value )) { if ( document . querySelector ( \"#num2\" ). value == \"\" ) { alert ( \"Second number input is empty.\" ); } else { alert ( \"Second number isn't an integer. Replacing value at input field with parsed integer value instead.\" ); document . querySelector ( \"#num2\" ). value = num2 ; } } // check if num1 and num2 is between 10 and 99 (inclusive) if ( num1 >= 10 && num1 <= 99 && num2 >= 10 && num2 <= 99 ) { // show number in num?_show document . querySelector ( \"#num1_show\" ). innerHTML = num1 ; document . querySelector ( \"#num2_show\" ). innerHTML = num2 ; // split number into digits based on tens and units value let arr_num1 = [ Math . floor ( num1 / 10 ) * 10 , num1 % 10 ]; let arr_num2 = [ Math . floor ( num2 / 10 ) * 10 , num2 % 10 ]; // show digits in num?a or num?b document . querySelector ( \"#num1a\" ). innerHTML = arr_num1 [ 0 ]; document . querySelector ( \"#num1b\" ). innerHTML = arr_num1 [ 1 ]; document . querySelector ( \"#num2a\" ). innerHTML = arr_num2 [ 0 ]; document . querySelector ( \"#num2b\" ). innerHTML = arr_num2 [ 1 ]; /** * Calculate intermediary multiplication values * * Key: * m1 = num1a * num2a * m2 = num1b * num2a * m3 = num1a * num2b * m4 = num1b * num2b */ const m1 = arr_num1 [ 0 ] * arr_num2 [ 0 ]; const m2 = arr_num1 [ 1 ] * arr_num2 [ 0 ]; const m3 = arr_num1 [ 0 ] * arr_num2 [ 1 ]; const m4 = arr_num1 [ 1 ] * arr_num2 [ 1 ]; // Display intermediary multiplication values document . querySelector ( \"#m1\" ). innerHTML = m1 ; document . querySelector ( \"#m2\" ). innerHTML = m2 ; document . querySelector ( \"#m3\" ). innerHTML = m3 ; document . querySelector ( \"#m4\" ). innerHTML = m4 ; // to continue more here } else { // if first number is not between 10 and 99 (inclusive) if ( num1 < 10 || num1 > 99 ) { alert ( \"First number should be between 10 and 99!\" ); document . querySelector ( \"#num1\" ). value = \"\" ; // empty first input field } // if secondnumber is not between 10 and 99 (inclusive) if ( num2 < 10 || num2 > 99 ) { alert ( \"Second number should be between 10 and 99!\" ); document . querySelector ( \"#num2\" ). value = \"\" ; // empty second input field } } } Each of the four separate products should now populate the center table cells.","title":"Step 4: Populating the Table: Calculating Intermediary Products"},{"location":"archive/202204/lab07A/#step-5-populating-the-table-obtaining-horizontal-and-vertical-totals","text":"Now, we focus on getting the horizontal and vertical totals of the intermediary products. The cell containing the sum across the top row (horizontal) is denoted as #m1_m2 the bottom row (horizontal) is denoted as #m3_m4 the left column (vertical) is denoted as #m1_m3 the right column (vertical) is denoted as #m2_m4 times-box.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 function multiply () { let num1 = parseInt ( document . querySelector ( \"#num1\" ). value ); let num2 = parseInt ( document . querySelector ( \"#num2\" ). value ); // replace num1 and num2 with parsed integer (if not integers) // alert user when number is replaced if ( parseFloat ( document . querySelector ( \"#num1\" ). value ) !== parseInt ( document . querySelector ( \"#num1\" ). value )) { if ( document . querySelector ( \"#num1\" ). value == \"\" ) { alert ( \"First number input is empty.\" ); } else { alert ( \"First number isn't an integer. Replacing value at input field with parsed integer value instead.\" ); document . querySelector ( \"#num1\" ). value = num1 ; } } if ( parseFloat ( document . querySelector ( \"#num2\" ). value ) !== parseInt ( document . querySelector ( \"#num2\" ). value )) { if ( document . querySelector ( \"#num2\" ). value == \"\" ) { alert ( \"Second number input is empty.\" ); } else { alert ( \"Second number isn't an integer. Replacing value at input field with parsed integer value instead.\" ); document . querySelector ( \"#num2\" ). value = num2 ; } } // check if num1 and num2 is between 10 and 99 (inclusive) if ( num1 >= 10 && num1 <= 99 && num2 >= 10 && num2 <= 99 ) { // show number in num?_show document . querySelector ( \"#num1_show\" ). innerHTML = num1 ; document . querySelector ( \"#num2_show\" ). innerHTML = num2 ; // split number into digits based on tens and units value let arr_num1 = [ Math . floor ( num1 / 10 ) * 10 , num1 % 10 ]; let arr_num2 = [ Math . floor ( num2 / 10 ) * 10 , num2 % 10 ]; // show digits in num?a or num?b document . querySelector ( \"#num1a\" ). innerHTML = arr_num1 [ 0 ]; document . querySelector ( \"#num1b\" ). innerHTML = arr_num1 [ 1 ]; document . querySelector ( \"#num2a\" ). innerHTML = arr_num2 [ 0 ]; document . querySelector ( \"#num2b\" ). innerHTML = arr_num2 [ 1 ]; /** * Calculate intermediary multiplication values * * Key: * m1 = num1a * num2a * m2 = num1b * num2a * m3 = num1a * num2b * m4 = num1b * num2b */ const m1 = arr_num1 [ 0 ] * arr_num2 [ 0 ]; const m2 = arr_num1 [ 1 ] * arr_num2 [ 0 ]; const m3 = arr_num1 [ 0 ] * arr_num2 [ 1 ]; const m4 = arr_num1 [ 1 ] * arr_num2 [ 1 ]; // Display intermediary multiplication values document . querySelector ( \"#m1\" ). innerHTML = m1 ; document . querySelector ( \"#m2\" ). innerHTML = m2 ; document . querySelector ( \"#m3\" ). innerHTML = m3 ; document . querySelector ( \"#m4\" ). innerHTML = m4 ; // add horizontal row values and display the sums document . querySelector ( \"#m1_m2\" ). innerHTML = m1 + m2 ; document . querySelector ( \"#m3_m4\" ). innerHTML = m3 + m4 ; // add vertical column values and display the sums document . querySelector ( \"#m1_m3\" ). innerHTML = m1 + m3 ; document . querySelector ( \"#m2_m4\" ). innerHTML = m2 + m4 ; // to continue more here } else { // if first number is not between 10 and 99 (inclusive) if ( num1 < 10 || num1 > 99 ) { alert ( \"First number should be between 10 and 99!\" ); document . querySelector ( \"#num1\" ). value = \"\" ; // empty first input field } // if secondnumber is not between 10 and 99 (inclusive) if ( num2 < 10 || num2 > 99 ) { alert ( \"Second number should be between 10 and 99!\" ); document . querySelector ( \"#num2\" ). value = \"\" ; // empty second input field } } } The table should now contain the horizontal and vertical totals as shown.","title":"Step 5: Populating the Table: Obtaining Horizontal and Vertical Totals"},{"location":"archive/202204/lab07A/#step-6-retrieving-and-displaying-the-final-product","text":"Finally, we get to displaying the final product from multiplying the integers in the input fields. The vertical sum between values in cells #m1_m2 and #m3_m4 or #m1_m3 and #m2_m4 will suffice in this case. We first store this sum in a variable first before displaying them in the table cell #m_total and the #numAns input field. times-box.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 function multiply () { let num1 = parseInt ( document . querySelector ( \"#num1\" ). value ); let num2 = parseInt ( document . querySelector ( \"#num2\" ). value ); // replace num1 and num2 with parsed integer (if not integers) // alert user when number is replaced if ( parseFloat ( document . querySelector ( \"#num1\" ). value ) !== parseInt ( document . querySelector ( \"#num1\" ). value )) { if ( document . querySelector ( \"#num1\" ). value == \"\" ) { alert ( \"First number input is empty.\" ); } else { alert ( \"First number isn't an integer. Replacing value at input field with parsed integer value instead.\" ); document . querySelector ( \"#num1\" ). value = num1 ; } } if ( parseFloat ( document . querySelector ( \"#num2\" ). value ) !== parseInt ( document . querySelector ( \"#num2\" ). value )) { if ( document . querySelector ( \"#num2\" ). value == \"\" ) { alert ( \"Second number input is empty.\" ); } else { alert ( \"Second number isn't an integer. Replacing value at input field with parsed integer value instead.\" ); document . querySelector ( \"#num2\" ). value = num2 ; } } // check if num1 and num2 is between 10 and 99 (inclusive) if ( num1 >= 10 && num1 <= 99 && num2 >= 10 && num2 <= 99 ) { // show number in num?_show document . querySelector ( \"#num1_show\" ). innerHTML = num1 ; document . querySelector ( \"#num2_show\" ). innerHTML = num2 ; // split number into digits based on tens and units value let arr_num1 = [ Math . floor ( num1 / 10 ) * 10 , num1 % 10 ]; let arr_num2 = [ Math . floor ( num2 / 10 ) * 10 , num2 % 10 ]; // show digits in num?a or num?b document . querySelector ( \"#num1a\" ). innerHTML = arr_num1 [ 0 ]; document . querySelector ( \"#num1b\" ). innerHTML = arr_num1 [ 1 ]; document . querySelector ( \"#num2a\" ). innerHTML = arr_num2 [ 0 ]; document . querySelector ( \"#num2b\" ). innerHTML = arr_num2 [ 1 ]; /** * Calculate intermediary multiplication values * * Key: * m1 = num1a * num2a * m2 = num1b * num2a * m3 = num1a * num2b * m4 = num1b * num2b */ const m1 = arr_num1 [ 0 ] * arr_num2 [ 0 ]; const m2 = arr_num1 [ 1 ] * arr_num2 [ 0 ]; const m3 = arr_num1 [ 0 ] * arr_num2 [ 1 ]; const m4 = arr_num1 [ 1 ] * arr_num2 [ 1 ]; // Display intermediary multiplication values document . querySelector ( \"#m1\" ). innerHTML = m1 ; document . querySelector ( \"#m2\" ). innerHTML = m2 ; document . querySelector ( \"#m3\" ). innerHTML = m3 ; document . querySelector ( \"#m4\" ). innerHTML = m4 ; // add horizontal row values and display the sums document . querySelector ( \"#m1_m2\" ). innerHTML = m1 + m2 ; document . querySelector ( \"#m3_m4\" ). innerHTML = m3 + m4 ; // add vertical column values and display the sums document . querySelector ( \"#m1_m3\" ). innerHTML = m1 + m3 ; document . querySelector ( \"#m2_m4\" ). innerHTML = m2 + m4 ; // calculate product const product = parseInt ( document . querySelector ( \"#m1_m2\" ). innerHTML ) + parseInt ( document . querySelector ( \"#m3_m4\" ). innerHTML ); // or // const product = // parseInt(document.querySelector(\"#m1_m3\").innerHTML) + parseInt(document.querySelector(\"#m2_m4\").innerHTML); // display full product in table document . querySelector ( \"#m_total\" ). innerHTML = product ; // display full product in answer input field document . querySelector ( \"#numAns\" ). value = product ; } else { // if first number is not between 10 and 99 (inclusive) if ( num1 < 10 || num1 > 99 ) { alert ( \"First number should be between 10 and 99!\" ); document . querySelector ( \"#num1\" ). value = \"\" ; // empty first input field } // if secondnumber is not between 10 and 99 (inclusive) if ( num2 < 10 || num2 > 99 ) { alert ( \"Second number should be between 10 and 99!\" ); document . querySelector ( \"#num2\" ). value = \"\" ; // empty second input field } } } And.. it's complete. Well done! And voila, we've just created a replica of the multiplication box/table used by some teachers to help teach children about multiplication between two-digit numbers!","title":"Step 6: Retrieving and Displaying the Final Product"},{"location":"archive/202204/lab07A/#challenge","text":"Try to recreate the same table, but dealing with multiplication between three-digit integers instead of two.","title":"Challenge"},{"location":"archive/202204/lab07B/","text":"Practical 07 (Activity 2): Mark Demo The original Practical 7 has moved! For instructions on installing XAMPP for the upcoming lessons, click HERE . Preparation You'll require the following font file to be kept in a subfolder called fonts in your project directory: SF Pro Display Additionally, CSS and JS files are to be kept in their own separate subfolders. style.css 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 @ font-face { font-family : \"SF Pro Display\" ; src : url ( \"../fonts/SF-Pro-Display-Regular.otf\" ); } * { font-family : \"SF Pro Display\" , sans-serif ; } h1 { font-size : 48 px ; } hr { margin : 2 rem 0 ; } button { background-color : transparent ; border-radius : 1 rem ; font-size : 24 px ; padding : 0.5 rem 1 rem ; } button : hover { box-shadow : 0 0 1 rem yellowgreen , 0 0 5 rem lemonchiffon ; cursor : pointer ; } button : active { background-color : lemonchiffon ; } . text-center { text-align : center ; } style_input.css 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 input [ type = \"number\" ] { text-align : right ; } input : read-only { background-color : khaki ; } /* For Chrome, Safari, Edge, Opera */ input :: -webkit-outer-spin-button , input :: -webkit-inner-spin-button { -webkit- appearance : none ; margin : 0 ; } /* For Firefox */ input [ type = \"number\" ] { -moz- appearance : textfield ; } style_table.css 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 table { border-collapse : collapse ; margin : 0 auto ; } table * { font-size : 24 px ; } th , td { border : 1 px solid black ; padding : 0.5 rem 1 rem ; } th { background-color : lightcyan ; } tr : not ( : first-of-type ) : not ( : last-of-type ) : hover { background-color : greenyellow ; } index.html 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" /> < meta http-equiv = \"X-UA-Compatible\" content = \"IE=edge\" /> < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" /> < title > Mark Demo </ title > < link rel = \"stylesheet\" href = \"css/style.css\" /> < link rel = \"stylesheet\" href = \"css/style_input.css\" /> < link rel = \"stylesheet\" href = \"css/style_table.css\" /> </ head > < body > < section class = \"text-center\" > < h1 > Mark Demo </ h1 > </ section > <!-- /section.text-center --> < table > < tr class = \"text-center\" > < th > # </ th > < th > Asgn 1 [100%] </ th > < th > Asgn 2 [100%] </ th > < th > Asgn 1 [20 points] </ th > < th > Asgn 2 [30 points] </ th > < th > Total [50 points] </ th > </ tr > < tr > < th > 1 </ th > < td >< input type = \"number\" name = \"stu1_asgn1\" id = \"stu1_asgn1\" /></ td > < td >< input type = \"number\" name = \"stu1_asgn2\" id = \"stu1_asgn2\" /></ td > < td >< input type = \"number\" name = \"stu1_asgn1_points\" id = \"stu1_asgn1_points\" readonly /></ td > < td >< input type = \"number\" name = \"stu1_asgn2_points\" id = \"stu1_asgn2_points\" readonly /></ td > < td >< input type = \"number\" name = \"stu1_total_points\" id = \"stu1_total_points\" readonly /></ td > </ tr > < tr > < th > 2 </ th > < td >< input type = \"number\" name = \"stu2_asgn1\" id = \"stu2_asgn1\" /></ td > < td >< input type = \"number\" name = \"stu2_asgn2\" id = \"stu2_asgn2\" /></ td > < td >< input type = \"number\" name = \"stu2_asgn1_points\" id = \"stu2_asgn1_points\" readonly /></ td > < td >< input type = \"number\" name = \"stu2_asgn2_points\" id = \"stu2_asgn2_points\" readonly /></ td > < td >< input type = \"number\" name = \"stu2_total_points\" id = \"stu2_total_points\" readonly /></ td > </ tr > < tr > < th > 3 </ th > < td >< input type = \"number\" name = \"stu3_asgn1\" id = \"stu3_asgn1\" /></ td > < td >< input type = \"number\" name = \"stu3_asgn2\" id = \"stu3_asgn2\" /></ td > < td >< input type = \"number\" name = \"stu3_asgn1_points\" id = \"stu3_asgn1_points\" readonly /></ td > < td >< input type = \"number\" name = \"stu3_asgn2_points\" id = \"stu3_asgn2_points\" readonly /></ td > < td >< input type = \"number\" name = \"stu3_total_points\" id = \"stu3_total_points\" readonly /></ td > </ tr > < tr > < th colspan = \"3\" > Average </ th > < th >< input type = \"number\" name = \"avg1\" id = \"avg1\" readonly /></ th > < th >< input type = \"number\" name = \"avg2\" id = \"avg2\" readonly /></ th > < th >< input type = \"number\" name = \"avg_total\" id = \"avg_total\" readonly /></ th > </ tr > </ table > <!-- /table --> < hr /> < section class = \"text-center\" > < button onclick = \"calculate();\" > Calculate Total and Average </ button > < button onclick = \"clearTable();\" > Clear Table </ button > </ section > <!-- /section.text-center --> < script src = \"js/script.js\" ></ script > </ body > </ html > script.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 function calculate () { // Variables to contain total values let asgn1_total = 0 , asgn2_total = 0 , grand_total = 0 ; // We'll use a constant to referece the <table> element to try to shorten the code. const TABLE = document . querySelector ( \"table\" ); // Calculate number of rows in between top and bottom row const NUMBER_OF_STUDENTS = TABLE . rows . length - 2 ; // we will be adding code from here } function clearTable () { // Initialize Asgn 1 & Asgn 2 (100% each) to 0 document . querySelectorAll ( `input:not(:read-only)` ). forEach (( inputField ) => ( inputField . value = \"0\" )); // Initialize Asgn & Total Points to 0.00 document . querySelectorAll ( `input:read-only` ). forEach (( inputField ) => ( inputField . value = \"0.00\" )); } window . onload = clearTable (); You should be able to see the following in your web browser: Multiplication Box Page Motivation This intermediate-level activity will provide a guide as to how you can effectively use program control structures to skillfully loop through the same calculation process with different sets of inputs at a time. Here, each row represents a student's record. Each student would have had 2 assessment components graded on a 0 to 100 percent scale. When the button at the bottom of the page (i.e., Calculate Total and Average) is selected, each student's Assignment 1 and 2's respective point weightage is calculated based on the input marks. This is followed up by the calculation of points obtained by each student, along with the cumulative average of each point component. The button has an onclick attribute that invokes the calculate() function when clicked on. Another button to clear the table is present alongside while having its functionality tied in with the clearTable() function. Understanding the clearTable() Function The clearTable() function contains two statements. The first statement targets all input fields not set to read-only to \"0\", whilst the second statement sets the remaining input fields' value attribute to \"0.00\". Both statements use the forEach() method, but a regular for loop will also suffice here. The forEach() method retrieves each related input field and autonomously sets their value attributes accordingly. Step 1: Obtaining Values from Input Fields The starting point in script.js should give some light onto the function of concern: the calculate() function. At first, we initialize variables asgn1_total , asgn2_total and grand_total to contain the total sum of all points. We will revisit them later, but for now we initialize all of them with the value 0. We will also make reference to the <table> element a lot here. In order to shorten the code as to simplify the process, we declare a constant variable named TABLE referencing this <table> element. In addition, we refer to the number of student records to be put in as TABLE.rows.length - 2 . Of course, we can immediately take it as just 3 since there isn't any functionality to add more rows that'll question whether the number of records will stay put. Not only that, the way you calculate the number of students will depend on whether you semantic tags within your <table> element; if so, the value of NUMBER_OF_STUDENTS constant should be calculated differently. script.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 function calculate () { // Variables to contain total values let asgn1_total = 0 , asgn2_total = 0 , grand_total = 0 ; // We'll use a constant to referece the <table> element to try to shorten the code. const TABLE = document . querySelector ( \"table\" ); // Calculate number of rows in between top and bottom row const NUMBER_OF_STUDENTS = TABLE . rows . length - 2 ; // we will be adding code from here } function clearTable () { // Initialize Asgn 1 & Asgn 2 (100% each) to 0 document . querySelectorAll ( `input:not(:read-only)` ). forEach (( inputField ) => ( inputField . value = \"0\" )); // Initialize Asgn & Total Points to 0.00 document . querySelectorAll ( `input:read-only` ). forEach (( inputField ) => ( inputField . value = \"0.00\" )); } window . onload = clearTable (); Step 2: Catering for Unfilled Input Fields Now here's the bit that would take many lines if done without any program control structures in place. We mitigate needing to write numerous lines of code by introducing a for loop that will iterate over each row while obtaining values from each of its associated input fields. The id attribute values for each input field referencing the total marks (100%) for each student is named in a fashion similar to this: #stu${i}_asgn1 and #stu${i}_asgn2 . More specifically, you will find input fields with the following id attribute values: Student 1: #stu1_asgn1 , #stu1_asgn2 Student 2: #stu2_asgn1 , #stu2_asgn2 Student 3: #stu3_asgn1 , #stu3_asgn2 Notice a pattern in how the id attribute values are aptly named? By iterating an iterator variable (we'll be using i here), we can run this in a for loop to write out each required statement once! The first order of action in this for loop is to check whether there are any unfilled input fields in any of the six input fields with the aforementioned id attribute values. Should there be any, they will be automatically filled with \"0\" . This will help prevent errors during the calculation of total and average points. script.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 function calculate () { // Variables to contain total values let asgn1_total = 0 , asgn2_total = 0 , grand_total = 0 ; // We'll use a constant to referece the <table> element to try to shorten the code. const TABLE = document . querySelector ( \"table\" ); // Calculate number of rows in between top and bottom row const NUMBER_OF_STUDENTS = TABLE . rows . length - 2 ; for ( let i = 1 ; i <= NUMBER_OF_STUDENTS ; ++ i ) { /** * Check if #stu?_asgn1 and #stu?_asgn2 are empty * If empty, place in 0 values. */ if ( document . querySelector ( `#stu ${ i } _asgn1` ). value == \"\" ) { document . querySelector ( `#stu ${ i } _asgn1` ). value = \"0\" ; } if ( document . querySelector ( `#stu ${ i } _asgn2` ). value == \"\" ) { document . querySelector ( `#stu ${ i } _asgn2` ). value = \"0\" ; } // we will be adding code from here } } function clearTable () { // Initialize Asgn 1 & Asgn 2 (100% each) to 0 document . querySelectorAll ( `input:not(:read-only)` ). forEach (( inputField ) => ( inputField . value = \"0\" )); // Initialize Asgn & Total Points to 0.00 document . querySelectorAll ( `input:read-only` ). forEach (( inputField ) => ( inputField . value = \"0.00\" )); } window . onload = clearTable (); A Check The procedure above doesn't cater for negative marks. Assuming that the marks entered should be nonnegative, how would you go about catering for this requirement? Step 3: Generating Total Points Now we get to calculating the total points obtained from the entered Assignment 1 and 2 marks. From the table, we can probably guess that the total points obtained for the Assignment 1 component is to be scaled from 100% to 20 points (i.e., multiply by 0.2) Assignment 2 component is to be scaled from 100% to 30 points (i.e., multiply by 0.3) During each for loop iteration, we store the points obtained for Assignment 1 and Assignment 2 into asgn1_points and asgn2_points respectively. Then from here, we display them in #stu${i}_asgn1_points and #stu${i}_asgn2_points , where i still represents the iteration number/row count/student count. These point values are displayed in 2 decimal places using an appended .toFixed() function, which takes in 2 as the parameter denoting the number of decimal places to be shown. After both asgn1_points and asgn2_points have been calculated, we proceed with adding both of them to stu_total before displaying them in a similar fashion in #stu${i}_total_points with the same number of decimal places shown. Also, during each iteration, the value of asgn1_points is added to asgn1_total , the value of asgn2_points is added to asgn2_total , and the value of grand_points is added to grand_total . script.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 function calculate () { // Variables to contain total values let asgn1_total = 0 , asgn2_total = 0 , grand_total = 0 ; // We'll use a constant to referece the <table> element to try to shorten the code. const TABLE = document . querySelector ( \"table\" ); // Calculate number of rows in between top and bottom row const NUMBER_OF_STUDENTS = TABLE . rows . length - 2 ; for ( let i = 1 ; i <= NUMBER_OF_STUDENTS ; ++ i ) { /** * Check if #stu?_asgn1 and #stu?_asgn2 are empty * If empty, place in 0 values. */ if ( document . querySelector ( `#stu ${ i } _asgn1` ). value == \"\" ) { document . querySelector ( `#stu ${ i } _asgn1` ). value = \"0\" ; } if ( document . querySelector ( `#stu ${ i } _asgn2` ). value == \"\" ) { document . querySelector ( `#stu ${ i } _asgn2` ). value = \"0\" ; } // calculate the marks from total percentage let asgn1_points = parseFloat ( document . querySelector ( `#stu ${ i } _asgn1` ). value ) * 0.2 ; let asgn2_points = parseFloat ( document . querySelector ( `#stu ${ i } _asgn2` ). value ) * 0.3 ; document . querySelector ( `#stu ${ i } _asgn1_points` ). value = asgn1_points . toFixed ( 2 ); document . querySelector ( `#stu ${ i } _asgn2_points` ). value = asgn2_points . toFixed ( 2 ); // calculate total marks for given student let stu_total = parseFloat ( document . querySelector ( `#stu ${ i } _asgn1_points` ). value ) + parseFloat ( document . querySelector ( `#stu ${ i } _asgn2_points` ). value ); document . querySelector ( `#stu ${ i } _total_points` ). value = stu_total . toFixed ( 2 ); // add to respective totals asgn1_total += asgn1_points ; asgn2_total += asgn2_points ; grand_total += stu_total ; } // Note: use parseFloat() to get number with decimal places, and parseInt() to get Integer values (non-decimal) // we will be adding code from here } function clearTable () { // Initialize Asgn 1 & Asgn 2 (100% each) to 0 document . querySelectorAll ( `input:not(:read-only)` ). forEach (( inputField ) => ( inputField . value = \"0\" )); // Initialize Asgn & Total Points to 0.00 document . querySelectorAll ( `input:read-only` ). forEach (( inputField ) => ( inputField . value = \"0.00\" )); } window . onload = clearTable (); Step 4: Generating Average Points Finally, we get to calculating the average points obtained among all students for Assignment 1, Assignment 2, and accumulatively. The averages for each component are stored in asgn1_avg , asgn2_avg , and grand_avg respectively. These averages are calculated by dividing their respective totals by the number of students (i.e., NUMBER_OF_STUDENTS ). The last course of action is to display them in the input fields with id attribute values #avg1 , #avg2 , #avg_total . script.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 function calculate () { // Variables to contain total values let asgn1_total = 0 , asgn2_total = 0 , grand_total = 0 ; // We'll use a constant to referece the <table> element to try to shorten the code. const TABLE = document . querySelector ( \"table\" ); // Calculate number of rows in between top and bottom row const NUMBER_OF_STUDENTS = TABLE . rows . length - 2 ; for ( let i = 1 ; i <= NUMBER_OF_STUDENTS ; ++ i ) { /** * Check if #stu?_asgn1 and #stu?_asgn2 are empty * If empty, place in 0 values. */ if ( document . querySelector ( `#stu ${ i } _asgn1` ). value == \"\" ) { document . querySelector ( `#stu ${ i } _asgn1` ). value = \"0\" ; } if ( document . querySelector ( `#stu ${ i } _asgn2` ). value == \"\" ) { document . querySelector ( `#stu ${ i } _asgn2` ). value = \"0\" ; } // calculate the marks from total percentage let asgn1_points = parseFloat ( document . querySelector ( `#stu ${ i } _asgn1` ). value ) * 0.2 ; let asgn2_points = parseFloat ( document . querySelector ( `#stu ${ i } _asgn2` ). value ) * 0.3 ; document . querySelector ( `#stu ${ i } _asgn1_points` ). value = asgn1_points . toFixed ( 2 ); document . querySelector ( `#stu ${ i } _asgn2_points` ). value = asgn2_points . toFixed ( 2 ); // calculate total marks for given student let stu_total = parseFloat ( document . querySelector ( `#stu ${ i } _asgn1_points` ). value ) + parseFloat ( document . querySelector ( `#stu ${ i } _asgn2_points` ). value ); document . querySelector ( `#stu ${ i } _total_points` ). value = stu_total . toFixed ( 2 ); // add to respective totals asgn1_total += asgn1_points ; asgn2_total += asgn2_points ; grand_total += stu_total ; } // Note: use parseFloat() to get number with decimal places, and parseInt() to get Integer values (non-decimal) // calculate average const asgn1_avg = asgn1_total / NUMBER_OF_STUDENTS ; const asgn2_avg = asgn2_total / NUMBER_OF_STUDENTS ; const grand_avg = grand_total / NUMBER_OF_STUDENTS ; // assign average to correct input fields document . querySelector ( `#avg1` ). value = asgn1_avg . toFixed ( 2 ); document . querySelector ( `#avg2` ). value = asgn2_avg . toFixed ( 2 ); document . querySelector ( `#avg_total` ). value = grand_avg . toFixed ( 2 ); // Note: toFixed(2) sets number values to display 2 decimal places } function clearTable () { // Initialize Asgn 1 & Asgn 2 (100% each) to 0 document . querySelectorAll ( `input:not(:read-only)` ). forEach (( inputField ) => ( inputField . value = \"0\" )); // Initialize Asgn & Total Points to 0.00 document . querySelectorAll ( `input:read-only` ). forEach (( inputField ) => ( inputField . value = \"0.00\" )); } window . onload = clearTable (); This is the end - you've successfully completed the Mark Demo page.. congrats!! Hopefully, this would have given you an idea or two on how to go about the similarly structured problem in your second assignment! \ud83d\ude0a","title":"Practical 07 (Activity 2): Mark Demo"},{"location":"archive/202204/lab07B/#practical-07-activity-2-mark-demo","text":"The original Practical 7 has moved! For instructions on installing XAMPP for the upcoming lessons, click HERE .","title":"Practical 07 (Activity 2): Mark Demo"},{"location":"archive/202204/lab07B/#preparation","text":"You'll require the following font file to be kept in a subfolder called fonts in your project directory: SF Pro Display Additionally, CSS and JS files are to be kept in their own separate subfolders. style.css 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 @ font-face { font-family : \"SF Pro Display\" ; src : url ( \"../fonts/SF-Pro-Display-Regular.otf\" ); } * { font-family : \"SF Pro Display\" , sans-serif ; } h1 { font-size : 48 px ; } hr { margin : 2 rem 0 ; } button { background-color : transparent ; border-radius : 1 rem ; font-size : 24 px ; padding : 0.5 rem 1 rem ; } button : hover { box-shadow : 0 0 1 rem yellowgreen , 0 0 5 rem lemonchiffon ; cursor : pointer ; } button : active { background-color : lemonchiffon ; } . text-center { text-align : center ; } style_input.css 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 input [ type = \"number\" ] { text-align : right ; } input : read-only { background-color : khaki ; } /* For Chrome, Safari, Edge, Opera */ input :: -webkit-outer-spin-button , input :: -webkit-inner-spin-button { -webkit- appearance : none ; margin : 0 ; } /* For Firefox */ input [ type = \"number\" ] { -moz- appearance : textfield ; } style_table.css 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 table { border-collapse : collapse ; margin : 0 auto ; } table * { font-size : 24 px ; } th , td { border : 1 px solid black ; padding : 0.5 rem 1 rem ; } th { background-color : lightcyan ; } tr : not ( : first-of-type ) : not ( : last-of-type ) : hover { background-color : greenyellow ; } index.html 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" /> < meta http-equiv = \"X-UA-Compatible\" content = \"IE=edge\" /> < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" /> < title > Mark Demo </ title > < link rel = \"stylesheet\" href = \"css/style.css\" /> < link rel = \"stylesheet\" href = \"css/style_input.css\" /> < link rel = \"stylesheet\" href = \"css/style_table.css\" /> </ head > < body > < section class = \"text-center\" > < h1 > Mark Demo </ h1 > </ section > <!-- /section.text-center --> < table > < tr class = \"text-center\" > < th > # </ th > < th > Asgn 1 [100%] </ th > < th > Asgn 2 [100%] </ th > < th > Asgn 1 [20 points] </ th > < th > Asgn 2 [30 points] </ th > < th > Total [50 points] </ th > </ tr > < tr > < th > 1 </ th > < td >< input type = \"number\" name = \"stu1_asgn1\" id = \"stu1_asgn1\" /></ td > < td >< input type = \"number\" name = \"stu1_asgn2\" id = \"stu1_asgn2\" /></ td > < td >< input type = \"number\" name = \"stu1_asgn1_points\" id = \"stu1_asgn1_points\" readonly /></ td > < td >< input type = \"number\" name = \"stu1_asgn2_points\" id = \"stu1_asgn2_points\" readonly /></ td > < td >< input type = \"number\" name = \"stu1_total_points\" id = \"stu1_total_points\" readonly /></ td > </ tr > < tr > < th > 2 </ th > < td >< input type = \"number\" name = \"stu2_asgn1\" id = \"stu2_asgn1\" /></ td > < td >< input type = \"number\" name = \"stu2_asgn2\" id = \"stu2_asgn2\" /></ td > < td >< input type = \"number\" name = \"stu2_asgn1_points\" id = \"stu2_asgn1_points\" readonly /></ td > < td >< input type = \"number\" name = \"stu2_asgn2_points\" id = \"stu2_asgn2_points\" readonly /></ td > < td >< input type = \"number\" name = \"stu2_total_points\" id = \"stu2_total_points\" readonly /></ td > </ tr > < tr > < th > 3 </ th > < td >< input type = \"number\" name = \"stu3_asgn1\" id = \"stu3_asgn1\" /></ td > < td >< input type = \"number\" name = \"stu3_asgn2\" id = \"stu3_asgn2\" /></ td > < td >< input type = \"number\" name = \"stu3_asgn1_points\" id = \"stu3_asgn1_points\" readonly /></ td > < td >< input type = \"number\" name = \"stu3_asgn2_points\" id = \"stu3_asgn2_points\" readonly /></ td > < td >< input type = \"number\" name = \"stu3_total_points\" id = \"stu3_total_points\" readonly /></ td > </ tr > < tr > < th colspan = \"3\" > Average </ th > < th >< input type = \"number\" name = \"avg1\" id = \"avg1\" readonly /></ th > < th >< input type = \"number\" name = \"avg2\" id = \"avg2\" readonly /></ th > < th >< input type = \"number\" name = \"avg_total\" id = \"avg_total\" readonly /></ th > </ tr > </ table > <!-- /table --> < hr /> < section class = \"text-center\" > < button onclick = \"calculate();\" > Calculate Total and Average </ button > < button onclick = \"clearTable();\" > Clear Table </ button > </ section > <!-- /section.text-center --> < script src = \"js/script.js\" ></ script > </ body > </ html > script.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 function calculate () { // Variables to contain total values let asgn1_total = 0 , asgn2_total = 0 , grand_total = 0 ; // We'll use a constant to referece the <table> element to try to shorten the code. const TABLE = document . querySelector ( \"table\" ); // Calculate number of rows in between top and bottom row const NUMBER_OF_STUDENTS = TABLE . rows . length - 2 ; // we will be adding code from here } function clearTable () { // Initialize Asgn 1 & Asgn 2 (100% each) to 0 document . querySelectorAll ( `input:not(:read-only)` ). forEach (( inputField ) => ( inputField . value = \"0\" )); // Initialize Asgn & Total Points to 0.00 document . querySelectorAll ( `input:read-only` ). forEach (( inputField ) => ( inputField . value = \"0.00\" )); } window . onload = clearTable (); You should be able to see the following in your web browser: Multiplication Box Page","title":"Preparation"},{"location":"archive/202204/lab07B/#motivation","text":"This intermediate-level activity will provide a guide as to how you can effectively use program control structures to skillfully loop through the same calculation process with different sets of inputs at a time. Here, each row represents a student's record. Each student would have had 2 assessment components graded on a 0 to 100 percent scale. When the button at the bottom of the page (i.e., Calculate Total and Average) is selected, each student's Assignment 1 and 2's respective point weightage is calculated based on the input marks. This is followed up by the calculation of points obtained by each student, along with the cumulative average of each point component. The button has an onclick attribute that invokes the calculate() function when clicked on. Another button to clear the table is present alongside while having its functionality tied in with the clearTable() function.","title":"Motivation"},{"location":"archive/202204/lab07B/#understanding-the-cleartable-function","text":"The clearTable() function contains two statements. The first statement targets all input fields not set to read-only to \"0\", whilst the second statement sets the remaining input fields' value attribute to \"0.00\". Both statements use the forEach() method, but a regular for loop will also suffice here. The forEach() method retrieves each related input field and autonomously sets their value attributes accordingly.","title":"Understanding the clearTable() Function"},{"location":"archive/202204/lab07B/#step-1-obtaining-values-from-input-fields","text":"The starting point in script.js should give some light onto the function of concern: the calculate() function. At first, we initialize variables asgn1_total , asgn2_total and grand_total to contain the total sum of all points. We will revisit them later, but for now we initialize all of them with the value 0. We will also make reference to the <table> element a lot here. In order to shorten the code as to simplify the process, we declare a constant variable named TABLE referencing this <table> element. In addition, we refer to the number of student records to be put in as TABLE.rows.length - 2 . Of course, we can immediately take it as just 3 since there isn't any functionality to add more rows that'll question whether the number of records will stay put. Not only that, the way you calculate the number of students will depend on whether you semantic tags within your <table> element; if so, the value of NUMBER_OF_STUDENTS constant should be calculated differently. script.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 function calculate () { // Variables to contain total values let asgn1_total = 0 , asgn2_total = 0 , grand_total = 0 ; // We'll use a constant to referece the <table> element to try to shorten the code. const TABLE = document . querySelector ( \"table\" ); // Calculate number of rows in between top and bottom row const NUMBER_OF_STUDENTS = TABLE . rows . length - 2 ; // we will be adding code from here } function clearTable () { // Initialize Asgn 1 & Asgn 2 (100% each) to 0 document . querySelectorAll ( `input:not(:read-only)` ). forEach (( inputField ) => ( inputField . value = \"0\" )); // Initialize Asgn & Total Points to 0.00 document . querySelectorAll ( `input:read-only` ). forEach (( inputField ) => ( inputField . value = \"0.00\" )); } window . onload = clearTable ();","title":"Step 1: Obtaining Values from Input Fields"},{"location":"archive/202204/lab07B/#step-2-catering-for-unfilled-input-fields","text":"Now here's the bit that would take many lines if done without any program control structures in place. We mitigate needing to write numerous lines of code by introducing a for loop that will iterate over each row while obtaining values from each of its associated input fields. The id attribute values for each input field referencing the total marks (100%) for each student is named in a fashion similar to this: #stu${i}_asgn1 and #stu${i}_asgn2 . More specifically, you will find input fields with the following id attribute values: Student 1: #stu1_asgn1 , #stu1_asgn2 Student 2: #stu2_asgn1 , #stu2_asgn2 Student 3: #stu3_asgn1 , #stu3_asgn2 Notice a pattern in how the id attribute values are aptly named? By iterating an iterator variable (we'll be using i here), we can run this in a for loop to write out each required statement once! The first order of action in this for loop is to check whether there are any unfilled input fields in any of the six input fields with the aforementioned id attribute values. Should there be any, they will be automatically filled with \"0\" . This will help prevent errors during the calculation of total and average points. script.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 function calculate () { // Variables to contain total values let asgn1_total = 0 , asgn2_total = 0 , grand_total = 0 ; // We'll use a constant to referece the <table> element to try to shorten the code. const TABLE = document . querySelector ( \"table\" ); // Calculate number of rows in between top and bottom row const NUMBER_OF_STUDENTS = TABLE . rows . length - 2 ; for ( let i = 1 ; i <= NUMBER_OF_STUDENTS ; ++ i ) { /** * Check if #stu?_asgn1 and #stu?_asgn2 are empty * If empty, place in 0 values. */ if ( document . querySelector ( `#stu ${ i } _asgn1` ). value == \"\" ) { document . querySelector ( `#stu ${ i } _asgn1` ). value = \"0\" ; } if ( document . querySelector ( `#stu ${ i } _asgn2` ). value == \"\" ) { document . querySelector ( `#stu ${ i } _asgn2` ). value = \"0\" ; } // we will be adding code from here } } function clearTable () { // Initialize Asgn 1 & Asgn 2 (100% each) to 0 document . querySelectorAll ( `input:not(:read-only)` ). forEach (( inputField ) => ( inputField . value = \"0\" )); // Initialize Asgn & Total Points to 0.00 document . querySelectorAll ( `input:read-only` ). forEach (( inputField ) => ( inputField . value = \"0.00\" )); } window . onload = clearTable (); A Check The procedure above doesn't cater for negative marks. Assuming that the marks entered should be nonnegative, how would you go about catering for this requirement?","title":"Step 2: Catering for Unfilled Input Fields"},{"location":"archive/202204/lab07B/#step-3-generating-total-points","text":"Now we get to calculating the total points obtained from the entered Assignment 1 and 2 marks. From the table, we can probably guess that the total points obtained for the Assignment 1 component is to be scaled from 100% to 20 points (i.e., multiply by 0.2) Assignment 2 component is to be scaled from 100% to 30 points (i.e., multiply by 0.3) During each for loop iteration, we store the points obtained for Assignment 1 and Assignment 2 into asgn1_points and asgn2_points respectively. Then from here, we display them in #stu${i}_asgn1_points and #stu${i}_asgn2_points , where i still represents the iteration number/row count/student count. These point values are displayed in 2 decimal places using an appended .toFixed() function, which takes in 2 as the parameter denoting the number of decimal places to be shown. After both asgn1_points and asgn2_points have been calculated, we proceed with adding both of them to stu_total before displaying them in a similar fashion in #stu${i}_total_points with the same number of decimal places shown. Also, during each iteration, the value of asgn1_points is added to asgn1_total , the value of asgn2_points is added to asgn2_total , and the value of grand_points is added to grand_total . script.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 function calculate () { // Variables to contain total values let asgn1_total = 0 , asgn2_total = 0 , grand_total = 0 ; // We'll use a constant to referece the <table> element to try to shorten the code. const TABLE = document . querySelector ( \"table\" ); // Calculate number of rows in between top and bottom row const NUMBER_OF_STUDENTS = TABLE . rows . length - 2 ; for ( let i = 1 ; i <= NUMBER_OF_STUDENTS ; ++ i ) { /** * Check if #stu?_asgn1 and #stu?_asgn2 are empty * If empty, place in 0 values. */ if ( document . querySelector ( `#stu ${ i } _asgn1` ). value == \"\" ) { document . querySelector ( `#stu ${ i } _asgn1` ). value = \"0\" ; } if ( document . querySelector ( `#stu ${ i } _asgn2` ). value == \"\" ) { document . querySelector ( `#stu ${ i } _asgn2` ). value = \"0\" ; } // calculate the marks from total percentage let asgn1_points = parseFloat ( document . querySelector ( `#stu ${ i } _asgn1` ). value ) * 0.2 ; let asgn2_points = parseFloat ( document . querySelector ( `#stu ${ i } _asgn2` ). value ) * 0.3 ; document . querySelector ( `#stu ${ i } _asgn1_points` ). value = asgn1_points . toFixed ( 2 ); document . querySelector ( `#stu ${ i } _asgn2_points` ). value = asgn2_points . toFixed ( 2 ); // calculate total marks for given student let stu_total = parseFloat ( document . querySelector ( `#stu ${ i } _asgn1_points` ). value ) + parseFloat ( document . querySelector ( `#stu ${ i } _asgn2_points` ). value ); document . querySelector ( `#stu ${ i } _total_points` ). value = stu_total . toFixed ( 2 ); // add to respective totals asgn1_total += asgn1_points ; asgn2_total += asgn2_points ; grand_total += stu_total ; } // Note: use parseFloat() to get number with decimal places, and parseInt() to get Integer values (non-decimal) // we will be adding code from here } function clearTable () { // Initialize Asgn 1 & Asgn 2 (100% each) to 0 document . querySelectorAll ( `input:not(:read-only)` ). forEach (( inputField ) => ( inputField . value = \"0\" )); // Initialize Asgn & Total Points to 0.00 document . querySelectorAll ( `input:read-only` ). forEach (( inputField ) => ( inputField . value = \"0.00\" )); } window . onload = clearTable ();","title":"Step 3: Generating Total Points"},{"location":"archive/202204/lab07B/#step-4-generating-average-points","text":"Finally, we get to calculating the average points obtained among all students for Assignment 1, Assignment 2, and accumulatively. The averages for each component are stored in asgn1_avg , asgn2_avg , and grand_avg respectively. These averages are calculated by dividing their respective totals by the number of students (i.e., NUMBER_OF_STUDENTS ). The last course of action is to display them in the input fields with id attribute values #avg1 , #avg2 , #avg_total . script.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 function calculate () { // Variables to contain total values let asgn1_total = 0 , asgn2_total = 0 , grand_total = 0 ; // We'll use a constant to referece the <table> element to try to shorten the code. const TABLE = document . querySelector ( \"table\" ); // Calculate number of rows in between top and bottom row const NUMBER_OF_STUDENTS = TABLE . rows . length - 2 ; for ( let i = 1 ; i <= NUMBER_OF_STUDENTS ; ++ i ) { /** * Check if #stu?_asgn1 and #stu?_asgn2 are empty * If empty, place in 0 values. */ if ( document . querySelector ( `#stu ${ i } _asgn1` ). value == \"\" ) { document . querySelector ( `#stu ${ i } _asgn1` ). value = \"0\" ; } if ( document . querySelector ( `#stu ${ i } _asgn2` ). value == \"\" ) { document . querySelector ( `#stu ${ i } _asgn2` ). value = \"0\" ; } // calculate the marks from total percentage let asgn1_points = parseFloat ( document . querySelector ( `#stu ${ i } _asgn1` ). value ) * 0.2 ; let asgn2_points = parseFloat ( document . querySelector ( `#stu ${ i } _asgn2` ). value ) * 0.3 ; document . querySelector ( `#stu ${ i } _asgn1_points` ). value = asgn1_points . toFixed ( 2 ); document . querySelector ( `#stu ${ i } _asgn2_points` ). value = asgn2_points . toFixed ( 2 ); // calculate total marks for given student let stu_total = parseFloat ( document . querySelector ( `#stu ${ i } _asgn1_points` ). value ) + parseFloat ( document . querySelector ( `#stu ${ i } _asgn2_points` ). value ); document . querySelector ( `#stu ${ i } _total_points` ). value = stu_total . toFixed ( 2 ); // add to respective totals asgn1_total += asgn1_points ; asgn2_total += asgn2_points ; grand_total += stu_total ; } // Note: use parseFloat() to get number with decimal places, and parseInt() to get Integer values (non-decimal) // calculate average const asgn1_avg = asgn1_total / NUMBER_OF_STUDENTS ; const asgn2_avg = asgn2_total / NUMBER_OF_STUDENTS ; const grand_avg = grand_total / NUMBER_OF_STUDENTS ; // assign average to correct input fields document . querySelector ( `#avg1` ). value = asgn1_avg . toFixed ( 2 ); document . querySelector ( `#avg2` ). value = asgn2_avg . toFixed ( 2 ); document . querySelector ( `#avg_total` ). value = grand_avg . toFixed ( 2 ); // Note: toFixed(2) sets number values to display 2 decimal places } function clearTable () { // Initialize Asgn 1 & Asgn 2 (100% each) to 0 document . querySelectorAll ( `input:not(:read-only)` ). forEach (( inputField ) => ( inputField . value = \"0\" )); // Initialize Asgn & Total Points to 0.00 document . querySelectorAll ( `input:read-only` ). forEach (( inputField ) => ( inputField . value = \"0.00\" )); } window . onload = clearTable (); This is the end - you've successfully completed the Mark Demo page.. congrats!! Hopefully, this would have given you an idea or two on how to go about the similarly structured problem in your second assignment! \ud83d\ude0a","title":"Step 4: Generating Average Points"},{"location":"archive/202204/lab08/","text":"Practical 08: Introducing PHP into Forms In this practical activity, we will be implementing an order form for Wendy's Bakery, a fictional bakery company. Right now, Wendy's HTML programmer has gotten as far as setting up an order for for the cakes Wendy sells. The order form is shown as in the figure below. This is a relatively simple order form, similar to many which you hve probably seen while surfing. The first thing Wendy would like to be able to do is to know what her customer ordered, work out the total of the customer's order, and how much sales tax is payable on the order. Part of the HTML for this is shown in Listing 1. In the form, we have set the form's action to be the name of the PHP script that will process the customer's order and also the name of the form fields. Listing 1 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 < form action = \"process-order.php\" method = \"post\" > < table > < tr > < th > Item </ th > < th > Quantity </ th > </ tr > < tr > < td > Cupcakes </ td > < td > < input type = \"text\" name = \"cupcakeqty\" size = \"3\" maxlength = \"3\" /> </ td > </ tr > < tr > < td > Puffs </ td > < td > < input type = \"text\" name = \"puffqty\" size = \"3\" maxlength = \"3\" /> </ td > </ tr > < tr > < td > Muffins </ td > < td > < input type = \"text\" name = \"muffinqty\" size = \"3\" maxlength = \"3\" /> </ td > </ tr > < tr > < td colspan = \"2\" > < input type = \"submit\" value = \"Submit Order\" /> </ td > </ tr > </ table > </ form > We'll proceed to create our PHP file surrounding this form element. Task 1: Embedding PHP in HTML To process the form, we'll need to create the script mentioned in the action attribute of the <form> tag called process-order.php . Prepare process-order.php starting off with the following HTML code: process-order.php 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 <!DOCTYPE html> < html > < head > < meta charset = \"UTF-8\" /> < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" /> < title > Wendy's Bakery - Order Form </ title > < style > . font-bold { font-weight : bold ; } th { background-color : #cccccc ; } th , td { padding : 0.5 rem 1.5 rem ; } form td { text-align : center ; } # freight-table tbody td { text-align : right ; } # order-details { margin-bottom : 1 rem ; } </ style > </ head > < body > < h1 > Wendy's Bakery </ h1 > < h2 > Order Results </ h2 > <!-- Listing 1 goes here --> </ body > </ html > Task 2: Conditional Display of Information Modify process-order.php such that it displays the following when the order form is filled and the Submit button is clicked on. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 <?php if ( $_SERVER [ 'REQUEST_METHOD' ] == 'POST' ) { // If a form with POST superglobal variable is sent, display this message echo \"<p>Order processed</p>\" ; } else { /** * NOTE: * You can break through to HTML in the middle of a PHP block, * especially if you have a lot of HTML elements to display under * set conditions. */ ?> <!-- Listing 1 goes here --> <?php } ?> Tip In place of where you immediately insert Listing 1, replace it with the given code snippet. This code snippet has a line where you insert Listing 1 in as well. Task 3: Adding Dynamic Content Modify process-order.php to display the date and time when the form was submitted. 1 2 3 4 5 6 7 8 9 10 <?php if ( $_SERVER [ 'REQUEST_METHOD' ] == 'POST' ) { // If a form with POST superglobal variable is sent, display this message echo \"<p>Order processed on \" . date ( \"F jS Y, l, H:i:s\" ) . \"</p>\" ; } else { ?> <!-- Listing 1 goes here --> <?php } ?> DateTime in PHP Read more here: PHP DateTime Task 4: Accessing Variables Within the same PHP script, add some lines to display the customer's order list. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 <?php if ( $_SERVER [ 'REQUEST_METHOD' ] == 'POST' ) { // If a form with POST superglobal variable is sent, display this message echo \"<p>Order processed on \" . date ( \"F jS Y, l, H:i:s\" ) . \"</p>\" ; ?> <p class=\"font-bold\">Your order is as follows:</p> <p> 20 cupcakes<br> 10 puffs<br> 15 muffins </p> <?php } else { ?> <!-- Listing 1 goes here --> <?php } ?> Task 5: Assigning Values to Variables On Wendy's site, we want to work out the total number of items ordered and the total amount payable. Assume the prices of each item are as follows: Cupcake = $2.50 Puff = $3.00 Muffin = $4.00 Sales Tax = 6% of the total amount Within the same script, add some lines to display the following additional output: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 <?php if ( $_SERVER [ 'REQUEST_METHOD' ] == 'POST' ) { // If a form with POST superglobal variable is sent, display this message echo \"<p>Order processed on \" . date ( \"F jS Y, l, H:i:s\" ) . \"</p>\" ; ?> <p class=\"font-bold\">Your order is as follows:</p> <p> 20 cupcakes<br> 10 puffs<br> 15 muffins </p> <p> Items Ordered: 3<br> Subtotal: $140.00<br> Total including tax: $148.40<br> </p> <?php } else { ?> <!-- Listing 1 goes here --> <?php } ?> Task 6: Making Decisions with Conditionals Modify the script such that it alerts if the customer has not ordered anything from Wendy. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 <?php if ( $_SERVER [ 'REQUEST_METHOD' ] == 'POST' ) { // If a form with POST superglobal variable is sent, display this message echo \"<p>Order processed on \" . date ( \"F jS Y, l, H:i:s\" ) . \"</p>\" ; if ( $_POST [ \"cupcakeqty\" ] === \"\" && $_POST [ \"puffqty\" ] === \"\" && $_POST [ \"muffinqty\" ] === \"\" ) : // Display message if nothing has been ordered ?> <p>You did not order anything from the previous page!</p> <?php else : ?> <p class=\"font-bold\">Your order is as follows:</p> <p> 20 cupcakes<br> 10 puffs<br> 15 muffins </p> <p> Items Ordered: 3<br> Subtotal: $140.00<br> Total including tax: $148.40<br> </p> <?php endif ; } else { ?> <!-- Listing 1 goes here --> <?php } ?> Otherwise, the script should display the items the customer ordered from Wendy. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 <?php if ( $_SERVER [ 'REQUEST_METHOD' ] == 'POST' ) { // If a form with POST superglobal variable is sent, display this message echo \"<p>Order processed on \" . date ( \"F jS Y, l, H:i:s\" ) . \"</p>\" ; if ( $_POST [ \"cupcakeqty\" ] === \"\" && $_POST [ \"puffqty\" ] === \"\" && $_POST [ \"muffinqty\" ] === \"\" ) : // Display message if nothing has been ordered ?> <p>You did not order anything from the previous page!</p> <?php else : $qty = array (); if ( $_POST [ \"cupcakeqty\" ] !== \"\" ) $qty [ \"cupcake\" ] = ( int )( $_POST [ \"cupcakeqty\" ]); // cupcake quantity if ( $_POST [ \"puffqty\" ] !== \"\" ) $qty [ \"puff\" ] = ( int )( $_POST [ \"puffqty\" ]); // puff quantity if ( $_POST [ \"muffinqty\" ] !== \"\" ) $qty [ \"muffin\" ] = ( int )( $_POST [ \"muffinqty\" ]); // muffin quantity ?> <p class=\"font-bold\">Your order is as follows:</p> <p> <? = $qty [ \"cupcake\" ]; ?> cupcakes<br> <? = $qty [ \"puff\" ]; ?> puffs<br> <? = $qty [ \"muffin\" ]; ?> muffins </p> <p> Items Ordered: <? = sizeof ( $qty ); ?> <?php $price = [ \"cupcake\" => 2.50 , \"puff\" => 3 , \"muffin\" => 4 ]; $subtotal = $qty [ \"cupcake\" ] * $price [ \"cupcake\" ] + $qty [ \"puff\" ] * $price [ \"puff\" ] + $qty [ \"muffin\" ] * $price [ \"muffin\" ]; $total = $subtotal * 1.06 ; ?> Subtotal: $ <? = number_format ( $subtotal , 2 ); ?> <br> Total including tax: $ <? = number_format ( $total , 2 ); ?> <br> </p> <?php endif ; } else { ?> <!-- Listing 1 goes here --> <?php } ?> Note You may have noticed that there are some errors when you only fill up the form partially (to make it such that you only want some of the items, not all). Try to find a way to circumvent this issue (i.e., by placing an if statement, modifying the form input element, etc.). See if you can find any loopholes in the web application at this point and look to see if you can fix them as much as possible. Task 7: elseif Statements Wendy provides discounts for large orders of cupcakes. Less than 10 cupcakes: no discount 10-49 cupcakes: 5% discount 50-99 cupcakes: 10% discount \u2265100 cupcakes: 20% discount Modify process-order.php such that it calculates the discount using conditions and if-else and elseif statements. Task 8: switch Statements Wendy wants to know what forms of advertising are working for her. Insert a <select> element to the form to retrieve that information. < tr > < td colspan = \"2\" > < p >< label for = \"find\" > How did you find Wendy's? </ label ></ p > < select name = \"find\" id = \"find\" > < option disabled selected > Select option </ option > < option value = \"a\" > I am a regular customer. </ option > < option value = \"b\" > TV Advertising </ option > < option value = \"c\" > Phone Directory </ option > < option value = \"d\" > Word of Mouth </ option > </ select > </ td > </ tr > Use the appropriate selection statements to handle the variables and display the information in process-order.php . Task 9: Iteration and Repeating Actions Wendy wants a table displaying the freight cost that is to be added to the customer's order. With the courier Wendy's uses, the cost of freight depends on the distance the parcel is being shipped. We want our freight table to resemble the following: Generate the same freight table using loop structures. <table id=\"freight-table\"> <thead> <tr> <th>Distance</th> <th>Cost</th> </tr> </thead> <tbody> <?php $freight = [ [ \"distance\" => 50 , \"cost\" => 5 ], [ \"distance\" => 100 , \"cost\" => 10 ], [ \"distance\" => 150 , \"cost\" => 15 ], [ \"distance\" => 200 , \"cost\" => 20 ], [ \"distance\" => 250 , \"cost\" => 25 ], ]; // var_dump($freight); foreach ( $freight as $f ) { ?> <tr> <td> <? = $f [ \"distance\" ]; ?> </td> <td> <? = $f [ \"cost\" ]; ?> </td> </tr> <?php } ?> </tbody> </table>","title":"Practical 08: Introducing PHP into Forms"},{"location":"archive/202204/lab08/#practical-08-introducing-php-into-forms","text":"In this practical activity, we will be implementing an order form for Wendy's Bakery, a fictional bakery company. Right now, Wendy's HTML programmer has gotten as far as setting up an order for for the cakes Wendy sells. The order form is shown as in the figure below. This is a relatively simple order form, similar to many which you hve probably seen while surfing. The first thing Wendy would like to be able to do is to know what her customer ordered, work out the total of the customer's order, and how much sales tax is payable on the order. Part of the HTML for this is shown in Listing 1. In the form, we have set the form's action to be the name of the PHP script that will process the customer's order and also the name of the form fields.","title":"Practical 08: Introducing PHP into Forms"},{"location":"archive/202204/lab08/#listing-1","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 < form action = \"process-order.php\" method = \"post\" > < table > < tr > < th > Item </ th > < th > Quantity </ th > </ tr > < tr > < td > Cupcakes </ td > < td > < input type = \"text\" name = \"cupcakeqty\" size = \"3\" maxlength = \"3\" /> </ td > </ tr > < tr > < td > Puffs </ td > < td > < input type = \"text\" name = \"puffqty\" size = \"3\" maxlength = \"3\" /> </ td > </ tr > < tr > < td > Muffins </ td > < td > < input type = \"text\" name = \"muffinqty\" size = \"3\" maxlength = \"3\" /> </ td > </ tr > < tr > < td colspan = \"2\" > < input type = \"submit\" value = \"Submit Order\" /> </ td > </ tr > </ table > </ form > We'll proceed to create our PHP file surrounding this form element.","title":"Listing 1"},{"location":"archive/202204/lab08/#task-1-embedding-php-in-html","text":"To process the form, we'll need to create the script mentioned in the action attribute of the <form> tag called process-order.php . Prepare process-order.php starting off with the following HTML code: process-order.php 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 <!DOCTYPE html> < html > < head > < meta charset = \"UTF-8\" /> < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" /> < title > Wendy's Bakery - Order Form </ title > < style > . font-bold { font-weight : bold ; } th { background-color : #cccccc ; } th , td { padding : 0.5 rem 1.5 rem ; } form td { text-align : center ; } # freight-table tbody td { text-align : right ; } # order-details { margin-bottom : 1 rem ; } </ style > </ head > < body > < h1 > Wendy's Bakery </ h1 > < h2 > Order Results </ h2 > <!-- Listing 1 goes here --> </ body > </ html >","title":"Task 1: Embedding PHP in HTML"},{"location":"archive/202204/lab08/#task-2-conditional-display-of-information","text":"Modify process-order.php such that it displays the following when the order form is filled and the Submit button is clicked on. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 <?php if ( $_SERVER [ 'REQUEST_METHOD' ] == 'POST' ) { // If a form with POST superglobal variable is sent, display this message echo \"<p>Order processed</p>\" ; } else { /** * NOTE: * You can break through to HTML in the middle of a PHP block, * especially if you have a lot of HTML elements to display under * set conditions. */ ?> <!-- Listing 1 goes here --> <?php } ?> Tip In place of where you immediately insert Listing 1, replace it with the given code snippet. This code snippet has a line where you insert Listing 1 in as well.","title":"Task 2: Conditional Display of Information"},{"location":"archive/202204/lab08/#task-3-adding-dynamic-content","text":"Modify process-order.php to display the date and time when the form was submitted. 1 2 3 4 5 6 7 8 9 10 <?php if ( $_SERVER [ 'REQUEST_METHOD' ] == 'POST' ) { // If a form with POST superglobal variable is sent, display this message echo \"<p>Order processed on \" . date ( \"F jS Y, l, H:i:s\" ) . \"</p>\" ; } else { ?> <!-- Listing 1 goes here --> <?php } ?> DateTime in PHP Read more here: PHP DateTime","title":"Task 3: Adding Dynamic Content"},{"location":"archive/202204/lab08/#task-4-accessing-variables","text":"Within the same PHP script, add some lines to display the customer's order list. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 <?php if ( $_SERVER [ 'REQUEST_METHOD' ] == 'POST' ) { // If a form with POST superglobal variable is sent, display this message echo \"<p>Order processed on \" . date ( \"F jS Y, l, H:i:s\" ) . \"</p>\" ; ?> <p class=\"font-bold\">Your order is as follows:</p> <p> 20 cupcakes<br> 10 puffs<br> 15 muffins </p> <?php } else { ?> <!-- Listing 1 goes here --> <?php } ?>","title":"Task 4: Accessing Variables"},{"location":"archive/202204/lab08/#task-5-assigning-values-to-variables","text":"On Wendy's site, we want to work out the total number of items ordered and the total amount payable. Assume the prices of each item are as follows: Cupcake = $2.50 Puff = $3.00 Muffin = $4.00 Sales Tax = 6% of the total amount Within the same script, add some lines to display the following additional output: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 <?php if ( $_SERVER [ 'REQUEST_METHOD' ] == 'POST' ) { // If a form with POST superglobal variable is sent, display this message echo \"<p>Order processed on \" . date ( \"F jS Y, l, H:i:s\" ) . \"</p>\" ; ?> <p class=\"font-bold\">Your order is as follows:</p> <p> 20 cupcakes<br> 10 puffs<br> 15 muffins </p> <p> Items Ordered: 3<br> Subtotal: $140.00<br> Total including tax: $148.40<br> </p> <?php } else { ?> <!-- Listing 1 goes here --> <?php } ?>","title":"Task 5: Assigning Values to Variables"},{"location":"archive/202204/lab08/#task-6-making-decisions-with-conditionals","text":"Modify the script such that it alerts if the customer has not ordered anything from Wendy. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 <?php if ( $_SERVER [ 'REQUEST_METHOD' ] == 'POST' ) { // If a form with POST superglobal variable is sent, display this message echo \"<p>Order processed on \" . date ( \"F jS Y, l, H:i:s\" ) . \"</p>\" ; if ( $_POST [ \"cupcakeqty\" ] === \"\" && $_POST [ \"puffqty\" ] === \"\" && $_POST [ \"muffinqty\" ] === \"\" ) : // Display message if nothing has been ordered ?> <p>You did not order anything from the previous page!</p> <?php else : ?> <p class=\"font-bold\">Your order is as follows:</p> <p> 20 cupcakes<br> 10 puffs<br> 15 muffins </p> <p> Items Ordered: 3<br> Subtotal: $140.00<br> Total including tax: $148.40<br> </p> <?php endif ; } else { ?> <!-- Listing 1 goes here --> <?php } ?> Otherwise, the script should display the items the customer ordered from Wendy. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 <?php if ( $_SERVER [ 'REQUEST_METHOD' ] == 'POST' ) { // If a form with POST superglobal variable is sent, display this message echo \"<p>Order processed on \" . date ( \"F jS Y, l, H:i:s\" ) . \"</p>\" ; if ( $_POST [ \"cupcakeqty\" ] === \"\" && $_POST [ \"puffqty\" ] === \"\" && $_POST [ \"muffinqty\" ] === \"\" ) : // Display message if nothing has been ordered ?> <p>You did not order anything from the previous page!</p> <?php else : $qty = array (); if ( $_POST [ \"cupcakeqty\" ] !== \"\" ) $qty [ \"cupcake\" ] = ( int )( $_POST [ \"cupcakeqty\" ]); // cupcake quantity if ( $_POST [ \"puffqty\" ] !== \"\" ) $qty [ \"puff\" ] = ( int )( $_POST [ \"puffqty\" ]); // puff quantity if ( $_POST [ \"muffinqty\" ] !== \"\" ) $qty [ \"muffin\" ] = ( int )( $_POST [ \"muffinqty\" ]); // muffin quantity ?> <p class=\"font-bold\">Your order is as follows:</p> <p> <? = $qty [ \"cupcake\" ]; ?> cupcakes<br> <? = $qty [ \"puff\" ]; ?> puffs<br> <? = $qty [ \"muffin\" ]; ?> muffins </p> <p> Items Ordered: <? = sizeof ( $qty ); ?> <?php $price = [ \"cupcake\" => 2.50 , \"puff\" => 3 , \"muffin\" => 4 ]; $subtotal = $qty [ \"cupcake\" ] * $price [ \"cupcake\" ] + $qty [ \"puff\" ] * $price [ \"puff\" ] + $qty [ \"muffin\" ] * $price [ \"muffin\" ]; $total = $subtotal * 1.06 ; ?> Subtotal: $ <? = number_format ( $subtotal , 2 ); ?> <br> Total including tax: $ <? = number_format ( $total , 2 ); ?> <br> </p> <?php endif ; } else { ?> <!-- Listing 1 goes here --> <?php } ?> Note You may have noticed that there are some errors when you only fill up the form partially (to make it such that you only want some of the items, not all). Try to find a way to circumvent this issue (i.e., by placing an if statement, modifying the form input element, etc.). See if you can find any loopholes in the web application at this point and look to see if you can fix them as much as possible.","title":"Task 6: Making Decisions with Conditionals"},{"location":"archive/202204/lab08/#task-7-elseif-statements","text":"Wendy provides discounts for large orders of cupcakes. Less than 10 cupcakes: no discount 10-49 cupcakes: 5% discount 50-99 cupcakes: 10% discount \u2265100 cupcakes: 20% discount Modify process-order.php such that it calculates the discount using conditions and if-else and elseif statements.","title":"Task 7: elseif Statements"},{"location":"archive/202204/lab08/#task-8-switch-statements","text":"Wendy wants to know what forms of advertising are working for her. Insert a <select> element to the form to retrieve that information. < tr > < td colspan = \"2\" > < p >< label for = \"find\" > How did you find Wendy's? </ label ></ p > < select name = \"find\" id = \"find\" > < option disabled selected > Select option </ option > < option value = \"a\" > I am a regular customer. </ option > < option value = \"b\" > TV Advertising </ option > < option value = \"c\" > Phone Directory </ option > < option value = \"d\" > Word of Mouth </ option > </ select > </ td > </ tr > Use the appropriate selection statements to handle the variables and display the information in process-order.php .","title":"Task 8: switch Statements"},{"location":"archive/202204/lab08/#task-9-iteration-and-repeating-actions","text":"Wendy wants a table displaying the freight cost that is to be added to the customer's order. With the courier Wendy's uses, the cost of freight depends on the distance the parcel is being shipped. We want our freight table to resemble the following: Generate the same freight table using loop structures. <table id=\"freight-table\"> <thead> <tr> <th>Distance</th> <th>Cost</th> </tr> </thead> <tbody> <?php $freight = [ [ \"distance\" => 50 , \"cost\" => 5 ], [ \"distance\" => 100 , \"cost\" => 10 ], [ \"distance\" => 150 , \"cost\" => 15 ], [ \"distance\" => 200 , \"cost\" => 20 ], [ \"distance\" => 250 , \"cost\" => 25 ], ]; // var_dump($freight); foreach ( $freight as $f ) { ?> <tr> <td> <? = $f [ \"distance\" ]; ?> </td> <td> <? = $f [ \"cost\" ]; ?> </td> </tr> <?php } ?> </tbody> </table>","title":"Task 9: Iteration and Repeating Actions"},{"location":"archive/202204/lab09/","text":"Practical 09: PHP Forms and Sessions In this practical activity, we will be creating a dummy login system that utilizes sessions. This will not utilize database connectivity just yet, but you should be able to piece them together once the lessons on those start next week. Preparation CSS and JS files are to be kept in their own separate subfolders. css/style.css 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 @ import url ( \"https://fonts.googleapis.com/css2?family=Open+Sans:ital,wght@0,300;0,400;0,500;0,600;0,700;0,800;1,300;1,400;1,500;1,600;1,700;1,800&display=swap\" ) ; : root { --form-size : 400 px ; --normal-text-size : 20 px ; } * { font-family : \"Open Sans\" , sans-serif ; } body { background-color : beige ; } button , input { border : none ; font-size : var ( --normal-text-size ); margin : 1 rem 0 ; } # container { background-color : bisque ; border : 2 px dashed orangered ; border-radius : 2 rem ; margin : 10 rem auto 0 ; max-width : 750 px ; min-width : var ( --form-size ); padding : 2 rem ; text-align : center ; } p # error { color : red ; font-size : var ( --normal-text-size ); } input # username , input [ type = \"password\" ] { border-radius : 0.5 rem ; max-width : 100 % ; min-width : var ( --form-size ); padding : 0.5 rem ; text-align : center ; width : 75 % ; } button # logout , input [ type = \"submit\" ], input [ type = \"reset\" ] { border-radius : 2 rem ; padding : 0.5 rem 1 rem ; } input # username : hover , input [ type = \"password\" ] : hover { box-shadow : 0 0 1 rem orange , 0 0 2 rem lightsalmon ; } input # username : focus , input [ type = \"password\" ] : focus , input [ type = \"button\" ] : hover , input [ type = \"submit\" ] : hover , input [ type = \"reset\" ] : hover { box-shadow : 0 0 1 rem orange , 0 0 2 rem lightsalmon , 0 0 4 rem darkorange ; } button # logout : hover { background-color : rgba ( 220 , 20 , 60 , 0.75 ); box-shadow : 0 0 1 rem red , 0 0 2 rem lightcoral , 0 0 4 rem maroon ; color : white ; font-weight : bold ; } js/index.js if ( document . querySelector ( \"#logout\" )) { document . querySelector ( \"#logout\" ). addEventListener ( \"click\" , () => { const response = confirm ( \"Confirm logout?\" ); if ( response ) window . location . href = \"logout.php\" ; }); } credentials.php <?php $username = \"root\" ; $pw = \"Welovepasswords123\" ; ?> index.php 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" /> < meta http-equiv = \"X-UA-Compatible\" content = \"IE=edge\" /> < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" /> < title > Login Example </ title > < link rel = \"stylesheet\" href = \"css/style.css\" /> </ head > < body > < section id = \"container\" > < h1 > Login Page </ h1 > < form action = \".\" method = \"post\" autocomplete = \"off\" > < p id = \"error\" ></ p > < input type = \"text\" name = \"username\" id = \"username\" placeholder = \"Username\" autocomplete = \"off\" />< br /> < input type = \"password\" name = \"password\" id = \"password\" placeholder = \"Password\" />< br /> < input type = \"submit\" value = \"Log In\" /> < input type = \"reset\" value = \"Reset\" /> </ form > </ section > < script src = \"js/index.js\" ></ script > </ body > </ html > Task 1: Checking Credentials Our credentials are kept in a separate file named credentials.php . We can append it to index.php by introducing the following on top: <?php require_once \"credentials.php\" ; ?> require_once is a command that appends contents of a HTML or PHP file to wherever it is called. In this case, credentials.php is appended at the beginning of the webpage. There are other variants of this command: include_once is the same as require_once , but it does not halt the other webpage items from being loaded if the file doesn't exist. include and require are different from include_once and require_once respectively in the sense of how many times they are allowed to be appended to the page. Now that we have our credentials appended at the top, we can now proceed to carry out form validation. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 <?php session_start (); require_once \"credentials.php\" ; // flag to indicate whether credentials match (i.e., false) or not (i.e., TRUE) $invalid_login = false ; if ( $_SERVER [ \"REQUEST_METHOD\" ] == \"POST\" ) { // check credentials first if ( $_POST [ \"username\" ] === $username && $_POST [ \"password\" ] === $pw ) { $_SESSION [ \"username\" ] = $_POST [ \"username\" ]; } else $invalid_login = true ; } // var_dump($_SESSION); ?> var_dump is useful if you would like to test if your credential checking is working as intended or not based on your $_POST superglobal variables. Uncomment the var_dump line if you would like to carry out this checking, but its output should not be visible in the end result. We are adding the sessions_start() line on top to introduce session variables if the credentials match. This will be worked on more in the next task, but what's important now is that we create a new session variable called $_SESSION[\"username\"] which will contain the username value entered into the form. As for when the credentials do not match, we have a flag variable named $invalid_login which indicates if the credentials match or not. We will utilize this to display a message in our p#error element in the form to alert users if the credentials do not match. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 <form action=\".\" method=\"post\" autocomplete=\"off\"> <p id=\"error\"> <?php if ( $invalid_login ) : ?> Invalid credentials! <?php endif ; ?> </p> <input type=\"text\" name=\"username\" id=\"username\" placeholder=\"Username\" autocomplete=\"off\" /><br /> <input type=\"password\" name=\"password\" id=\"password\" placeholder=\"Password\" /><br /> <input type=\"submit\" value=\"Log In\" /> <input type=\"reset\" value=\"Reset\" /> </form> The if statement syntax used here is different from that of most languages, but it works especially if you plan on printing large and/or complex lines of HTML. Your page should now display a paragraph containing the alert message like as follows: Now, let's replace the contents inside section#container to display something else if the credentials are correct (and consequently giving the illusion that you're logged in). We will carry this out through utilizing an if-else statement. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 <section id=\"container\"> <?php if ( isset ( $_SESSION [ \"username\" ])) : ?> <h1>Hello, <? = $_SESSION [ \"username\" ]; ?> !</h1> <p id=\"time\"></p> <button id=\"logout\">Log Out</button> <?php else : ?> <h1>Login Page</h1> <form action=\".\" method=\"post\" autocomplete=\"off\"> <p id=\"error\"> <?php if ( $invalid_login ) : ?> Invalid credentials! <?php endif ; ?> </p> <input type=\"text\" name=\"username\" id=\"username\" placeholder=\"Username\" autocomplete=\"off\"><br> <input type=\"password\" name=\"password\" id=\"password\" placeholder=\"Password\"><br> <input type=\"submit\" value=\"Log In\"> <input type=\"reset\" value=\"Reset\"> </form> <?php endif ; ?> </section> Depending on whether $_SESSION[\"username\"] has been defined or not, either the form or the following gets displayed: Here, when the user is \"logged in\", we now have a greeting on display with the entered username. At the bottom of that greeting line, we also have a log out button. Task 2: Implementing Logout Feature Session variables get carried across multiple webpages, so long as they have the line session_start() on top of the page - this is compulsory. In the end, however, all good things have to come to an end - this also includes logged-in sessions. The logout button included has an onclick attribute which redirects the browser to another page called logout.php . logout.php will contain a simple script to log a user out. The contents of this script are as follows: <?php session_start (); session_unset (); session_destroy (); header ( \"Location: .\" ); ?> The simple logout process works in 3 steps: Start the session with session_start() . Unset all session variables with session_unset() . Destroy the session using session_destroy() . One main reason why session_destroy() does not settle everything without session_unset() is that it only destroys the session, but any session data is still kept around. Think of it as a job not completely done properly in such case. The fourth line (i.e., header(\"Location: .\"); ) redirects the user immediately back to index.php . This can also be achieved if you were to type in header(\"Location: index.php\"); . Using a period punctuation here points to the current directory, and browsers will automatically search for any file named index.php or index.html by default. With this, you will find that you will immediately be sent back to index.php without viewing anything in logout.php .. not that it contains any visual content to be displayed in the browser to begin with. Extra Task: Timeout Modify the web application such that it will log you out upon refreshing the page after 5 minutes of inactivity.","title":"Practical 09: PHP Forms and Sessions"},{"location":"archive/202204/lab09/#practical-09-php-forms-and-sessions","text":"In this practical activity, we will be creating a dummy login system that utilizes sessions. This will not utilize database connectivity just yet, but you should be able to piece them together once the lessons on those start next week.","title":"Practical 09: PHP Forms and Sessions"},{"location":"archive/202204/lab09/#preparation","text":"CSS and JS files are to be kept in their own separate subfolders. css/style.css 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 @ import url ( \"https://fonts.googleapis.com/css2?family=Open+Sans:ital,wght@0,300;0,400;0,500;0,600;0,700;0,800;1,300;1,400;1,500;1,600;1,700;1,800&display=swap\" ) ; : root { --form-size : 400 px ; --normal-text-size : 20 px ; } * { font-family : \"Open Sans\" , sans-serif ; } body { background-color : beige ; } button , input { border : none ; font-size : var ( --normal-text-size ); margin : 1 rem 0 ; } # container { background-color : bisque ; border : 2 px dashed orangered ; border-radius : 2 rem ; margin : 10 rem auto 0 ; max-width : 750 px ; min-width : var ( --form-size ); padding : 2 rem ; text-align : center ; } p # error { color : red ; font-size : var ( --normal-text-size ); } input # username , input [ type = \"password\" ] { border-radius : 0.5 rem ; max-width : 100 % ; min-width : var ( --form-size ); padding : 0.5 rem ; text-align : center ; width : 75 % ; } button # logout , input [ type = \"submit\" ], input [ type = \"reset\" ] { border-radius : 2 rem ; padding : 0.5 rem 1 rem ; } input # username : hover , input [ type = \"password\" ] : hover { box-shadow : 0 0 1 rem orange , 0 0 2 rem lightsalmon ; } input # username : focus , input [ type = \"password\" ] : focus , input [ type = \"button\" ] : hover , input [ type = \"submit\" ] : hover , input [ type = \"reset\" ] : hover { box-shadow : 0 0 1 rem orange , 0 0 2 rem lightsalmon , 0 0 4 rem darkorange ; } button # logout : hover { background-color : rgba ( 220 , 20 , 60 , 0.75 ); box-shadow : 0 0 1 rem red , 0 0 2 rem lightcoral , 0 0 4 rem maroon ; color : white ; font-weight : bold ; } js/index.js if ( document . querySelector ( \"#logout\" )) { document . querySelector ( \"#logout\" ). addEventListener ( \"click\" , () => { const response = confirm ( \"Confirm logout?\" ); if ( response ) window . location . href = \"logout.php\" ; }); } credentials.php <?php $username = \"root\" ; $pw = \"Welovepasswords123\" ; ?> index.php 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" /> < meta http-equiv = \"X-UA-Compatible\" content = \"IE=edge\" /> < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" /> < title > Login Example </ title > < link rel = \"stylesheet\" href = \"css/style.css\" /> </ head > < body > < section id = \"container\" > < h1 > Login Page </ h1 > < form action = \".\" method = \"post\" autocomplete = \"off\" > < p id = \"error\" ></ p > < input type = \"text\" name = \"username\" id = \"username\" placeholder = \"Username\" autocomplete = \"off\" />< br /> < input type = \"password\" name = \"password\" id = \"password\" placeholder = \"Password\" />< br /> < input type = \"submit\" value = \"Log In\" /> < input type = \"reset\" value = \"Reset\" /> </ form > </ section > < script src = \"js/index.js\" ></ script > </ body > </ html >","title":"Preparation"},{"location":"archive/202204/lab09/#task-1-checking-credentials","text":"Our credentials are kept in a separate file named credentials.php . We can append it to index.php by introducing the following on top: <?php require_once \"credentials.php\" ; ?> require_once is a command that appends contents of a HTML or PHP file to wherever it is called. In this case, credentials.php is appended at the beginning of the webpage. There are other variants of this command: include_once is the same as require_once , but it does not halt the other webpage items from being loaded if the file doesn't exist. include and require are different from include_once and require_once respectively in the sense of how many times they are allowed to be appended to the page. Now that we have our credentials appended at the top, we can now proceed to carry out form validation. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 <?php session_start (); require_once \"credentials.php\" ; // flag to indicate whether credentials match (i.e., false) or not (i.e., TRUE) $invalid_login = false ; if ( $_SERVER [ \"REQUEST_METHOD\" ] == \"POST\" ) { // check credentials first if ( $_POST [ \"username\" ] === $username && $_POST [ \"password\" ] === $pw ) { $_SESSION [ \"username\" ] = $_POST [ \"username\" ]; } else $invalid_login = true ; } // var_dump($_SESSION); ?> var_dump is useful if you would like to test if your credential checking is working as intended or not based on your $_POST superglobal variables. Uncomment the var_dump line if you would like to carry out this checking, but its output should not be visible in the end result. We are adding the sessions_start() line on top to introduce session variables if the credentials match. This will be worked on more in the next task, but what's important now is that we create a new session variable called $_SESSION[\"username\"] which will contain the username value entered into the form. As for when the credentials do not match, we have a flag variable named $invalid_login which indicates if the credentials match or not. We will utilize this to display a message in our p#error element in the form to alert users if the credentials do not match. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 <form action=\".\" method=\"post\" autocomplete=\"off\"> <p id=\"error\"> <?php if ( $invalid_login ) : ?> Invalid credentials! <?php endif ; ?> </p> <input type=\"text\" name=\"username\" id=\"username\" placeholder=\"Username\" autocomplete=\"off\" /><br /> <input type=\"password\" name=\"password\" id=\"password\" placeholder=\"Password\" /><br /> <input type=\"submit\" value=\"Log In\" /> <input type=\"reset\" value=\"Reset\" /> </form> The if statement syntax used here is different from that of most languages, but it works especially if you plan on printing large and/or complex lines of HTML. Your page should now display a paragraph containing the alert message like as follows: Now, let's replace the contents inside section#container to display something else if the credentials are correct (and consequently giving the illusion that you're logged in). We will carry this out through utilizing an if-else statement. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 <section id=\"container\"> <?php if ( isset ( $_SESSION [ \"username\" ])) : ?> <h1>Hello, <? = $_SESSION [ \"username\" ]; ?> !</h1> <p id=\"time\"></p> <button id=\"logout\">Log Out</button> <?php else : ?> <h1>Login Page</h1> <form action=\".\" method=\"post\" autocomplete=\"off\"> <p id=\"error\"> <?php if ( $invalid_login ) : ?> Invalid credentials! <?php endif ; ?> </p> <input type=\"text\" name=\"username\" id=\"username\" placeholder=\"Username\" autocomplete=\"off\"><br> <input type=\"password\" name=\"password\" id=\"password\" placeholder=\"Password\"><br> <input type=\"submit\" value=\"Log In\"> <input type=\"reset\" value=\"Reset\"> </form> <?php endif ; ?> </section> Depending on whether $_SESSION[\"username\"] has been defined or not, either the form or the following gets displayed: Here, when the user is \"logged in\", we now have a greeting on display with the entered username. At the bottom of that greeting line, we also have a log out button.","title":"Task 1: Checking Credentials"},{"location":"archive/202204/lab09/#task-2-implementing-logout-feature","text":"Session variables get carried across multiple webpages, so long as they have the line session_start() on top of the page - this is compulsory. In the end, however, all good things have to come to an end - this also includes logged-in sessions. The logout button included has an onclick attribute which redirects the browser to another page called logout.php . logout.php will contain a simple script to log a user out. The contents of this script are as follows: <?php session_start (); session_unset (); session_destroy (); header ( \"Location: .\" ); ?> The simple logout process works in 3 steps: Start the session with session_start() . Unset all session variables with session_unset() . Destroy the session using session_destroy() . One main reason why session_destroy() does not settle everything without session_unset() is that it only destroys the session, but any session data is still kept around. Think of it as a job not completely done properly in such case. The fourth line (i.e., header(\"Location: .\"); ) redirects the user immediately back to index.php . This can also be achieved if you were to type in header(\"Location: index.php\"); . Using a period punctuation here points to the current directory, and browsers will automatically search for any file named index.php or index.html by default. With this, you will find that you will immediately be sent back to index.php without viewing anything in logout.php .. not that it contains any visual content to be displayed in the browser to begin with.","title":"Task 2: Implementing Logout Feature"},{"location":"archive/202204/lab09/#extra-task-timeout","text":"Modify the web application such that it will log you out upon refreshing the page after 5 minutes of inactivity.","title":"Extra Task: Timeout"},{"location":"archive/202204/lab10/","text":"Practical 10: Understanding MySQL Commands We will go through a small series of exercises to create tables in a MySQL/MariaDB database. For the purpose of this exercise, we will carry out everything in phpMyAdmin, but the SQL scripts can be run on a typical MySQL console. To access phpMyAdmin, type in localhost/phpmyadmin in your web browser's address bar. NOTE For those who installed each component of the LAMP stack individually including the MySQL database, ensure you remember your root user password. Starting Out in phpMyAdmin On the top menu bar, select \"SQL\". You should see an interface like as follows: This will be where we will be typing in our SQL scripts for today's practical exercise. Creating a New Database The basic syntax to create a new database is as follows: CREATE DATABASE < database_name > ; Let's create a database named exercise_db . We will create the database by entering the following script: CREATE DATABASE IF NOT EXISTS ` exercise_db ` ; Note that throughout my demo, I will be using backticks (`) to surround any names given to the database, tables and columns. This is completely optional. Upon running this command, you can only run it once as you can only create a database with a stated name if it already does not exist. The IF NOT EXISTS clause will make it such that the statement can be run multiple times instead of spititng out an error each time, but it also does nothing as a result. Select the \"Go\" button to execute the SQL statement, and a message from the database server should be displayed like as shown below: By now, the database should now be available to use - the database name should appear on the left hand side of the window. DROP DATABASES The opposite act of creating a database is referred as dropping a database. If you wish to drop the database, you have to use the following command script: DROP DATABASE IF EXISTS ` exercise_db ` ; The IF EXISTS clause works the same way as how the IF NOT EXISTS clause works for the CREATE TABLE statement - you can only drop a database if it actually exists in the database server. The general syntax for dropping a database is as follows: DROP DATABASE < database_name > ; Create a Table Right now, the database does not have any tables inside of it. Let's create a new table called Student that has the following columns: id: INT, AUTO_INCREMENT, NOT NULL, Primary Key first_name: VARCHAR(50), NOT NULL last_name: VARCHAR(50), NOT NULL age: INT(3), NOT NULL email: VARCHAR(255) active: BOOL, NOT NULL, DEFAULT is TRUE(1) Note: INT : integer value (default size 7); VARCHAR(50) : max 50 alphanumeric characters, BOOLEAN : boolean value We set id as our PRIMARY KEY of the table - this is a unique column which distinguishes each record/row from each other. AUTO_INCREMENT is often used with primary key columns so that they need not be defined when entering records. NOT NULL constraint makes a column unable to be empty in any record. The script to create this table is as follows. CREATE TABLE IF NOT EXISTS ` Student ` ( ` id ` INT NOT NULL AUTO_INCREMENT , ` first_name ` VARCHAR ( 50 ) NOT NULL , ` last_name ` VARCHAR ( 50 ) NOT NULL , ` age ` INT ( 3 ) NOT NULL , ` email ` VARCHAR ( 255 ), ` active ` BOOLEAN NOT NULL DEFAULT TRUE , PRIMARY KEY ( ` id ` ) ); You can view the database table contents by selecting the table name from the left-hand side menu in the browser window. Multiple Tables in Databases Yes, you are allowed to have multiple tables in your database (unless it's a SQLite database). In fact, there are mechanisms to simplify tables so that they don't require so many columns (i.e., normalization) and/or so that tables are linked together with foreign keys . We will not cover them in this module, but feel free to look up on how they work if you are curious! Dropping Tables Just like dropping databases, you can also drop a table if you want to recreate the table from scratch. DROP TABLE IF EXISTS ` Student ` ; Populating the Database Table Let's populate the table with some data. The following command script adds in one record of data in the database. INSERT INTO ` Student ` ( ` first_name ` , ` last_name ` , ` age ` , ` email ` , ` active ` ) VALUES ( \"Adam\" , \"Burns\" , 18 , \"adam_burns@gmail.com\" , 1 ); After running the given command, you should see the table being populated like as follows: Take note that with id being set to AUTO_INCREMENT , there's no need to specify the id value when adding new records (it will automatically start from 1 by default). However, you are still allowed to put in a custom id value if you so desire. Also, note that the active value is set to TRUE or 1 by default. In this case, you can shorten your SQL command to be like as follows and it should give the same result: INSERT INTO ` Student ` ( ` first_name ` , ` last_name ` , ` age ` , ` email ` ) VALUES ( \"Adam\" , \"Burns\" , 18 , \"adam_burns@gmail.com\" ); Task Populate the table with more records: id first_name last_name age email active 2 Karen Allen 19 karen_allen@outlook.com 1 3 Mark Weiss 24 hello@mweiss.com 0 4 Tyson Russell 16 ask@tyson.com 1 Updating Records in a Table Let's update Mark's record to say that he is now no longer inactive (i.e., active = 1). UPDATE ` Student ` SET ` active ` = 1 WHERE ` id ` = 3 ; Mark's record is indicated with id 3. As mentioned prior, we can make utilize this column to uniquely identify one record from the others. However, this is not restricted to just primary keys or unique columns like id . When feasible, one may also utilize other columns that are not unique to easily modify multiple records at once. Also, you can also have multiple conditions in your SQL script to further specify those columns to consider as well. The table contents should now look like the following: Task Run SQL commands to make the following changes: Adam has recently changed his e-mail to adam@burnings.com . Tyson is no longer an active student. Karen's age is to be updated to 20 instead of 19. Selecting Records from a Table By now, you should see the given SQL command script appear upon selecting the table in phpMyAdmin: SELECT * FROM ` Student ` ; * is representative of \"ALL\". The above syntax simply means to select all available records in Student . You can specify which records/rows to select by adding conditions. The following example will select the row(s) where the id value is equal to 2: SELECT * FROM ` Student ` WHERE ` id ` = 2 ; You can also make comparison conditions too when selecting columns. The following example will select only the first and last names of the row(s) where the age is greater than 21: SELECT ` first_name ` , ` last_name ` FROM ` Student ` WHERE ` age ` > 21 ; Task Populate the Student table with 4 more records. Select all students whose age is not greater than 20. Select all active students, displaying only the first_name , last_name , and email . Deleting Records from a Table Deleting records works the same as updating and selecting records - you can utilize IDs as indicators of which record(s) to delete. For example, if we want to delete Tyson's record, we can use the following command script: DELETE FROM ` Student ` WHERE ` id ` = 4 ; # Tyson ' s record id value is 4 The same rules for selecting which type of records based on what column(s) to update also apply to what column(s) to delete. Note about id Progression Now that we've deleted Tyson's record, if you are to add another record after, the id will not reassume as 4, but will continue after the number of the last record instead. Previously occupied id values that were used and deleted will not be used under AUTO_INCREMENT , but can be added manually if not occupied.","title":"Practical 10: Understanding MySQL Commands"},{"location":"archive/202204/lab10/#practical-10-understanding-mysql-commands","text":"We will go through a small series of exercises to create tables in a MySQL/MariaDB database. For the purpose of this exercise, we will carry out everything in phpMyAdmin, but the SQL scripts can be run on a typical MySQL console. To access phpMyAdmin, type in localhost/phpmyadmin in your web browser's address bar. NOTE For those who installed each component of the LAMP stack individually including the MySQL database, ensure you remember your root user password.","title":"Practical 10: Understanding MySQL Commands"},{"location":"archive/202204/lab10/#starting-out-in-phpmyadmin","text":"On the top menu bar, select \"SQL\". You should see an interface like as follows: This will be where we will be typing in our SQL scripts for today's practical exercise.","title":"Starting Out in phpMyAdmin"},{"location":"archive/202204/lab10/#creating-a-new-database","text":"The basic syntax to create a new database is as follows: CREATE DATABASE < database_name > ; Let's create a database named exercise_db . We will create the database by entering the following script: CREATE DATABASE IF NOT EXISTS ` exercise_db ` ; Note that throughout my demo, I will be using backticks (`) to surround any names given to the database, tables and columns. This is completely optional. Upon running this command, you can only run it once as you can only create a database with a stated name if it already does not exist. The IF NOT EXISTS clause will make it such that the statement can be run multiple times instead of spititng out an error each time, but it also does nothing as a result. Select the \"Go\" button to execute the SQL statement, and a message from the database server should be displayed like as shown below: By now, the database should now be available to use - the database name should appear on the left hand side of the window. DROP DATABASES The opposite act of creating a database is referred as dropping a database. If you wish to drop the database, you have to use the following command script: DROP DATABASE IF EXISTS ` exercise_db ` ; The IF EXISTS clause works the same way as how the IF NOT EXISTS clause works for the CREATE TABLE statement - you can only drop a database if it actually exists in the database server. The general syntax for dropping a database is as follows: DROP DATABASE < database_name > ;","title":"Creating a New Database"},{"location":"archive/202204/lab10/#create-a-table","text":"Right now, the database does not have any tables inside of it. Let's create a new table called Student that has the following columns: id: INT, AUTO_INCREMENT, NOT NULL, Primary Key first_name: VARCHAR(50), NOT NULL last_name: VARCHAR(50), NOT NULL age: INT(3), NOT NULL email: VARCHAR(255) active: BOOL, NOT NULL, DEFAULT is TRUE(1) Note: INT : integer value (default size 7); VARCHAR(50) : max 50 alphanumeric characters, BOOLEAN : boolean value We set id as our PRIMARY KEY of the table - this is a unique column which distinguishes each record/row from each other. AUTO_INCREMENT is often used with primary key columns so that they need not be defined when entering records. NOT NULL constraint makes a column unable to be empty in any record. The script to create this table is as follows. CREATE TABLE IF NOT EXISTS ` Student ` ( ` id ` INT NOT NULL AUTO_INCREMENT , ` first_name ` VARCHAR ( 50 ) NOT NULL , ` last_name ` VARCHAR ( 50 ) NOT NULL , ` age ` INT ( 3 ) NOT NULL , ` email ` VARCHAR ( 255 ), ` active ` BOOLEAN NOT NULL DEFAULT TRUE , PRIMARY KEY ( ` id ` ) ); You can view the database table contents by selecting the table name from the left-hand side menu in the browser window. Multiple Tables in Databases Yes, you are allowed to have multiple tables in your database (unless it's a SQLite database). In fact, there are mechanisms to simplify tables so that they don't require so many columns (i.e., normalization) and/or so that tables are linked together with foreign keys . We will not cover them in this module, but feel free to look up on how they work if you are curious! Dropping Tables Just like dropping databases, you can also drop a table if you want to recreate the table from scratch. DROP TABLE IF EXISTS ` Student ` ;","title":"Create a Table"},{"location":"archive/202204/lab10/#populating-the-database-table","text":"Let's populate the table with some data. The following command script adds in one record of data in the database. INSERT INTO ` Student ` ( ` first_name ` , ` last_name ` , ` age ` , ` email ` , ` active ` ) VALUES ( \"Adam\" , \"Burns\" , 18 , \"adam_burns@gmail.com\" , 1 ); After running the given command, you should see the table being populated like as follows: Take note that with id being set to AUTO_INCREMENT , there's no need to specify the id value when adding new records (it will automatically start from 1 by default). However, you are still allowed to put in a custom id value if you so desire. Also, note that the active value is set to TRUE or 1 by default. In this case, you can shorten your SQL command to be like as follows and it should give the same result: INSERT INTO ` Student ` ( ` first_name ` , ` last_name ` , ` age ` , ` email ` ) VALUES ( \"Adam\" , \"Burns\" , 18 , \"adam_burns@gmail.com\" );","title":"Populating the Database Table"},{"location":"archive/202204/lab10/#task","text":"Populate the table with more records: id first_name last_name age email active 2 Karen Allen 19 karen_allen@outlook.com 1 3 Mark Weiss 24 hello@mweiss.com 0 4 Tyson Russell 16 ask@tyson.com 1","title":"Task"},{"location":"archive/202204/lab10/#updating-records-in-a-table","text":"Let's update Mark's record to say that he is now no longer inactive (i.e., active = 1). UPDATE ` Student ` SET ` active ` = 1 WHERE ` id ` = 3 ; Mark's record is indicated with id 3. As mentioned prior, we can make utilize this column to uniquely identify one record from the others. However, this is not restricted to just primary keys or unique columns like id . When feasible, one may also utilize other columns that are not unique to easily modify multiple records at once. Also, you can also have multiple conditions in your SQL script to further specify those columns to consider as well. The table contents should now look like the following:","title":"Updating Records in a Table"},{"location":"archive/202204/lab10/#task_1","text":"Run SQL commands to make the following changes: Adam has recently changed his e-mail to adam@burnings.com . Tyson is no longer an active student. Karen's age is to be updated to 20 instead of 19.","title":"Task"},{"location":"archive/202204/lab10/#selecting-records-from-a-table","text":"By now, you should see the given SQL command script appear upon selecting the table in phpMyAdmin: SELECT * FROM ` Student ` ; * is representative of \"ALL\". The above syntax simply means to select all available records in Student . You can specify which records/rows to select by adding conditions. The following example will select the row(s) where the id value is equal to 2: SELECT * FROM ` Student ` WHERE ` id ` = 2 ; You can also make comparison conditions too when selecting columns. The following example will select only the first and last names of the row(s) where the age is greater than 21: SELECT ` first_name ` , ` last_name ` FROM ` Student ` WHERE ` age ` > 21 ;","title":"Selecting Records from a Table"},{"location":"archive/202204/lab10/#task_2","text":"Populate the Student table with 4 more records. Select all students whose age is not greater than 20. Select all active students, displaying only the first_name , last_name , and email .","title":"Task"},{"location":"archive/202204/lab10/#deleting-records-from-a-table","text":"Deleting records works the same as updating and selecting records - you can utilize IDs as indicators of which record(s) to delete. For example, if we want to delete Tyson's record, we can use the following command script: DELETE FROM ` Student ` WHERE ` id ` = 4 ; # Tyson ' s record id value is 4 The same rules for selecting which type of records based on what column(s) to update also apply to what column(s) to delete. Note about id Progression Now that we've deleted Tyson's record, if you are to add another record after, the id will not reassume as 4, but will continue after the number of the last record instead. Previously occupied id values that were used and deleted will not be used under AUTO_INCREMENT , but can be added manually if not occupied.","title":"Deleting Records from a Table"},{"location":"archive/202204/lab11/","text":"PHP Code-Along Series (Part 1) This practical will be the first of a 3-part series to illustrate how all the concepts taught from the previous sessions can apply into developing functional web applications. In this part of the series, we will be going through how to connect to the database server, create databases and tables, as well as manipulate data from PHP files. We will essentially be utilizing MySQL statements within PHP files in a PHP web project.","title":"PHP Code-Along Series (Part 1)"},{"location":"archive/202204/lab11/#php-code-along-series-part-1","text":"This practical will be the first of a 3-part series to illustrate how all the concepts taught from the previous sessions can apply into developing functional web applications. In this part of the series, we will be going through how to connect to the database server, create databases and tables, as well as manipulate data from PHP files. We will essentially be utilizing MySQL statements within PHP files in a PHP web project.","title":"PHP Code-Along Series (Part 1)"},{"location":"archive/202204/lab12/","text":"PHP Code-Along Series (Part 2) The second part of this series is concerned with implementing data manipulation operations from PHP files, mainly through the use of web forms. Video Prep Files DBConnection.php <?php $servername = \"localhost\" ; $username = \"root\" ; $password = \"\" ; $dbName = \"newDB\" ; $conn = new mysqli ( $servername , $username , $password , $dbName ); if ( $conn -> connect_error ) die ( \"Connection failed: \" . $conn -> connect_error ); DBCreateTable.php <?php require \"DBConnection.php\" ; $sql = \"CREATE TABLE Employee ( `id` INT NOT NULL AUTO_INCREMENT, `name` VARCHAR(100) NOT NULL, `age` INT(3) NOT NULL, `email` VARCHAR(100) NULL, PRIMARY KEY(id) );\" ; if ( $conn -> query ( $sql )) echo \"Table created successfully!\" ; else echo \"Error creating Employee table: \" . $conn -> error ; $conn -> close (); DBDropTable.php <?php require \"DBConnection.php\" ; $sql = \"DROP TABLE IF EXISTS `Employee`;\" ; if ( $conn -> query ( $sql )) echo \"Table dropped successfully!\" ; else echo \"Error dropping table: \" . $conn -> error ; $conn -> close (); form.php <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" /> < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" /> < title > Insert New Record </ title > < link rel = \"stylesheet\" href = \"style.css\" /> </ head > < body > < h1 > Insert New Record </ h1 > < div id = \"form\" > < form action = \"DBInsertRecord.php\" method = \"post\" autocomplete = \"nope\" > < label for = \"in_name\" > Name </ label > < input type = \"text\" name = \"in_name\" id = \"in_name\" placeholder = \"Name here\" autocomplete = \"off\" value = \"\" /> < label for = \"in_age\" > Age </ label > < input type = \"number\" name = \"in_age\" id = \"in_age\" placeholder = \"Age here\" autocomplete = \"off\" min = \"1\" value = \"\" /> < label for = \" in_email\" > E-mail </ label > < input type = \"email\" name = \"in_email\" id = \"in_email\" placeholder = \"E-mail here\" autocomplete = \"off\" value = \"\" /> < hr /> < br /> < input type = \"submit\" value = \"Submit\" /> < input type = \"reset\" value = \"Reset\" /> </ form > </ div > </ body > </ html > index.php <?php require \"DBConnection.php\" ; ?> <!DOCTYPE html> <html lang=\"en\"> <head> <meta charset=\"UTF-8\"> <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"> <title>PHP Code-Along 2</title> <link rel=\"stylesheet\" href=\"style.css\"> </head> <body> <h1>List of Records</h1> <div> <table> <tr> <th>ID</th> <th>Name</th> <th>Age</th> <th>Email</th> <th>Actions</th> </tr> <?php $sql = \"SELECT * FROM `Employee`;\" ; $sql_run = $conn -> query ( $sql ); if ( $sql_run ) { // if it is not false, then proceed if ( $sql_run -> num_rows > 0 ) { // num_rows will check if there are row(s) of results while ( $row = $sql_run -> fetch_assoc ()) { ?> <tr> <td> <? = $row [ 'id' ]; ?> </td> <td> <? = $row [ 'name' ]; ?> </td> <td> <? = $row [ 'age' ]; ?> </td> <td> <? = $row [ 'email' ]; ?> </td> <td> <!-- <button onclick=\"document.location.href = 'form.php?id= <? = $row [ 'id' ]; ?> '\">Edit</button> <button onclick=\"deleteConfirm( <? = $row [ 'id' ]; ?> );\">Delete</button> --> </td> </tr> <?php } } else { // echo \"No table rows found.\"; ?> <tr> <td colspan=\"5\">No records found.</td> </tr> <?php } } else { ?> <tr> <td colspan=\"5\">Error retrieving table rows: <? = $conn -> error ; ?> </td> </tr> <?php } ?> </table> </div> <script src=\"main.js\"></script> </body> </html> style.css body > div { margin : auto ; } body > div # form { max-width : 30 rem ; } h1 { font-size : 4 rem ; margin-top : 5 rem ; text-align : center ; } /* index.php only */ table { border-collapse : collapse ; margin : auto ; font-size : 24 px ; } th , td { border : 1 px solid black ; } th : first-of-type , td : first-of-type , td : nth-of-type ( 3 ) { text-align : center ; width : 50 px ; } td : nth-of-type ( 2 ), td : nth-of-type ( 4 ) { min-width : 250 px ; } th : not ( : first-of-type ), td : not ( : first-of-type ) { padding-left : 10 px ; padding-right : 10 px ; } table button { font-size : 16 px ; margin-bottom : 5 px ; } /* forms only */ p { font-size : 20 px ; } form input { font-size : 24 px ; margin-bottom : 1 rem ; width : 100 % ; } label { font-size : 20 px ; } /** * Remove Arrows/Spinners * Reference: https://www.w3schools.com/howto/howto_css_hide_arrow_number.asp */ /* Chrome, Safari, Edge, Opera */ input :: -webkit-outer-spin-button , input :: -webkit-inner-spin-button { -webkit- appearance : none ; margin : 0 ; } /* Firefox */ input [ type = \"number\" ] { -moz- appearance : textfield ; } main.js // Nothing here","title":"PHP Code-Along Series (Part 2)"},{"location":"archive/202204/lab12/#php-code-along-series-part-2","text":"The second part of this series is concerned with implementing data manipulation operations from PHP files, mainly through the use of web forms.","title":"PHP Code-Along Series (Part 2)"},{"location":"archive/202204/lab12/#video","text":"","title":"Video"},{"location":"archive/202204/lab12/#prep-files","text":"DBConnection.php <?php $servername = \"localhost\" ; $username = \"root\" ; $password = \"\" ; $dbName = \"newDB\" ; $conn = new mysqli ( $servername , $username , $password , $dbName ); if ( $conn -> connect_error ) die ( \"Connection failed: \" . $conn -> connect_error ); DBCreateTable.php <?php require \"DBConnection.php\" ; $sql = \"CREATE TABLE Employee ( `id` INT NOT NULL AUTO_INCREMENT, `name` VARCHAR(100) NOT NULL, `age` INT(3) NOT NULL, `email` VARCHAR(100) NULL, PRIMARY KEY(id) );\" ; if ( $conn -> query ( $sql )) echo \"Table created successfully!\" ; else echo \"Error creating Employee table: \" . $conn -> error ; $conn -> close (); DBDropTable.php <?php require \"DBConnection.php\" ; $sql = \"DROP TABLE IF EXISTS `Employee`;\" ; if ( $conn -> query ( $sql )) echo \"Table dropped successfully!\" ; else echo \"Error dropping table: \" . $conn -> error ; $conn -> close (); form.php <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" /> < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" /> < title > Insert New Record </ title > < link rel = \"stylesheet\" href = \"style.css\" /> </ head > < body > < h1 > Insert New Record </ h1 > < div id = \"form\" > < form action = \"DBInsertRecord.php\" method = \"post\" autocomplete = \"nope\" > < label for = \"in_name\" > Name </ label > < input type = \"text\" name = \"in_name\" id = \"in_name\" placeholder = \"Name here\" autocomplete = \"off\" value = \"\" /> < label for = \"in_age\" > Age </ label > < input type = \"number\" name = \"in_age\" id = \"in_age\" placeholder = \"Age here\" autocomplete = \"off\" min = \"1\" value = \"\" /> < label for = \" in_email\" > E-mail </ label > < input type = \"email\" name = \"in_email\" id = \"in_email\" placeholder = \"E-mail here\" autocomplete = \"off\" value = \"\" /> < hr /> < br /> < input type = \"submit\" value = \"Submit\" /> < input type = \"reset\" value = \"Reset\" /> </ form > </ div > </ body > </ html > index.php <?php require \"DBConnection.php\" ; ?> <!DOCTYPE html> <html lang=\"en\"> <head> <meta charset=\"UTF-8\"> <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"> <title>PHP Code-Along 2</title> <link rel=\"stylesheet\" href=\"style.css\"> </head> <body> <h1>List of Records</h1> <div> <table> <tr> <th>ID</th> <th>Name</th> <th>Age</th> <th>Email</th> <th>Actions</th> </tr> <?php $sql = \"SELECT * FROM `Employee`;\" ; $sql_run = $conn -> query ( $sql ); if ( $sql_run ) { // if it is not false, then proceed if ( $sql_run -> num_rows > 0 ) { // num_rows will check if there are row(s) of results while ( $row = $sql_run -> fetch_assoc ()) { ?> <tr> <td> <? = $row [ 'id' ]; ?> </td> <td> <? = $row [ 'name' ]; ?> </td> <td> <? = $row [ 'age' ]; ?> </td> <td> <? = $row [ 'email' ]; ?> </td> <td> <!-- <button onclick=\"document.location.href = 'form.php?id= <? = $row [ 'id' ]; ?> '\">Edit</button> <button onclick=\"deleteConfirm( <? = $row [ 'id' ]; ?> );\">Delete</button> --> </td> </tr> <?php } } else { // echo \"No table rows found.\"; ?> <tr> <td colspan=\"5\">No records found.</td> </tr> <?php } } else { ?> <tr> <td colspan=\"5\">Error retrieving table rows: <? = $conn -> error ; ?> </td> </tr> <?php } ?> </table> </div> <script src=\"main.js\"></script> </body> </html> style.css body > div { margin : auto ; } body > div # form { max-width : 30 rem ; } h1 { font-size : 4 rem ; margin-top : 5 rem ; text-align : center ; } /* index.php only */ table { border-collapse : collapse ; margin : auto ; font-size : 24 px ; } th , td { border : 1 px solid black ; } th : first-of-type , td : first-of-type , td : nth-of-type ( 3 ) { text-align : center ; width : 50 px ; } td : nth-of-type ( 2 ), td : nth-of-type ( 4 ) { min-width : 250 px ; } th : not ( : first-of-type ), td : not ( : first-of-type ) { padding-left : 10 px ; padding-right : 10 px ; } table button { font-size : 16 px ; margin-bottom : 5 px ; } /* forms only */ p { font-size : 20 px ; } form input { font-size : 24 px ; margin-bottom : 1 rem ; width : 100 % ; } label { font-size : 20 px ; } /** * Remove Arrows/Spinners * Reference: https://www.w3schools.com/howto/howto_css_hide_arrow_number.asp */ /* Chrome, Safari, Edge, Opera */ input :: -webkit-outer-spin-button , input :: -webkit-inner-spin-button { -webkit- appearance : none ; margin : 0 ; } /* Firefox */ input [ type = \"number\" ] { -moz- appearance : textfield ; } main.js // Nothing here","title":"Prep Files"},{"location":"archive/202204/lab13/","text":"PHP Code-Along Series (Part 3) The final part of this series can serve as an extension to the activity done in Practical 9. Here, we will be going through how to utilize credentials stored in a database in simulating a mock login and logout functionality. Video Prep Files DBConnection.php <?php $servername = \"localhost\" ; $username = \"root\" ; $password = \"\" ; $dbName = \"newDB\" ; $conn = new mysqli ( $servername , $username , $password , $dbName ); if ( $conn -> connect_error ) die ( \"Connection failed: \" . $conn -> connect_error ); auth.php <?php // Nothing here index.php 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 <?php $message = \"You are not logged in.\" ; ?> <!DOCTYPE html> <html lang=\"en\"> <head> <meta charset=\"UTF-8\"> <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"> <title>Log-in</title> <style> body { height: 100vh; margin: 0; } #main { background-color: lightgray; margin: 20vh auto; min-width: 600px; min-height: 600px; text-align: center; width: 40vw; height: 60vh; } h1 { padding: 4rem 0; } input, button { font-size: 24px; margin: 2rem 0; text-align: center; } input:not([type=\"submit\"]):not([type=\"reset\"]) { max-width: 500px; width: 60%; } </style> </head> <body> <div id=\"main\"> <h1 id=\"message\"> <? = $message ; ?> </h1> <div id=\"content\"> <button onclick=\"window.location.href='login.php';\">Log In</button> </div> </div> </body> </html> login.php 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" /> < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" /> < title > Log-in </ title > < style > body { height : 100 vh ; margin : 0 ; } # main { background-color : lightgray ; margin : 20 vh auto ; min-width : 600 px ; min-height : 600 px ; text-align : center ; width : 40 vw ; height : 60 vh ; } h1 { padding : 4 rem 0 ; } input , button { font-size : 24 px ; margin : 2 rem 0 ; text-align : center ; } input : not ([ type = \"submit\" ]) : not ([ type = \"reset\" ]) { max-width : 500 px ; width : 60 % ; } # invalid_login_msg { background-color : lightpink ; border : 2 px solid red ; font-size : 20 px ; margin : auto ; padding : 1 rem 0 ; width : 600 px ; } </ style > </ head > < body > < div id = \"main\" > < h1 > Login Page </ h1 > < form action = \"auth.php\" method = \"post\" autocomplete = \"nope\" > < input type = \"text\" name = \"username\" id = \"username\" placeholder = \"Username\" autocomplete = \"false\" /> < input type = \"password\" name = \"password\" id = \"password\" placeholder = \"Password\" autocomplete = \"false\" /> < br /> < input type = \"submit\" value = \"Submit\" /> < input type = \"reset\" value = \"Reset\" /> </ form > < button onclick = \"window.location.href='.';\" > Go Back </ button > </ div > </ body > </ html > userTable.sql DROP TABLE IF EXISTS ` newDB ` . ` User ` ; CREATE TABLE ` newDB ` . ` User ` ( ` id ` INT NOT NULL AUTO_INCREMENT , ` username ` VARCHAR ( 20 ) NOT NULL , ` password ` VARCHAR ( 100 ) NOT NULL , ` name ` VARCHAR ( 100 ) NOT NULL , PRIMARY KEY ( ` id ` ) ); INSERT INTO ` newDB ` . ` User ` ( ` username ` , ` password ` , ` name ` ) VALUES ( '110358' , 'Weloveqwerty123' , 'Person' ); Warning The code-along video uses a different username, exercise caution if you plan on using this username instead.","title":"PHP Code-Along Series (Part 3)"},{"location":"archive/202204/lab13/#php-code-along-series-part-3","text":"The final part of this series can serve as an extension to the activity done in Practical 9. Here, we will be going through how to utilize credentials stored in a database in simulating a mock login and logout functionality.","title":"PHP Code-Along Series (Part 3)"},{"location":"archive/202204/lab13/#video","text":"","title":"Video"},{"location":"archive/202204/lab13/#prep-files","text":"DBConnection.php <?php $servername = \"localhost\" ; $username = \"root\" ; $password = \"\" ; $dbName = \"newDB\" ; $conn = new mysqli ( $servername , $username , $password , $dbName ); if ( $conn -> connect_error ) die ( \"Connection failed: \" . $conn -> connect_error ); auth.php <?php // Nothing here index.php 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 <?php $message = \"You are not logged in.\" ; ?> <!DOCTYPE html> <html lang=\"en\"> <head> <meta charset=\"UTF-8\"> <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"> <title>Log-in</title> <style> body { height: 100vh; margin: 0; } #main { background-color: lightgray; margin: 20vh auto; min-width: 600px; min-height: 600px; text-align: center; width: 40vw; height: 60vh; } h1 { padding: 4rem 0; } input, button { font-size: 24px; margin: 2rem 0; text-align: center; } input:not([type=\"submit\"]):not([type=\"reset\"]) { max-width: 500px; width: 60%; } </style> </head> <body> <div id=\"main\"> <h1 id=\"message\"> <? = $message ; ?> </h1> <div id=\"content\"> <button onclick=\"window.location.href='login.php';\">Log In</button> </div> </div> </body> </html> login.php 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" /> < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" /> < title > Log-in </ title > < style > body { height : 100 vh ; margin : 0 ; } # main { background-color : lightgray ; margin : 20 vh auto ; min-width : 600 px ; min-height : 600 px ; text-align : center ; width : 40 vw ; height : 60 vh ; } h1 { padding : 4 rem 0 ; } input , button { font-size : 24 px ; margin : 2 rem 0 ; text-align : center ; } input : not ([ type = \"submit\" ]) : not ([ type = \"reset\" ]) { max-width : 500 px ; width : 60 % ; } # invalid_login_msg { background-color : lightpink ; border : 2 px solid red ; font-size : 20 px ; margin : auto ; padding : 1 rem 0 ; width : 600 px ; } </ style > </ head > < body > < div id = \"main\" > < h1 > Login Page </ h1 > < form action = \"auth.php\" method = \"post\" autocomplete = \"nope\" > < input type = \"text\" name = \"username\" id = \"username\" placeholder = \"Username\" autocomplete = \"false\" /> < input type = \"password\" name = \"password\" id = \"password\" placeholder = \"Password\" autocomplete = \"false\" /> < br /> < input type = \"submit\" value = \"Submit\" /> < input type = \"reset\" value = \"Reset\" /> </ form > < button onclick = \"window.location.href='.';\" > Go Back </ button > </ div > </ body > </ html > userTable.sql DROP TABLE IF EXISTS ` newDB ` . ` User ` ; CREATE TABLE ` newDB ` . ` User ` ( ` id ` INT NOT NULL AUTO_INCREMENT , ` username ` VARCHAR ( 20 ) NOT NULL , ` password ` VARCHAR ( 100 ) NOT NULL , ` name ` VARCHAR ( 100 ) NOT NULL , PRIMARY KEY ( ` id ` ) ); INSERT INTO ` newDB ` . ` User ` ( ` username ` , ` password ` , ` name ` ) VALUES ( '110358' , 'Weloveqwerty123' , 'Person' ); Warning The code-along video uses a different username, exercise caution if you plan on using this username instead.","title":"Prep Files"},{"location":"archive/202204/lamp_macos/","text":"Setting Up LAMP Stack in macOS (The Hard Way) So, you're a macOS user who couldn't install or use XAMPP properly... or you decided to be nuts and try things the hard way. Well, if you decided to open and follow this guide for whatever your reason may be, here's a rundown of what you'll need to do to set up the LAMP stack inside your macOS machine. Let's get started! Take Note As of writing this guide, we are using macOS Big Sur (macOS 11.0+), PHP 8.0.9, MySQL Community Server 8.0.25, and phpMyAdmin 5.1.1. This guide may get outdated rather quickly, so if you're reading this after at least a year from the publication of this guide, do due diligence and find out if any of the steps no longer apply to you. Step 1: Start the Apache Server macOS comes with the Apache Server by default. To start the built-in Apache server, open the Terminal app from your Application folder or type Terminal in the Spotlight Search (shortcut: Cmd + Space ). Type sudo apachectl start and press Enter. Open your web browser and type localhost or 127.0.0.1 in the address bar. If the Apache Server has successfully started, you should see this appear in your web browser: Step 2: Create Sites Directory Fancy, yes? The page you're looking at now is a result of a default webpage file that is in the following location: /Library/WebServer/Documents To be precise, this file you're looking at is named index.html.en . However, that's quite a hard-to-remember location if you're not well-versed with the ins and outs of your system. In addition, this folder's contents cannot be edited without changing a few permissions by default. As a workaround, we will create a Sites directory under your home folder and use that folder to contain all our PHP web files. At the end of this guide, typing in localhost or 127.0.0.1 in your web browser's address bar will source the web files from this folder for view. Heawd over to your account folder. This one should be the folder with your computer's name on it. The full location of this folder is: Macintosh HD/Users/<your_account_folder> Create a folder named Sites. Upon creating the folder, the folder icon should now have a compass image appear on top of it like as shown below: For easier access, I have it as a shortcut in the Finder window's left-hand menu (just drag this Sites folder over to the left menu). You can also drag it to the dock if you so desire. Step 3: Create username.conf File To be able to recognize the files stashed inside the Sites directory, you will require setting up a configuration file called <username>.conf (i.e., if the account username I'm using in my machine is henryheng612 , my configuration file should be called henryheng612.conf ). If you're not sure what your account username is, type whoami in the Terminal and hit Enter. This UNIX command will reveal it inside your Terminal window. Remember to note that name down, we will be using it shortly. Right now, the Terminal window is currently inside your account folder. We will need to create this configuration file in a different location. Type the following command line and press Enter. cd /etc/apache2/users Extra Note: cd is the command in UNIX to navigate out of your current directory to a new one. Type ls and press Enter again. This command displays all visible files in the current file directory (to include ones hidden by default, type ls -a instead). Check to see if there is an existing <username>.conf file (it will appear in the Terminal window if it exists). If so, make a backup copy by entering the following command: sudo cp <username>.conf <username>.conf.bak Remember to replace all instances of <username> with your own account username! Extra Note: sudo is used to request administrator access in a UNIX system. Often if you use sudo , you'll be prompted to enter your password. Don't worry, this is normal. We are now ready to create/edit our configuration file. Type sudo nano <username>.conf in the Terminal window and press Enter. If the file does not exist, you should see a blank window space. Extra Note: nano is a text editor used in UNIX command line interface (CLI) systems that functions like any regular text editor you've used before, just without mousr support and some nice-to-have features. Frequent UNIX users will find themselves using it often. Alternatives are vi and vim , and I think there's a debate among some nerds about which is best. Unless this piques your interest, you need not know the details behind it. Copy and paste the following configuration. <Directory \"Users/<username>/Sites/\"> AllowOverride All Options Indexes MultiViews FollowSymLinks Require all granted </Directory> A gentle reminder: Remember to replace all instances of <username> with your account username! Press Ctrl + O and press Enter to save the file. Press Ctrl + X and press Enter to exit the nano editor. Step 4: Configure the httpd.conf File Now there's also another configuration file we'll need to modify, namely the httpd.conf file. In your Terminal window, enter in cd /etc/apache2 Type ls and press Enter again. You should see httpd.conf being listed as one of the files inside the current directory. Type sudo cp httpd.conf httpd.conf.bak and press Enter. This will create a backup of this configuration file in case something goes awry. Type sudo nano httpd.conf and press Enter. You should see something like this appear in the nano text editor in your Terminal window. Press Ctrl + W , type in LoadModule authz_core_module and press Enter. We are using a search feature in the nano text editor to look for specific lines inside this file. Uncomment the following modules. The # you see in front of each line means that line is commented out (i.e., that specific line or module will be ignored). What we want to do is to enable these modules in our Apache server. LoadModule authn_core_module libexec/apache2/mod_authn_core.so LoadModule authz_host_module libexec/apache2/mod_authz_host.so LoadModule userdir_module libexec/apache2/mod_userdir.so LoadModule include_module libexec/apache2/mod_include.so LoadModule rewrite_module libexec/apache2/mod_rewrite.so Uncomment the following line for the User home directories. Include /private/etc/apache2/extra/httpd-userdir.conf Press Ctrl + W , search up DocumentRoot and press Enter. We want to edit the following two lines \u2013 this shows DocumentRoot configuration in httpd.conf which dictates the folder where your machine will source its web files to be used inside localhost. ... DocumentRoot \"/Library/WebServer/Documents\" <Directory \"/Library/WebServer/Documents\"> ... You may choose to replace them completely with these two lines or add them after commenting the latter. ... DocumentRoot \"/Users/<username>/Sites/\" <Directory \"/Users/<username>/Sites/\"> ... A gentle reminder: Remember to replace all instances of <username> with your account username! Press Ctrl + W , search up AllowOverride None and press Enter. Here, replace this line with AllowOVerride All . Your DocumentRoot configuration in httpd.conf should look like as follows: For extra measure, we can set the Apache Server to serve an index.php file instance first before an index.html. Press Ctrl + W , search up DirectoryIndex and press Enter. You should see the following: From the line where it says DirectoryIndex index.html Add index.php so it now says DirectoryIndex index.php index.html Press Ctrl + O and press Enter to save the file. Press Ctrl + X and press Enter to exit the nano editor. Step 5: Configure the httpd-userdir.conf File In yuor Terminal window, enter in cd /etc/apache2/extra . Type ls and press Enter again. You should see httpd-userdir.conf being listed as one of the files inside the current directory. Type sudo cp httpd-userdir.conf httpd-userdir.conf.bak and press Enter. This will create a backup of this configuration file in case something goes awry. Type sudo nano httpd-userdir.conf and press Enter. You should see something like this appear in the nano text editor in your Terminal window: Uncomment the following line. Include /private/etc/apache2/users/*.conf Press Ctrl + O and press Enter to save the file. Press Ctrl + X and press Enter to exit the nano editor. After carrying out the previous 5 steps, type in sudo apachectl restart amd press Enter. If you type in localhost or 127.0.0.1 in your web browser's address bar now, it should show a 403 Forbidden Access error akin to the following: Not to worry! It means everything's been set up properly so far. This error is caused due to the Sites folder we created not having an index.php or index.html file to display. Step 6: Enable PHP 8.0 macOS has PHP built in (at least in macOS Big Sur and earlier). The PHP shipped with Big Sur is PHP version 7.3.22, which Apple hints on removing in one of the upcoming future versions of macOS. Regardless, we will be using a fresh install of PHP 8.0 using an installation package manager called Homebrew. Head over to https://brew.sh . You will be greeted with Homebrew's home page as follows: The first section you should see is \"Install Homebrew\", where there's a Terminal command line following the title. Copy that command line and run it in a Terminal window. This will install Homebrew inside your Mac. Give it time, it will be ready for use shortly. After installing Homebrew, type in brew install php . This will install PHP as well as any other software dependencies required into your Mac (think of software dependencies as pre-requisites). Open a new tab in the Terminal (or reboot the Terminal application). If you enter in php --version , you should view the PHP version being used like as follows: NOTE ABOUT THIS TERMINAL WINDOW INTERFACE I'm currently using Oh My Zsh in my terminal, this is not required for you to follow this whole guide. If you would like to try out my not-so-custom Oh My Zsh Terminal theme, look up how to install Oh My Zsh first, then head over to the following link to download my theme. Have fun either way! My Custom Theme Here Now that PHP's been installed in your Mac, we will need Apache to use this PHP by default. To do this, we will have to return to our httpd.conf file once more to make some further changes. In your Terminal window, enter in sudo nano /etc/apache2/httpd.conf . You may have noticed that after successfully installing PHP with Homebrew. If you've missed it, you can type in brew info php and the instructions will reappear again. Refer to the part under Caveats . This part details what is required to add into your httpd.conf file. Depending on your Mac (from what I've known from M1 Mac users, the file locations may vary), you may be asked to insert the following or a variant of it: LoadModule php_module /usr/local/opt/php/lib/httpd/modules/libphp.so <FilesMatch \\.php$> SetHandler application/x-httpd-php </FilesMatch> That is all which will be needed Press Ctrl + W , search up LoadModule php and press Enter. After the last LoadModule line, paste the required lines as mentioned in Line 7. Danger Do not uncomment the following line! #LoadModule php7_module libexec/apache2/libphp7.so Uncommenting this will get Apache to run the outdated PHP that came with your Mac, we don't want this. Press Ctrl + O and press Enter to save the file. Press Ctrl + X and press Enter to exit the nano editor. Type in sudo apachectl restart and press Enter. This should enable the changes we made to have Apache run PHP 8.0 in your Mac. Is PHP working properly now? To check if PHP is working on your local Mac's web server, we will be creating a phpinfo() file to load into your browser. Go to your Sites folder and create a file called phpinfo.php . In phpinfo.php , put in the following code and save the file: phpinfo.php 1 <?php phpinfo (); ?> If you type in localhost/phpinfo.php or 127.0.0.1/phpinfo.php in your web browser's address bar, you should see something like this: Congratulations, you're now running a current version of PHP on your local web server! Step 7: Install MySQL You will also require a MySQL or mariaDB database server. This step will involve installing MySQL's Community Server inside your Mac to use \u2013 if you plan on learning more on MySQL databases, consider this a way to kill two birds with one stone! \ud83d\ude01 Like with PHP, you can install MySQL or mariaDB with Homebrew. However, the following instructions will focus more towards not interacting with the Terminal as much as possible. Head over to the following link and download the DMG Archive installer. https://dev.mysql.com/downloads/mysql/ Proceed with the installation up until you reach Configuration stage (this should be the second last part of the installation process). At the Configuration stage, you will be required to select a Password Encryption type. We will be installing one more piece of software to access our MySQL database later, but it will not work well if we choose the Strong Password Encryption option. In this case, select Use Legacy Password Encryption. Enter in your MySQL database password. OOPS! If you proceeded with the Strong Password Encryption by mistake during installation, don't worry. Head over to System Preferences, and you should see MySQL as one of the last options in the window as follows: Select the MySQL option and you will be greeted with a dashboard like as follows: Select Initialize Database and you'll be greeted with this screen. Select Use Legacy Password Encryption and enter your password again. Crisis averted!! \ud83d\ude0c Open up a NEW Terminal window and type in ls -a . Look and see if either a file called .zshrc or .bashrc exists inside your account folder. In this example, my machine has .zshrc . If you have .zshrc like in my case (this should be true for all those running macOS Cataline or later), type the following command: echo \"export PATH=${PATH}:/usr/local/mysql/bin/\" >> ~/.zshrc If you're using .bashrc instead, type the following command: echo \"export PATH=${PATH}:/usr/local/mysql/bin/\" >> ~/.bashrc Open a new Terminal window and enter in mysql --version . It should print out the version of MySQL installed in your machine. Type in mysql -u root -p . You should be prompted to enter the password you've set for MySQL. Once you've entered the correct password, you should see a CLI nterface to enter MySQL commands. We don't need to do anything here for now, so just type in exit and press Enter to exit this interface. If you like, you can also proceed to install MySQL Workbench. It is an IDE that is primarily used to create and test MySQL scripts. However, we will be using something else instead for this module.. and that is phpMyAdmin. Step 8: Install phpMyAdmin Alright, the last thing you'll need to install and/or configure.. I promise! Also like PHP, you can install phpMyAdmin using Homebrew, but we will again avoid using the Terminal like for MySQL in the following instructions. Head over to the following link to download phpMyAdmin (which is in a zip file): https://phpmyadmin.net Unzip the zip file. Rename the folder to just \"phpmyadmin\" and move it to the Sites folder. If you type in localhost/phpinfo.php or 127.0.0.1/phpinfo.php in your browser's address bar, you should be greeted with a login page like this: Type in root as your username and enter the password you set when installing MySQL earlier. You should now be greeted with a control panel like this: And... you're done! That is all you need to install and configure to prepare a LAMP stack from scratch. I hope you've gained a sense of accomplishment from going through these steps, it's a fruitful one! If you have any more questions, you know where to reach me. \ud83d\ude09 References [Tech CookBook] Setting Up Your Local Web Server on macOS Big Sur 11.0.1 (2020) | MAMP | macOS, Apache, MySQL, PHP. Link: https://tech-cookbook.com/2020/11/14/setting-up-your-local-web-server-on-macos-big-sur-11-0-1-2020-mamp-macos-apache-mysql-php/ [YouTube] How To Set Up phpMyAdmin With MySQL 8.0+ on MacOS. Link: https://youtu.be/SVNbRXUEDUg","title":"Setting Up LAMP Stack in macOS (The Hard Way)"},{"location":"archive/202204/lamp_macos/#setting-up-lamp-stack-in-macos-the-hard-way","text":"So, you're a macOS user who couldn't install or use XAMPP properly... or you decided to be nuts and try things the hard way. Well, if you decided to open and follow this guide for whatever your reason may be, here's a rundown of what you'll need to do to set up the LAMP stack inside your macOS machine. Let's get started! Take Note As of writing this guide, we are using macOS Big Sur (macOS 11.0+), PHP 8.0.9, MySQL Community Server 8.0.25, and phpMyAdmin 5.1.1. This guide may get outdated rather quickly, so if you're reading this after at least a year from the publication of this guide, do due diligence and find out if any of the steps no longer apply to you.","title":"Setting Up LAMP Stack in macOS (The Hard Way)"},{"location":"archive/202204/lamp_macos/#step-1-start-the-apache-server","text":"macOS comes with the Apache Server by default. To start the built-in Apache server, open the Terminal app from your Application folder or type Terminal in the Spotlight Search (shortcut: Cmd + Space ). Type sudo apachectl start and press Enter. Open your web browser and type localhost or 127.0.0.1 in the address bar. If the Apache Server has successfully started, you should see this appear in your web browser:","title":"Step 1: Start the Apache Server"},{"location":"archive/202204/lamp_macos/#step-2-create-sites-directory","text":"Fancy, yes? The page you're looking at now is a result of a default webpage file that is in the following location: /Library/WebServer/Documents To be precise, this file you're looking at is named index.html.en . However, that's quite a hard-to-remember location if you're not well-versed with the ins and outs of your system. In addition, this folder's contents cannot be edited without changing a few permissions by default. As a workaround, we will create a Sites directory under your home folder and use that folder to contain all our PHP web files. At the end of this guide, typing in localhost or 127.0.0.1 in your web browser's address bar will source the web files from this folder for view. Heawd over to your account folder. This one should be the folder with your computer's name on it. The full location of this folder is: Macintosh HD/Users/<your_account_folder> Create a folder named Sites. Upon creating the folder, the folder icon should now have a compass image appear on top of it like as shown below: For easier access, I have it as a shortcut in the Finder window's left-hand menu (just drag this Sites folder over to the left menu). You can also drag it to the dock if you so desire.","title":"Step 2: Create Sites Directory"},{"location":"archive/202204/lamp_macos/#step-3-create-usernameconf-file","text":"To be able to recognize the files stashed inside the Sites directory, you will require setting up a configuration file called <username>.conf (i.e., if the account username I'm using in my machine is henryheng612 , my configuration file should be called henryheng612.conf ). If you're not sure what your account username is, type whoami in the Terminal and hit Enter. This UNIX command will reveal it inside your Terminal window. Remember to note that name down, we will be using it shortly. Right now, the Terminal window is currently inside your account folder. We will need to create this configuration file in a different location. Type the following command line and press Enter. cd /etc/apache2/users Extra Note: cd is the command in UNIX to navigate out of your current directory to a new one. Type ls and press Enter again. This command displays all visible files in the current file directory (to include ones hidden by default, type ls -a instead). Check to see if there is an existing <username>.conf file (it will appear in the Terminal window if it exists). If so, make a backup copy by entering the following command: sudo cp <username>.conf <username>.conf.bak Remember to replace all instances of <username> with your own account username! Extra Note: sudo is used to request administrator access in a UNIX system. Often if you use sudo , you'll be prompted to enter your password. Don't worry, this is normal. We are now ready to create/edit our configuration file. Type sudo nano <username>.conf in the Terminal window and press Enter. If the file does not exist, you should see a blank window space. Extra Note: nano is a text editor used in UNIX command line interface (CLI) systems that functions like any regular text editor you've used before, just without mousr support and some nice-to-have features. Frequent UNIX users will find themselves using it often. Alternatives are vi and vim , and I think there's a debate among some nerds about which is best. Unless this piques your interest, you need not know the details behind it. Copy and paste the following configuration. <Directory \"Users/<username>/Sites/\"> AllowOverride All Options Indexes MultiViews FollowSymLinks Require all granted </Directory> A gentle reminder: Remember to replace all instances of <username> with your account username! Press Ctrl + O and press Enter to save the file. Press Ctrl + X and press Enter to exit the nano editor.","title":"Step 3: Create username.conf File"},{"location":"archive/202204/lamp_macos/#step-4-configure-the-httpdconf-file","text":"Now there's also another configuration file we'll need to modify, namely the httpd.conf file. In your Terminal window, enter in cd /etc/apache2 Type ls and press Enter again. You should see httpd.conf being listed as one of the files inside the current directory. Type sudo cp httpd.conf httpd.conf.bak and press Enter. This will create a backup of this configuration file in case something goes awry. Type sudo nano httpd.conf and press Enter. You should see something like this appear in the nano text editor in your Terminal window. Press Ctrl + W , type in LoadModule authz_core_module and press Enter. We are using a search feature in the nano text editor to look for specific lines inside this file. Uncomment the following modules. The # you see in front of each line means that line is commented out (i.e., that specific line or module will be ignored). What we want to do is to enable these modules in our Apache server. LoadModule authn_core_module libexec/apache2/mod_authn_core.so LoadModule authz_host_module libexec/apache2/mod_authz_host.so LoadModule userdir_module libexec/apache2/mod_userdir.so LoadModule include_module libexec/apache2/mod_include.so LoadModule rewrite_module libexec/apache2/mod_rewrite.so Uncomment the following line for the User home directories. Include /private/etc/apache2/extra/httpd-userdir.conf Press Ctrl + W , search up DocumentRoot and press Enter. We want to edit the following two lines \u2013 this shows DocumentRoot configuration in httpd.conf which dictates the folder where your machine will source its web files to be used inside localhost. ... DocumentRoot \"/Library/WebServer/Documents\" <Directory \"/Library/WebServer/Documents\"> ... You may choose to replace them completely with these two lines or add them after commenting the latter. ... DocumentRoot \"/Users/<username>/Sites/\" <Directory \"/Users/<username>/Sites/\"> ... A gentle reminder: Remember to replace all instances of <username> with your account username! Press Ctrl + W , search up AllowOverride None and press Enter. Here, replace this line with AllowOVerride All . Your DocumentRoot configuration in httpd.conf should look like as follows: For extra measure, we can set the Apache Server to serve an index.php file instance first before an index.html. Press Ctrl + W , search up DirectoryIndex and press Enter. You should see the following: From the line where it says DirectoryIndex index.html Add index.php so it now says DirectoryIndex index.php index.html Press Ctrl + O and press Enter to save the file. Press Ctrl + X and press Enter to exit the nano editor.","title":"Step 4: Configure the httpd.conf File"},{"location":"archive/202204/lamp_macos/#step-5-configure-the-httpd-userdirconf-file","text":"In yuor Terminal window, enter in cd /etc/apache2/extra . Type ls and press Enter again. You should see httpd-userdir.conf being listed as one of the files inside the current directory. Type sudo cp httpd-userdir.conf httpd-userdir.conf.bak and press Enter. This will create a backup of this configuration file in case something goes awry. Type sudo nano httpd-userdir.conf and press Enter. You should see something like this appear in the nano text editor in your Terminal window: Uncomment the following line. Include /private/etc/apache2/users/*.conf Press Ctrl + O and press Enter to save the file. Press Ctrl + X and press Enter to exit the nano editor. After carrying out the previous 5 steps, type in sudo apachectl restart amd press Enter. If you type in localhost or 127.0.0.1 in your web browser's address bar now, it should show a 403 Forbidden Access error akin to the following: Not to worry! It means everything's been set up properly so far. This error is caused due to the Sites folder we created not having an index.php or index.html file to display.","title":"Step 5: Configure the httpd-userdir.conf File"},{"location":"archive/202204/lamp_macos/#step-6-enable-php-80","text":"macOS has PHP built in (at least in macOS Big Sur and earlier). The PHP shipped with Big Sur is PHP version 7.3.22, which Apple hints on removing in one of the upcoming future versions of macOS. Regardless, we will be using a fresh install of PHP 8.0 using an installation package manager called Homebrew. Head over to https://brew.sh . You will be greeted with Homebrew's home page as follows: The first section you should see is \"Install Homebrew\", where there's a Terminal command line following the title. Copy that command line and run it in a Terminal window. This will install Homebrew inside your Mac. Give it time, it will be ready for use shortly. After installing Homebrew, type in brew install php . This will install PHP as well as any other software dependencies required into your Mac (think of software dependencies as pre-requisites). Open a new tab in the Terminal (or reboot the Terminal application). If you enter in php --version , you should view the PHP version being used like as follows: NOTE ABOUT THIS TERMINAL WINDOW INTERFACE I'm currently using Oh My Zsh in my terminal, this is not required for you to follow this whole guide. If you would like to try out my not-so-custom Oh My Zsh Terminal theme, look up how to install Oh My Zsh first, then head over to the following link to download my theme. Have fun either way! My Custom Theme Here Now that PHP's been installed in your Mac, we will need Apache to use this PHP by default. To do this, we will have to return to our httpd.conf file once more to make some further changes. In your Terminal window, enter in sudo nano /etc/apache2/httpd.conf . You may have noticed that after successfully installing PHP with Homebrew. If you've missed it, you can type in brew info php and the instructions will reappear again. Refer to the part under Caveats . This part details what is required to add into your httpd.conf file. Depending on your Mac (from what I've known from M1 Mac users, the file locations may vary), you may be asked to insert the following or a variant of it: LoadModule php_module /usr/local/opt/php/lib/httpd/modules/libphp.so <FilesMatch \\.php$> SetHandler application/x-httpd-php </FilesMatch> That is all which will be needed Press Ctrl + W , search up LoadModule php and press Enter. After the last LoadModule line, paste the required lines as mentioned in Line 7. Danger Do not uncomment the following line! #LoadModule php7_module libexec/apache2/libphp7.so Uncommenting this will get Apache to run the outdated PHP that came with your Mac, we don't want this. Press Ctrl + O and press Enter to save the file. Press Ctrl + X and press Enter to exit the nano editor. Type in sudo apachectl restart and press Enter. This should enable the changes we made to have Apache run PHP 8.0 in your Mac.","title":"Step 6: Enable PHP 8.0"},{"location":"archive/202204/lamp_macos/#is-php-working-properly-now","text":"To check if PHP is working on your local Mac's web server, we will be creating a phpinfo() file to load into your browser. Go to your Sites folder and create a file called phpinfo.php . In phpinfo.php , put in the following code and save the file: phpinfo.php 1 <?php phpinfo (); ?> If you type in localhost/phpinfo.php or 127.0.0.1/phpinfo.php in your web browser's address bar, you should see something like this: Congratulations, you're now running a current version of PHP on your local web server!","title":"Is PHP working properly now?"},{"location":"archive/202204/lamp_macos/#step-7-install-mysql","text":"You will also require a MySQL or mariaDB database server. This step will involve installing MySQL's Community Server inside your Mac to use \u2013 if you plan on learning more on MySQL databases, consider this a way to kill two birds with one stone! \ud83d\ude01 Like with PHP, you can install MySQL or mariaDB with Homebrew. However, the following instructions will focus more towards not interacting with the Terminal as much as possible. Head over to the following link and download the DMG Archive installer. https://dev.mysql.com/downloads/mysql/ Proceed with the installation up until you reach Configuration stage (this should be the second last part of the installation process). At the Configuration stage, you will be required to select a Password Encryption type. We will be installing one more piece of software to access our MySQL database later, but it will not work well if we choose the Strong Password Encryption option. In this case, select Use Legacy Password Encryption. Enter in your MySQL database password. OOPS! If you proceeded with the Strong Password Encryption by mistake during installation, don't worry. Head over to System Preferences, and you should see MySQL as one of the last options in the window as follows: Select the MySQL option and you will be greeted with a dashboard like as follows: Select Initialize Database and you'll be greeted with this screen. Select Use Legacy Password Encryption and enter your password again. Crisis averted!! \ud83d\ude0c Open up a NEW Terminal window and type in ls -a . Look and see if either a file called .zshrc or .bashrc exists inside your account folder. In this example, my machine has .zshrc . If you have .zshrc like in my case (this should be true for all those running macOS Cataline or later), type the following command: echo \"export PATH=${PATH}:/usr/local/mysql/bin/\" >> ~/.zshrc If you're using .bashrc instead, type the following command: echo \"export PATH=${PATH}:/usr/local/mysql/bin/\" >> ~/.bashrc Open a new Terminal window and enter in mysql --version . It should print out the version of MySQL installed in your machine. Type in mysql -u root -p . You should be prompted to enter the password you've set for MySQL. Once you've entered the correct password, you should see a CLI nterface to enter MySQL commands. We don't need to do anything here for now, so just type in exit and press Enter to exit this interface. If you like, you can also proceed to install MySQL Workbench. It is an IDE that is primarily used to create and test MySQL scripts. However, we will be using something else instead for this module.. and that is phpMyAdmin.","title":"Step 7: Install MySQL"},{"location":"archive/202204/lamp_macos/#step-8-install-phpmyadmin","text":"Alright, the last thing you'll need to install and/or configure.. I promise! Also like PHP, you can install phpMyAdmin using Homebrew, but we will again avoid using the Terminal like for MySQL in the following instructions. Head over to the following link to download phpMyAdmin (which is in a zip file): https://phpmyadmin.net Unzip the zip file. Rename the folder to just \"phpmyadmin\" and move it to the Sites folder. If you type in localhost/phpinfo.php or 127.0.0.1/phpinfo.php in your browser's address bar, you should be greeted with a login page like this: Type in root as your username and enter the password you set when installing MySQL earlier. You should now be greeted with a control panel like this: And... you're done! That is all you need to install and configure to prepare a LAMP stack from scratch. I hope you've gained a sense of accomplishment from going through these steps, it's a fruitful one! If you have any more questions, you know where to reach me. \ud83d\ude09","title":"Step 8: Install phpMyAdmin"},{"location":"archive/202204/lamp_macos/#references","text":"[Tech CookBook] Setting Up Your Local Web Server on macOS Big Sur 11.0.1 (2020) | MAMP | macOS, Apache, MySQL, PHP. Link: https://tech-cookbook.com/2020/11/14/setting-up-your-local-web-server-on-macos-big-sur-11-0-1-2020-mamp-macos-apache-mysql-php/ [YouTube] How To Set Up phpMyAdmin With MySQL 8.0+ on MacOS. Link: https://youtu.be/SVNbRXUEDUg","title":"References"},{"location":"archive/202204/practical-preparation/","text":"Practical Preparation Code Editor Going forward, I will be using Visual Studio Code as my code editor of choice during demos. However, this is not the only choice available - some good alternatives include Atom, Sublime Text, and Notepad++ (for Windows users only). Of course, you are not forbidden to use a different code editor you're already familiar with, as long as you are able to make web scripts with it. Visual Studio Code Extensions Visual Studio Code has plenty of extensions which can either make your code editor appear more visually appealing, or help ease your workflow with some useful fixes. The ones I will be using prevalently are as follows: Highlight Matching Tag by vincaslt ( vincaslt.highlight-matching-tag ) - This is helpful especially for checking if your tag pairs are correctly placed or omitted by mistake. Live Server by Ritwich Dey ( ritwickdey.liveserver ) - Up until we learn PHP, this will be the quick way to view our web pages without digging into our file directory to display our web pages in our web browser. Prettier - Code formatter by Prettier ( esbenp.prettier-vscode ) - This will be our code formatter in order to have our web files properly indented and formatted (hence the name). Also, do take note that I also have this extension installed in my instance of Visual Studio Code: IntelliJ IDEA Keybindings by Keisuke Kato ( k--kato.intellij-idea-keybindings ) This extension makes it such that some of my shortcut keys are different from what is initially set by Microsoft themselves. You may choose not to install this extension, this one should do absolutely nothing to your workflow especially if you're not the type to use complex shortcut keys aside from your Ctrl + X / Ctrl + C and Ctrl + V combo ( Cmd + X / Cmd + C and Cmd + V for macOS ). However, if I mention any keyboard shortcut that does not translate on your end, you may want to do due diligence and find out what the original keybindings are. You will be able to install your extensions by clicking on the Extensions tab on the left hand side (the shortcut is Shift + Cmd + X on macOS or Ctrl + Shift + X on Windows). You can find out more about what these extensions do when you select and find them from there. Note Do note that you are not required to download these extensions in order for you to carry on with the class. These extensions are only meant to help with easing your web scripting/programming experiences with Visual Studio Code. Testing Visual Studio Code Out To open a project directory, you can click on \"Open...\" from the Getting Started page or from the top menu bar and locate it that way. Alternatively, you can click and drag your project folder from your File Explorer/Finder window and into the Visual Studio Code interface - this is a pretty quick way to get started and should be applicable in most code editors. Create a web page file named index.html your project directory. After that, copy and paste the following into your web page: index.html 1 2 3 4 5 6 7 8 9 <!DOCTYPE html> < html > < head > < title > Testing HTML </ title > </ head > < body > < h1 > It works! </ h1 > </ body > </ html > If you downloaded the Live Server extension, you should be able to view a link that says \"Go Live\". Click that link and it will open up your web page in a small web server with the IP address 127:.0.0.1:5500 . The port 5500 may not apply depending on what is currently running inside your machine. The output should be as follows: Any change you make to your web page right after upon saving will immediately refresh what is shown on the web browser automatically - this means you won't need to instinctively refresh your browser each time you make a change. Click the link again to stop the Live Server from refreshing. Alternatively, in the Explorer side bar, you can right click on the HTML file you're working on and select \"Open with Live Server\".","title":"Practical Preparation"},{"location":"archive/202204/practical-preparation/#practical-preparation","text":"","title":"Practical Preparation"},{"location":"archive/202204/practical-preparation/#code-editor","text":"Going forward, I will be using Visual Studio Code as my code editor of choice during demos. However, this is not the only choice available - some good alternatives include Atom, Sublime Text, and Notepad++ (for Windows users only). Of course, you are not forbidden to use a different code editor you're already familiar with, as long as you are able to make web scripts with it.","title":"Code Editor"},{"location":"archive/202204/practical-preparation/#visual-studio-code-extensions","text":"Visual Studio Code has plenty of extensions which can either make your code editor appear more visually appealing, or help ease your workflow with some useful fixes. The ones I will be using prevalently are as follows: Highlight Matching Tag by vincaslt ( vincaslt.highlight-matching-tag ) - This is helpful especially for checking if your tag pairs are correctly placed or omitted by mistake. Live Server by Ritwich Dey ( ritwickdey.liveserver ) - Up until we learn PHP, this will be the quick way to view our web pages without digging into our file directory to display our web pages in our web browser. Prettier - Code formatter by Prettier ( esbenp.prettier-vscode ) - This will be our code formatter in order to have our web files properly indented and formatted (hence the name). Also, do take note that I also have this extension installed in my instance of Visual Studio Code: IntelliJ IDEA Keybindings by Keisuke Kato ( k--kato.intellij-idea-keybindings ) This extension makes it such that some of my shortcut keys are different from what is initially set by Microsoft themselves. You may choose not to install this extension, this one should do absolutely nothing to your workflow especially if you're not the type to use complex shortcut keys aside from your Ctrl + X / Ctrl + C and Ctrl + V combo ( Cmd + X / Cmd + C and Cmd + V for macOS ). However, if I mention any keyboard shortcut that does not translate on your end, you may want to do due diligence and find out what the original keybindings are. You will be able to install your extensions by clicking on the Extensions tab on the left hand side (the shortcut is Shift + Cmd + X on macOS or Ctrl + Shift + X on Windows). You can find out more about what these extensions do when you select and find them from there. Note Do note that you are not required to download these extensions in order for you to carry on with the class. These extensions are only meant to help with easing your web scripting/programming experiences with Visual Studio Code.","title":"Visual Studio Code Extensions"},{"location":"archive/202204/practical-preparation/#testing-visual-studio-code-out","text":"To open a project directory, you can click on \"Open...\" from the Getting Started page or from the top menu bar and locate it that way. Alternatively, you can click and drag your project folder from your File Explorer/Finder window and into the Visual Studio Code interface - this is a pretty quick way to get started and should be applicable in most code editors. Create a web page file named index.html your project directory. After that, copy and paste the following into your web page: index.html 1 2 3 4 5 6 7 8 9 <!DOCTYPE html> < html > < head > < title > Testing HTML </ title > </ head > < body > < h1 > It works! </ h1 > </ body > </ html > If you downloaded the Live Server extension, you should be able to view a link that says \"Go Live\". Click that link and it will open up your web page in a small web server with the IP address 127:.0.0.1:5500 . The port 5500 may not apply depending on what is currently running inside your machine. The output should be as follows: Any change you make to your web page right after upon saving will immediately refresh what is shown on the web browser automatically - this means you won't need to instinctively refresh your browser each time you make a change. Click the link again to stop the Live Server from refreshing. Alternatively, in the Explorer side bar, you can right click on the HTML file you're working on and select \"Open with Live Server\".","title":"Testing Visual Studio Code Out"},{"location":"archive/202204/vscode/","text":"Visual Studio Code Setup Going forward, I will be using Visual Studio Code as my code editor of choice during demos. However, this is not the only choice available - some good alternatives include Atom, Sublime Text, and Notepad++ (for Windows users only). Of course, you are not forbidden to use a different code editor you're already familiar with, as long as you are able to make web scripts with it. Visual Studio Code Extensions Visual Studio Code has plenty of extensions which can either make your code editor appear more visually appealing, or help ease your workflow with some useful fixes. The ones I will be using prevalently are as follows: Highlight Matching Tag by vincaslt ( vincaslt.highlight-matching-tag ) - This is helpful especially for checking if your tag pairs are correctly placed or omitted by mistake. Live Server by Ritwich Dey ( ritwickdey.liveserver ) - Up until we learn PHP, this will be the quick way to view our webpages without digging into our file directory to display our webpages in our web browser. Prettier - Code formatter by Prettier ( esbenp.prettier-vscode ) - This will be our code formatter in order to have our web files properly indented and formatted (hence the name). Also, do take note that I also have this extension installed in my instance of Visual Studio Code: IntelliJ IDEA Keybindings by Keisuke Kato ( k--kato.intellij-idea-keybindings ) This extension makes it such that some of my shortcut keys are different from what is initially set by Microsoft themselves. You may choose not to install this extension, this one should do absolutely nothing to your workflow especially if you're not the type to use complex shortcut keys aside from your Ctrl + X / Ctrl + C and Ctrl + V combo ( Cmd + X / Cmd + C and Cmd + V for macOS ). However, if I mention any keyboard shortcut that does not translate on your end, you may want to do due diligence and find out what the original keybindings are. You will be able to install your extensions by clicking on the Extensions tab on the left hand side (the shortcut is Shift + Cmd + X on macOS or Ctrl + Shift + X on Windows). You can find out more about what these extensions do when you select and find them from there. Note Do be aware that you are not required to download these extensions in order for you to carry on with the class. These extensions are only meant to help with easing your web scripting/programming experiences with Visual Studio Code. Testing Visual Studio Code Out To open a project directory, you can click on \"Open...\" from the Getting Started page or from the top menu bar and locate it that way. Alternatively, you can click and drag your project folder from your File Explorer/Finder window and into the Visual Studio Code interface - this is a pretty quick way to get started and should be applicable in most code editors. Create a webpage file named index.html your project directory. After that, copy and paste the following into your webpage: index.html 1 2 3 4 5 6 7 8 9 <!DOCTYPE html> < html > < head > < title > Testing HTML </ title > </ head > < body > < h1 > It works! </ h1 > </ body > </ html > If you downloaded the Live Server extension, you should be able to view a link that says \"Go Live\". Click that link and it will open up your webpage in a small web server with the IP address 127.0.0.1:5500 . The port 5500 may not apply depending on what is currently running inside your machine. The output should be as follows: Any change you make to your webpage right after upon saving will immediately refresh what is shown on the web browser automatically - this means you won't need to instinctively refresh your browser each time you make a change. Click the link again to stop the Live Server from refreshing. Alternatively, in the Explorer side bar, you can right click on the HTML file you're working on and select \"Open with Live Server\". Attention The Live Server extension only works when you have your project folder as an active workspace inside Visual Studio Code. It will not work as intended with loose files that are simply opened from other foreign folders.","title":"Visual Studio Code Setup"},{"location":"archive/202204/vscode/#visual-studio-code-setup","text":"Going forward, I will be using Visual Studio Code as my code editor of choice during demos. However, this is not the only choice available - some good alternatives include Atom, Sublime Text, and Notepad++ (for Windows users only). Of course, you are not forbidden to use a different code editor you're already familiar with, as long as you are able to make web scripts with it.","title":"Visual Studio Code Setup"},{"location":"archive/202204/vscode/#visual-studio-code-extensions","text":"Visual Studio Code has plenty of extensions which can either make your code editor appear more visually appealing, or help ease your workflow with some useful fixes. The ones I will be using prevalently are as follows: Highlight Matching Tag by vincaslt ( vincaslt.highlight-matching-tag ) - This is helpful especially for checking if your tag pairs are correctly placed or omitted by mistake. Live Server by Ritwich Dey ( ritwickdey.liveserver ) - Up until we learn PHP, this will be the quick way to view our webpages without digging into our file directory to display our webpages in our web browser. Prettier - Code formatter by Prettier ( esbenp.prettier-vscode ) - This will be our code formatter in order to have our web files properly indented and formatted (hence the name). Also, do take note that I also have this extension installed in my instance of Visual Studio Code: IntelliJ IDEA Keybindings by Keisuke Kato ( k--kato.intellij-idea-keybindings ) This extension makes it such that some of my shortcut keys are different from what is initially set by Microsoft themselves. You may choose not to install this extension, this one should do absolutely nothing to your workflow especially if you're not the type to use complex shortcut keys aside from your Ctrl + X / Ctrl + C and Ctrl + V combo ( Cmd + X / Cmd + C and Cmd + V for macOS ). However, if I mention any keyboard shortcut that does not translate on your end, you may want to do due diligence and find out what the original keybindings are. You will be able to install your extensions by clicking on the Extensions tab on the left hand side (the shortcut is Shift + Cmd + X on macOS or Ctrl + Shift + X on Windows). You can find out more about what these extensions do when you select and find them from there. Note Do be aware that you are not required to download these extensions in order for you to carry on with the class. These extensions are only meant to help with easing your web scripting/programming experiences with Visual Studio Code.","title":"Visual Studio Code Extensions"},{"location":"archive/202204/vscode/#testing-visual-studio-code-out","text":"To open a project directory, you can click on \"Open...\" from the Getting Started page or from the top menu bar and locate it that way. Alternatively, you can click and drag your project folder from your File Explorer/Finder window and into the Visual Studio Code interface - this is a pretty quick way to get started and should be applicable in most code editors. Create a webpage file named index.html your project directory. After that, copy and paste the following into your webpage: index.html 1 2 3 4 5 6 7 8 9 <!DOCTYPE html> < html > < head > < title > Testing HTML </ title > </ head > < body > < h1 > It works! </ h1 > </ body > </ html > If you downloaded the Live Server extension, you should be able to view a link that says \"Go Live\". Click that link and it will open up your webpage in a small web server with the IP address 127.0.0.1:5500 . The port 5500 may not apply depending on what is currently running inside your machine. The output should be as follows: Any change you make to your webpage right after upon saving will immediately refresh what is shown on the web browser automatically - this means you won't need to instinctively refresh your browser each time you make a change. Click the link again to stop the Live Server from refreshing. Alternatively, in the Explorer side bar, you can right click on the HTML file you're working on and select \"Open with Live Server\". Attention The Live Server extension only works when you have your project folder as an active workspace inside Visual Studio Code. It will not work as intended with loose files that are simply opened from other foreign folders.","title":"Testing Visual Studio Code Out"},{"location":"archive/202204/xampp/","text":"XAMPP Installation Unlike JavaScript, PHP is a back-end scripting language that involves interacting with a server for information exchange. One of the useful applications of using PHP in web development includes form data collection and processing. Getting Started To carry on with programming in PHP, you will require an Apache server installed in your local machine. Not only that, this server will also need to contain PHP and a few database software. In short, you will need what is often referred as a LAMP stack. Fortunately, one may find the LAMP stack already bundled in various packages like XAMPP. XAMPP is available across multiple platforms, including Windows, macOS and Linux. Head here to obtain the XAMPP installer: XAMPP Installer Head here to obtain the MAMP installer: MAMP Installer M1 Macs Incompatibility As of now, I think that M1 Macs are incompatible with XAMPP. If you're part of the demographic that uses an M1 Mac, you may want to look for alternatives like MAMP. Still, I haven't tested this out (mostly because I don't own one just yet), but perhaps if you want to try brute force your way into getting XAMPP to work, this may help: How to get Xampp working on your M1 chip Macbook pro Installing LAMP Stack from Scratch (for macOS Users only) If you're feeling adventurous or if all the LAMP stack packages are giving you problems during installation, head over to my guide on how to install each component separately on your machine here: Setting Up LAMP Stack in macOS (The Hard Way) Warning Should you choose this route for installing your LAMP stack, don't follow the rest of this practical's guide. The separate guide will detail different steps to testing everything you install. XAMPP Control Panel The XAMPP Control Panel should look something like this: XAMPP Control Panel The only two items that you need turned on is Apache and MySQL . The rest are not necessary. IMPORTANT: Location of Project Files for PHP Development Upon installation, the location of the XAMPP web server files in Windows is in C:\\xampp by default. On macOS, XAMPP acts like an external volume that has to be mounted each time you need to use it. Pay close attention to where a folder called htdocs is. Unlike previously when you can basically open your HTML files from just about anywhere in your local machine, PHP files will only work within the server file directory. In particular, you will need to stash your project files inside a folder named htdocs from now on. First PHP Script Ensure that both the Apache server and the MySQL are running as according to the contol panel. Inside the htdocs folder, create a PHP file named test.php . In this file, enter the following script: test.php 1 2 <?php echo \"<h1>It works!</h1>\" ; If you type in localhost/test.php into the browser's address bar, you should see the following: In order to access pages from the htdocs folder from your web browser, you will need to start with localhost before the filename. The method of accessing files in subfolders still apply (to get into index.php in a subfolder called test in htdocs , type localhost/test/index.php ).","title":"XAMPP Installation"},{"location":"archive/202204/xampp/#xampp-installation","text":"Unlike JavaScript, PHP is a back-end scripting language that involves interacting with a server for information exchange. One of the useful applications of using PHP in web development includes form data collection and processing.","title":"XAMPP Installation"},{"location":"archive/202204/xampp/#getting-started","text":"To carry on with programming in PHP, you will require an Apache server installed in your local machine. Not only that, this server will also need to contain PHP and a few database software. In short, you will need what is often referred as a LAMP stack. Fortunately, one may find the LAMP stack already bundled in various packages like XAMPP. XAMPP is available across multiple platforms, including Windows, macOS and Linux. Head here to obtain the XAMPP installer: XAMPP Installer Head here to obtain the MAMP installer: MAMP Installer M1 Macs Incompatibility As of now, I think that M1 Macs are incompatible with XAMPP. If you're part of the demographic that uses an M1 Mac, you may want to look for alternatives like MAMP. Still, I haven't tested this out (mostly because I don't own one just yet), but perhaps if you want to try brute force your way into getting XAMPP to work, this may help: How to get Xampp working on your M1 chip Macbook pro","title":"Getting Started"},{"location":"archive/202204/xampp/#installing-lamp-stack-from-scratch-for-macos-users-only","text":"If you're feeling adventurous or if all the LAMP stack packages are giving you problems during installation, head over to my guide on how to install each component separately on your machine here: Setting Up LAMP Stack in macOS (The Hard Way) Warning Should you choose this route for installing your LAMP stack, don't follow the rest of this practical's guide. The separate guide will detail different steps to testing everything you install.","title":"Installing LAMP Stack from Scratch (for macOS Users only)"},{"location":"archive/202204/xampp/#xampp-control-panel","text":"The XAMPP Control Panel should look something like this: XAMPP Control Panel The only two items that you need turned on is Apache and MySQL . The rest are not necessary.","title":"XAMPP Control Panel"},{"location":"archive/202204/xampp/#important-location-of-project-files-for-php-development","text":"Upon installation, the location of the XAMPP web server files in Windows is in C:\\xampp by default. On macOS, XAMPP acts like an external volume that has to be mounted each time you need to use it. Pay close attention to where a folder called htdocs is. Unlike previously when you can basically open your HTML files from just about anywhere in your local machine, PHP files will only work within the server file directory. In particular, you will need to stash your project files inside a folder named htdocs from now on.","title":"IMPORTANT: Location of Project Files for PHP Development"},{"location":"archive/202204/xampp/#first-php-script","text":"Ensure that both the Apache server and the MySQL are running as according to the contol panel. Inside the htdocs folder, create a PHP file named test.php . In this file, enter the following script: test.php 1 2 <?php echo \"<h1>It works!</h1>\" ; If you type in localhost/test.php into the browser's address bar, you should see the following: In order to access pages from the htdocs folder from your web browser, you will need to start with localhost before the filename. The method of accessing files in subfolders still apply (to get into index.php in a subfolder called test in htdocs , type localhost/test/index.php ).","title":"First PHP Script"}]}